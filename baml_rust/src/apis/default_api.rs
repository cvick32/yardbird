/*
 * baml-cli serve
 *
 * baml-cli serve
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`analyze_counterexample`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AnalyzeCounterexampleError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`propose_invariant`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProposeInvariantError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`suggest_lemmas`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SuggestLemmasError {
    UnknownValue(serde_json::Value),
}

pub async fn analyze_counterexample(
    configuration: &configuration::Configuration,
    analyze_counterexample_request: models::AnalyzeCounterexampleRequest,
) -> Result<models::InvariantSuggestions, Error<AnalyzeCounterexampleError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_analyze_counterexample_request = analyze_counterexample_request;

    let uri_str = format!("{}/call/AnalyzeCounterexample", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_analyze_counterexample_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text =>  Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::InvariantSuggestions`"))),
            ContentType::Unsupported(unknown_type) =>  Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::InvariantSuggestions`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AnalyzeCounterexampleError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn propose_invariant(
    configuration: &configuration::Configuration,
    propose_invariant_request: models::ProposeInvariantRequest,
) -> Result<models::InvariantSuggestions, Error<ProposeInvariantError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_propose_invariant_request = propose_invariant_request;

    let uri_str = format!("{}/call/ProposeInvariant", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_propose_invariant_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text =>  Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::InvariantSuggestions`"))),
            ContentType::Unsupported(unknown_type) =>  Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::InvariantSuggestions`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ProposeInvariantError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn suggest_lemmas(
    configuration: &configuration::Configuration,
    suggest_lemmas_request: models::SuggestLemmasRequest,
) -> Result<models::InvariantSuggestions, Error<SuggestLemmasError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_suggest_lemmas_request = suggest_lemmas_request;

    let uri_str = format!("{}/call/SuggestLemmas", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_suggest_lemmas_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text =>  Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::InvariantSuggestions`"))),
            ContentType::Unsupported(unknown_type) =>  Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::InvariantSuggestions`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SuggestLemmasError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
