/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VerifyImport } from './routes/verify'
import { Route as OauthImport } from './routes/oauth'
import { Route as LogoutImport } from './routes/logout'
import { Route as IndexImport } from './routes/index'
import { Route as ProblemProblemImport } from './routes/problem/$problem'
import { Route as ArtifactsArtImport } from './routes/artifacts/$art'

// Create/Update Routes

const VerifyRoute = VerifyImport.update({
  id: '/verify',
  path: '/verify',
  getParentRoute: () => rootRoute,
} as any)

const OauthRoute = OauthImport.update({
  id: '/oauth',
  path: '/oauth',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProblemProblemRoute = ProblemProblemImport.update({
  id: '/problem/$problem',
  path: '/problem/$problem',
  getParentRoute: () => rootRoute,
} as any)

const ArtifactsArtRoute = ArtifactsArtImport.update({
  id: '/artifacts/$art',
  path: '/artifacts/$art',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/oauth': {
      id: '/oauth'
      path: '/oauth'
      fullPath: '/oauth'
      preLoaderRoute: typeof OauthImport
      parentRoute: typeof rootRoute
    }
    '/verify': {
      id: '/verify'
      path: '/verify'
      fullPath: '/verify'
      preLoaderRoute: typeof VerifyImport
      parentRoute: typeof rootRoute
    }
    '/artifacts/$art': {
      id: '/artifacts/$art'
      path: '/artifacts/$art'
      fullPath: '/artifacts/$art'
      preLoaderRoute: typeof ArtifactsArtImport
      parentRoute: typeof rootRoute
    }
    '/problem/$problem': {
      id: '/problem/$problem'
      path: '/problem/$problem'
      fullPath: '/problem/$problem'
      preLoaderRoute: typeof ProblemProblemImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/oauth': typeof OauthRoute
  '/verify': typeof VerifyRoute
  '/artifacts/$art': typeof ArtifactsArtRoute
  '/problem/$problem': typeof ProblemProblemRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/oauth': typeof OauthRoute
  '/verify': typeof VerifyRoute
  '/artifacts/$art': typeof ArtifactsArtRoute
  '/problem/$problem': typeof ProblemProblemRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/oauth': typeof OauthRoute
  '/verify': typeof VerifyRoute
  '/artifacts/$art': typeof ArtifactsArtRoute
  '/problem/$problem': typeof ProblemProblemRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
  | '/'
  | '/logout'
  | '/oauth'
  | '/verify'
  | '/artifacts/$art'
  | '/problem/$problem'
  fileRoutesByTo: FileRoutesByTo
  to:
  | '/'
  | '/logout'
  | '/oauth'
  | '/verify'
  | '/artifacts/$art'
  | '/problem/$problem'
  id:
  | '__root__'
  | '/'
  | '/logout'
  | '/oauth'
  | '/verify'
  | '/artifacts/$art'
  | '/problem/$problem'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LogoutRoute: typeof LogoutRoute
  OauthRoute: typeof OauthRoute
  VerifyRoute: typeof VerifyRoute
  ArtifactsArtRoute: typeof ArtifactsArtRoute
  ProblemProblemRoute: typeof ProblemProblemRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LogoutRoute: LogoutRoute,
  OauthRoute: OauthRoute,
  VerifyRoute: VerifyRoute,
  ArtifactsArtRoute: ArtifactsArtRoute,
  ProblemProblemRoute: ProblemProblemRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/logout",
        "/oauth",
        "/verify",
        "/artifacts/$art",
        "/problem/$problem"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/oauth": {
      "filePath": "oauth.tsx"
    },
    "/verify": {
      "filePath": "verify.tsx"
    },
    "/artifacts/$art": {
      "filePath": "artifacts/$art.tsx"
    },
    "/problem/$problem": {
      "filePath": "problem/$problem.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
