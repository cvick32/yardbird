(declare-sort client 0)
(declare-fun new_homeExclusiveGranted () Bool)
(declare-fun new_reqShared () (Array client Bool))
(declare-fun new_reqExclusive () (Array client Bool))
(declare-fun grantShared () (Array client Bool))
(declare-fun new_grantShared () (Array client Bool))
(declare-fun homeInvalidateList () (Array client Bool))
(declare-fun |fml:cl| () client)
(declare-fun homeExclusiveGranted () Bool)
(declare-fun new_homeCurrentclient () client)
(declare-fun invalidate () (Array client Bool))
(declare-fun grantExclusive () (Array client Bool))
(declare-fun homeCurrentclient () client)
(declare-fun new_cacheShared () (Array client Bool))
(declare-fun new_homeCurrentReqExclusive () Bool)
(declare-fun new_homeInvalidateList () (Array client Bool))
(declare-fun new_homeCurrentReqShared () Bool)
(declare-fun homeCurrentReqExclusive () Bool)
(declare-fun reqExclusive () (Array client Bool))
(declare-fun new_cacheExclusive () (Array client Bool))
(declare-fun new_homeSharerList () (Array client Bool))
(declare-fun new_grantExclusive () (Array client Bool))
(declare-fun homeSharerList () (Array client Bool))
(declare-fun invalidateAck () (Array client Bool))
(declare-fun cacheShared () (Array client Bool))
(declare-fun reqShared () (Array client Bool))
(declare-fun cacheExclusive () (Array client Bool))
(declare-fun homeCurrentReqShared () Bool)
(declare-fun new_invalidateAck () (Array client Bool))
(declare-fun new_invalidate () (Array client Bool))
(define-fun .homeExclusiveGranted () Bool (! homeExclusiveGranted :next new_homeExclusiveGranted))
(define-fun .reqShared () (Array client Bool) (! reqShared :next new_reqShared))
(define-fun .reqExclusive () (Array client Bool) (! reqExclusive :next new_reqExclusive))
(define-fun .grantShared () (Array client Bool) (! grantShared :next new_grantShared))
(declare-fun new_fmlcl () client)
(define-fun .fmlcl () client (! |fml:cl| :next new_fmlcl))
(define-fun .homeCurrentclient () client (! homeCurrentclient :next new_homeCurrentclient))
(define-fun .cacheShared () (Array client Bool) (! cacheShared :next new_cacheShared))
(define-fun .homeCurrentReqExclusive () Bool (! homeCurrentReqExclusive :next new_homeCurrentReqExclusive))
(define-fun .homeInvalidateList () (Array client Bool) (! homeInvalidateList :next new_homeInvalidateList))
(define-fun .homeCurrentReqShared () Bool (! homeCurrentReqShared :next new_homeCurrentReqShared))
(define-fun .cacheExclusive () (Array client Bool) (! cacheExclusive :next new_cacheExclusive))
(define-fun .homeSharerList () (Array client Bool) (! homeSharerList :next new_homeSharerList))
(define-fun .grantExclusive () (Array client Bool) (! grantExclusive :next new_grantExclusive))
(define-fun .invalidateAck () (Array client Bool) (! invalidateAck :next new_invalidateAck))
(define-fun .invalidate () (Array client Bool) (! invalidate :next new_invalidate))
(declare-fun C () client)
(declare-fun new_C () client)
(define-fun .C () client (! C :next new_C))
(declare-fun D () client)
(declare-fun new_D () client)
(define-fun .D () client (! D :next new_D))
(declare-fun E () client)
(declare-fun new_E () client)
(define-fun .E () client (! E :next new_E))
(declare-fun grantExclusiveRule () Bool)
(define-fun .grantExclusiveRule () Bool (! grantExclusiveRule :action 0))
(declare-fun grantSharedRule () Bool)
(define-fun .grantSharedRule () Bool (! grantSharedRule :action 0))
(declare-fun pickNewExclusiveRequestRule () Bool)
(define-fun .pickNewExclusiveRequestRule () Bool (! pickNewExclusiveRequestRule :action 0))
(declare-fun pickNewSharedRequestRule () Bool)
(define-fun .pickNewSharedRequestRule () Bool (! pickNewSharedRequestRule :action 0))
(declare-fun receiveExclusiveGrantRule () Bool)
(define-fun .receiveExclusiveGrantRule () Bool (! receiveExclusiveGrantRule :action 0))
(declare-fun receiveInvalidateAckRule () Bool)
(define-fun .receiveInvalidateAckRule () Bool (! receiveInvalidateAckRule :action 0))
(declare-fun receiveSharedGrantRule () Bool)
(define-fun .receiveSharedGrantRule () Bool (! receiveSharedGrantRule :action 0))
(declare-fun reqExclusiveRule () Bool)
(define-fun .reqExclusiveRule () Bool (! reqExclusiveRule :action 0))
(declare-fun reqSharedRule () Bool)
(define-fun .reqSharedRule () Bool (! reqSharedRule :action 0))
(declare-fun sendInvalidateRule () Bool)
(define-fun .sendInvalidateRule () Bool (! sendInvalidateRule :action 0))
(declare-fun sharerInvalidatesCacheRule () Bool)
(define-fun .sharerInvalidatesCacheRule () Bool (! sharerInvalidatesCacheRule :action 0))
(define-fun init () Bool (! (and (= reqShared ((as const (Array client Bool)) false))
     (= reqExclusive ((as const (Array client Bool)) false))
     (= invalidate ((as const (Array client Bool)) false))
     (= grantShared ((as const (Array client Bool)) false))
     (= grantExclusive ((as const (Array client Bool)) false))
     (= invalidateAck ((as const (Array client Bool)) false))
     (= cacheShared ((as const (Array client Bool)) false))
     (= cacheExclusive ((as const (Array client Bool)) false))
     (= homeSharerList ((as const (Array client Bool)) false))
     (= homeInvalidateList ((as const (Array client Bool)) false))
     (not homeExclusiveGranted)
     (not homeCurrentReqShared)
     (not homeCurrentReqExclusive)
     ) :init true))
(define-fun trans () Bool (! (and (=> grantExclusiveRule (and (= new_homeSharerList (store homeSharerList homeCurrentclient true))
     (not new_homeCurrentReqExclusive)
     new_homeExclusiveGranted
     (= new_grantExclusive (store grantExclusive homeCurrentclient true))
     (= homeCurrentReqShared new_homeCurrentReqShared)
     (= grantShared new_grantShared)
     (= homeCurrentclient new_homeCurrentclient)
     (= homeInvalidateList new_homeInvalidateList)
     (= reqExclusive new_reqExclusive)
     (= reqShared new_reqShared)
     (= cacheExclusive new_cacheExclusive)
     (= invalidateAck new_invalidateAck)
     (= cacheShared new_cacheShared)
     (= invalidate new_invalidate)
     homeCurrentReqExclusive
     (not (select invalidate homeCurrentclient))
     (not (select grantShared homeCurrentclient))
     (not (select grantExclusive homeCurrentclient))
     (forall ((|I:client| client)) (not (select homeSharerList |I:client|)))
     ))
(=> grantSharedRule (and (= new_homeSharerList (store homeSharerList homeCurrentclient true))
     (not new_homeCurrentReqShared)
     (= new_grantShared (store grantShared homeCurrentclient true))
     (= grantExclusive new_grantExclusive)
     (= homeExclusiveGranted new_homeExclusiveGranted)
     (= homeCurrentReqExclusive new_homeCurrentReqExclusive)
     (= homeCurrentclient new_homeCurrentclient)
     (= homeInvalidateList new_homeInvalidateList)
     (= reqExclusive new_reqExclusive)
     (= reqShared new_reqShared)
     (= cacheExclusive new_cacheExclusive)
     (= invalidateAck new_invalidateAck)
     (= cacheShared new_cacheShared)
     (= invalidate new_invalidate)
     homeCurrentReqShared
     (not homeExclusiveGranted)
     (not (select invalidate homeCurrentclient))
     (not (select grantShared homeCurrentclient))
     (not (select grantExclusive homeCurrentclient))))
(=> pickNewExclusiveRequestRule (and new_homeCurrentReqExclusive
     (= new_reqExclusive (store reqExclusive |fml:cl| false))
     (= new_homeCurrentclient |fml:cl|)
     (= new_homeInvalidateList homeSharerList)
     (= grantExclusive new_grantExclusive)
     (= homeExclusiveGranted new_homeExclusiveGranted)
     (= homeSharerList new_homeSharerList)
     (= homeCurrentReqShared new_homeCurrentReqShared)
     (= grantShared new_grantShared)
     (= reqShared new_reqShared)
     (= cacheExclusive new_cacheExclusive)
     (= invalidateAck new_invalidateAck)
     (= cacheShared new_cacheShared)
     (= invalidate new_invalidate)
     (not homeCurrentReqShared)
     (not homeCurrentReqExclusive)
     (select reqExclusive |fml:cl|)))
(=> pickNewSharedRequestRule (and new_homeCurrentReqShared
     (= new_reqShared (store reqShared |fml:cl| false))
     (= new_homeCurrentclient |fml:cl|)
     (= new_homeInvalidateList homeSharerList)
     (= grantExclusive new_grantExclusive)
     (= homeExclusiveGranted new_homeExclusiveGranted)
     (= homeSharerList new_homeSharerList)
     (= homeCurrentReqExclusive new_homeCurrentReqExclusive)
     (= grantShared new_grantShared)
     (= reqExclusive new_reqExclusive)
     (= cacheExclusive new_cacheExclusive)
     (= invalidateAck new_invalidateAck)
     (= cacheShared new_cacheShared)
     (= invalidate new_invalidate)
     (not homeCurrentReqShared)
     (not homeCurrentReqExclusive)
     (select reqShared |fml:cl|)))
(=> receiveExclusiveGrantRule (and (= new_cacheExclusive (store cacheExclusive |fml:cl| true))
     (= new_grantExclusive (store grantExclusive |fml:cl| false))
     (= homeExclusiveGranted new_homeExclusiveGranted)
     (= homeSharerList new_homeSharerList)
     (= homeCurrentReqExclusive new_homeCurrentReqExclusive)
     (= homeCurrentReqShared new_homeCurrentReqShared)
     (= grantShared new_grantShared)
     (= homeCurrentclient new_homeCurrentclient)
     (= homeInvalidateList new_homeInvalidateList)
     (= reqExclusive new_reqExclusive)
     (= reqShared new_reqShared)
     (= invalidateAck new_invalidateAck)
     (= cacheShared new_cacheShared)
     (= invalidate new_invalidate)
     (select grantExclusive |fml:cl|)))
(=> receiveInvalidateAckRule (and (= new_homeSharerList (store homeSharerList |fml:cl| false))
     (not new_homeExclusiveGranted)
     (= new_invalidateAck (store invalidateAck |fml:cl| false))
     (= grantExclusive new_grantExclusive)
     (= homeCurrentReqExclusive new_homeCurrentReqExclusive)
     (= homeCurrentReqShared new_homeCurrentReqShared)
     (= grantShared new_grantShared)
     (= homeCurrentclient new_homeCurrentclient)
     (= homeInvalidateList new_homeInvalidateList)
     (= reqExclusive new_reqExclusive)
     (= reqShared new_reqShared)
     (= cacheExclusive new_cacheExclusive)
     (= cacheShared new_cacheShared)
     (= invalidate new_invalidate)
     (or homeCurrentReqShared homeCurrentReqExclusive)
     (select invalidateAck |fml:cl|)))
(=> receiveSharedGrantRule (and (= new_cacheShared (store cacheShared |fml:cl| true))
     (= new_grantShared (store grantShared |fml:cl| false))
     (= grantExclusive new_grantExclusive)
     (= homeExclusiveGranted new_homeExclusiveGranted)
     (= homeSharerList new_homeSharerList)
     (= homeCurrentReqExclusive new_homeCurrentReqExclusive)
     (= homeCurrentReqShared new_homeCurrentReqShared)
     (= homeCurrentclient new_homeCurrentclient)
     (= homeInvalidateList new_homeInvalidateList)
     (= reqExclusive new_reqExclusive)
     (= reqShared new_reqShared)
     (= cacheExclusive new_cacheExclusive)
     (= invalidateAck new_invalidateAck)
     (= invalidate new_invalidate)
     (select grantShared |fml:cl|)))
(=> reqExclusiveRule (and (= new_reqExclusive (store reqExclusive |fml:cl| true))
     (= grantExclusive new_grantExclusive)
     (= homeExclusiveGranted new_homeExclusiveGranted)
     (= homeSharerList new_homeSharerList)
     (= homeCurrentReqExclusive new_homeCurrentReqExclusive)
     (= homeCurrentReqShared new_homeCurrentReqShared)
     (= grantShared new_grantShared)
     (= homeCurrentclient new_homeCurrentclient)
     (= homeInvalidateList new_homeInvalidateList)
     (= reqShared new_reqShared)
     (= cacheExclusive new_cacheExclusive)
     (= invalidateAck new_invalidateAck)
     (= cacheShared new_cacheShared)
     (= invalidate new_invalidate)
     (not (select cacheShared |fml:cl|))
     (not (select cacheExclusive |fml:cl|))
     (not (select reqShared |fml:cl|))
     (not (select reqExclusive |fml:cl|))))
(=> reqSharedRule (and (= new_reqShared (store reqShared |fml:cl| true))
     (= grantExclusive new_grantExclusive)
     (= homeExclusiveGranted new_homeExclusiveGranted)
     (= homeSharerList new_homeSharerList)
     (= homeCurrentReqExclusive new_homeCurrentReqExclusive)
     (= homeCurrentReqShared new_homeCurrentReqShared)
     (= grantShared new_grantShared)
     (= homeCurrentclient new_homeCurrentclient)
     (= homeInvalidateList new_homeInvalidateList)
     (= reqExclusive new_reqExclusive)
     (= cacheExclusive new_cacheExclusive)
     (= invalidateAck new_invalidateAck)
     (= cacheShared new_cacheShared)
     (= invalidate new_invalidate)
     (not (select cacheShared |fml:cl|))
     (not (select cacheExclusive |fml:cl|))
     (not (select reqShared |fml:cl|))
     (not (select reqExclusive |fml:cl|))))
(=> sendInvalidateRule (and (= new_invalidate (store invalidate |fml:cl| true))
     (= new_homeInvalidateList (store homeInvalidateList |fml:cl| false))
     (= grantExclusive new_grantExclusive)
     (= homeExclusiveGranted new_homeExclusiveGranted)
     (= homeSharerList new_homeSharerList)
     (= homeCurrentReqExclusive new_homeCurrentReqExclusive)
     (= homeCurrentReqShared new_homeCurrentReqShared)
     (= grantShared new_grantShared)
     (= homeCurrentclient new_homeCurrentclient)
     (= reqExclusive new_reqExclusive)
     (= reqShared new_reqShared)
     (= cacheExclusive new_cacheExclusive)
     (= invalidateAck new_invalidateAck)
     (= cacheShared new_cacheShared)
     (not (select invalidate |fml:cl|))
     (not (select grantShared |fml:cl|))
     (not (select grantExclusive |fml:cl|))
     (select homeInvalidateList |fml:cl|)
     (or homeCurrentReqExclusive
         (and homeCurrentReqShared homeExclusiveGranted))))
(=> sharerInvalidatesCacheRule (and (= new_invalidate (store invalidate |fml:cl| false))
     (= new_invalidateAck (store invalidateAck |fml:cl| true))
     (= new_cacheShared (store cacheShared |fml:cl| false))
     (= new_cacheExclusive (store cacheExclusive |fml:cl| false))
     (= grantExclusive new_grantExclusive)
     (= homeExclusiveGranted new_homeExclusiveGranted)
     (= homeSharerList new_homeSharerList)
     (= homeCurrentReqExclusive new_homeCurrentReqExclusive)
     (= homeCurrentReqShared new_homeCurrentReqShared)
     (= grantShared new_grantShared)
     (= homeCurrentclient new_homeCurrentclient)
     (= homeInvalidateList new_homeInvalidateList)
     (= reqExclusive new_reqExclusive)
     (= reqShared new_reqShared)
     (select invalidate |fml:cl|)
     (not (select invalidateAck |fml:cl|))))
(or grantExclusiveRule grantSharedRule pickNewExclusiveRequestRule pickNewSharedRequestRule receiveExclusiveGrantRule receiveInvalidateAckRule receiveSharedGrantRule reqExclusiveRule reqSharedRule sendInvalidateRule sharerInvalidatesCacheRule)
) :trans true))
(define-fun property () Bool (!
(and
 (forall ((C client) (D client)) (=> (and (not (= C D)) (select cacheExclusive C)) (and (not (select cacheExclusive D)) (not (select cacheShared D)))))
)

     :invar-property 0))