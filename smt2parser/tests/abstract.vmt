(declare-sort Arr-Int-Int 0)
(declare-fun ConstArr-Int (Int) ConstArr-Int-Int)
(declare-fun Read-Int-Int (Arr-Int-Int Int) Int)
(declare-fun Write-Int-Int (Arr-Int-Int Int Int) Arr-Int-Int)
(declare-fun a () Arr-Int-Int)
(declare-fun new_a () Arr-Int-Int)
(define-fun .a () Arr-Int-Int (! a :next new_a))
(declare-fun x () Int)
(declare-fun new_x () Int)
(define-fun .x () Int (! x :next new_x))
(declare-fun y () Int)
(declare-fun new_y () Int)
(define-fun .y () Int (! y :next new_y))
(declare-fun Z () Int)
(declare-fun new_Z () Int)
(define-fun .Z () Int (! Z :next new_Z))


(define-fun init () Bool (!
     (= a (ConstArr-Int-Int Z))
     :init true))

(define-fun trans () Bool
  (!
  (and
    (= new_a (Write-Int-Int a x (Read-Int-Int a y)))
    (= new_Z Z)
  )
  :trans true))

(define-fun property () Bool
  (! (= (Read-Int-Int a x) Z)
     :invar-property 0))
