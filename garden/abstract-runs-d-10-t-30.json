[{"example":"../examples/array_init_addvar6.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"counterexample\n;; step 0\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j (- 1))\n  (= N 2)\n  (= pc 1)\n  (= Z 1)\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (- 1)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 2))\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (- 3)) (as @9.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (- 1)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 2))\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (- 3)) (as @9.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 1\n(and\n  (= a (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j (- 1))\n  (= N 2)\n  (= pc 1)\n  (= Z 1)\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (- 1)))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 3) (as @10.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (- 1)))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 3) (as @10.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 2\n(and\n  (= a (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= j (- 1))\n  (= N 2)\n  (= pc 1)\n  (= Z 1)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (- 1)) (as @12.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) (- 3))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (- 4)) (as @13.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (- 1)) (as @12.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) (- 3))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (- 4)) (as @13.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 3\n(and\n  (= a (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j (- 1))\n  (= N 2)\n  (= pc 2)\n  (= Z 1)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (- 1)) (as @11.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0) (- 4))\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (- 5)))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (- 1)) (as @11.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0) (- 4))\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (- 5)))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 4\n(and\n  (= a (as @3.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j (- 1))\n  (= N 2)\n  (= pc 2)\n  (= Z 1)\n  (= (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 (- 1)) (as @14.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 3))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 (- 1)) (as @14.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 3))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 5\n(and\n  (= a (as @4.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= j (- 1))\n  (= N 2)\n  (= pc 2)\n  (= Z 1)\n  (= (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 (- 1)) (as @16.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2) (- 6))\n  (= (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 (- 7)) (as @17.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 (- 1)) (as @16.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2) (- 6))\n  (= (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 (- 7)) (as @17.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 6\n(and\n  (= a (as @4.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j (- 1))\n  (= N 2)\n  (= pc 3)\n  (= Z 1)\n  (= (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 0 (- 1)) (as @15.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 0) (- 7))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 0 (- 8)))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 0 (- 1)) (as @15.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 0) (- 7))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 0 (- 8)))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 7\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j (- 1))\n  (= N 2)\n  (= pc 3)\n  (= Z 1)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 (- 1)) (as @18.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 3))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 (- 1)) (as @18.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 3))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 8\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= j (- 1))\n  (= N 2)\n  (= pc 3)\n  (= Z 1)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 (- 1)) (as @20.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) (- 9))\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 (- 10)) (as @21.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 (- 1)) (as @20.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) (- 9))\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 (- 10)) (as @21.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 9\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j (- 1))\n  (= N 2)\n  (= pc 4)\n  (= Z 1)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 (- 1)) (as @19.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) (- 10))\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 (- 11)))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 (- 1)) (as @19.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) (- 10))\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 (- 11)))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 10\n(and\n  (= a (as @7.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j (- 1))\n  (= N 2)\n  (= pc 4)\n  (= Z 1)\n  (= (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1 (- 1)) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1 3))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1 (- 1)) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1 3))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\n;; step 11\n(and\n  (= a (as @8.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= j (- 1))\n  (= N 2)\n  (= pc 4)\n  (= Z 1)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (- 1)))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 0)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (- 1)))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\nsearch stats:\nnum_solve_calls = 413\nnum_solve_sat_calls = 223\nnum_solve_unsat_calls = 190\nnum_solver_reset = 0\nnum_added_cubes = 28\nnum_subsumed_cubes = 22\nnum_block = 195\nnum_refinements = 2\nnum_predicates = 8\nmax_cube_size = 5\navg_cube_size = 3.464\nsolve_time = 0.030\nsolve_sat_time = 0.026\nsolve_unsat_time = 0.003\nblock_time = 0.023\ngeneralize_and_push_time = 0.013\nrec_block_time = 0.044\npropagate_time = 0.006\nrefinement_time = 0.020\nprove_time = 0.052\ntotal_time = nan\nunsafe"}},"run_time":194,"depth":10}]},{"example":"../examples/array_init_pair_sum_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i 1) i) 1)","(= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) i) (+ (Read-Int-Int a i) (Read-Int-Int b i)))","(= (Read-Int-Int (Write-Int-Int b i 2) i) 2)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i 2) Z) (Read-Int-Int b Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i 1) N) (Read-Int-Int a N)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int b i 2) N) (Read-Int-Int b N)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) Z) (Read-Int-Int c Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 2))\n  (= i Z)\n  (<= 3 (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 1\n(or\n  (let ((.def_26 (Read-Int-Int a i))) (let ((.def_27 (Read-Int-Int b i))) (not (= (+ .def_26 (+ .def_27 (* (- 1) (Read-Int-Int (Write-Int-Int c i (+ .def_26 .def_27)) i)))) 0))))\n  (not (= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) Z) (Read-Int-Int c Z)))\n  (not (= pc 2))\n  (<= 3 (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 2\n(or\n  (not (= (Read-Int-Int (Write-Int-Int a i 1) i) 1))\n  (not (= pc 2))\n  (<= 3 (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z))\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 3\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int b Z) 2)\n)\n;; clause 4\n(or\n  (<= Z 0)\n  (= (Read-Int-Int b Z) 2)\n  (<= i Z)\n)\n;; clause 5\n(or\n  (not (= (Read-Int-Int (Write-Int-Int b i 2) i) 2))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int b i 2) Z) (Read-Int-Int b Z))\n)\n;; clause 6\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int b Z) 2)\n)\n;; clause 7\n(or\n  (= i Z)\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int b Z) 2)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 8\n(or\n  (not (= pc 2))\n  (= i 0)\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int b Z) 2)\n)\n;; clause 9\n(or\n  (not (= pc 2))\n  (<= 3 (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 10\n(or\n  (not (= pc 1))\n  (not (<= N i))\n  (= i N)\n)\n;; clause 11\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int b Z) 2)\n  (<= 3 N)\n)\n;; clause 12\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int b Z) 2)\n  (<= 3 N)\n)\n;; clause 13\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int b Z) 2)\n  (<= 4 N)\n)\n;; clause 14\n(or\n  (= i Z)\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int b Z) 2)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (<= 4 N)\n)\n;; clause 15\n(or\n  (not (= (Read-Int-Int (Write-Int-Int a i 1) i) 1))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z))\n)\n;; clause 16\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 17\n(or\n  (<= Z 0)\n  (= (Read-Int-Int a Z) 1)\n  (<= i Z)\n)\n;; clause 18\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 19\n(or\n  (= i Z)\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 20\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= i 1)\n  (= (Read-Int-Int b Z) 2)\n)\n;; clause 21\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (<= 3 (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 22\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= 3 (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 1392\nnum_solve_sat_calls = 673\nnum_solve_unsat_calls = 719\nnum_solver_reset = 0\nnum_added_cubes = 137\nnum_subsumed_cubes = 130\nnum_block = 677\nnum_refinements = 6\nnum_predicates = 25\nmax_cube_size = 7\navg_cube_size = 4.518\nsolve_time = 0.292\nsolve_sat_time = 0.266\nsolve_unsat_time = 0.025\nblock_time = 0.223\ngeneralize_and_push_time = 0.133\nrec_block_time = 0.285\npropagate_time = 0.061\nrefinement_time = 0.051\nprove_time = 0.356\ntotal_time = nan\nsafe"}},"run_time":454,"depth":10}]},{"example":"../examples/array_max_min.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= i 0)\n  (<= Z 0)\n  (<= N Z)\n  (<= min (Read-Int-Int a 0))\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= min (Read-Int-Int a 0))\n)\n;; clause 2\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (<= min (Read-Int-Int a 0))\n)\n;; clause 3\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= min max)\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 4\n(or\n  (not (= pc 2))\n  (= i 0)\n  (<= min max)\n  (<= Z 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 263\nnum_solve_sat_calls = 132\nnum_solve_unsat_calls = 131\nnum_solver_reset = 0\nnum_added_cubes = 27\nnum_subsumed_cubes = 19\nnum_block = 112\nnum_refinements = 1\nnum_predicates = 9\nmax_cube_size = 5\navg_cube_size = 4.000\nsolve_time = 0.017\nsolve_sat_time = 0.014\nsolve_unsat_time = 0.002\nblock_time = 0.012\ngeneralize_and_push_time = 0.008\nrec_block_time = 0.020\npropagate_time = 0.003\nrefinement_time = 0.007\nprove_time = 0.025\ntotal_time = nan\nsafe"}},"run_time":96,"depth":10}]},{"example":"../examples/array_init_ite_jump.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 2, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }] }"},"run_time":11,"depth":10}]},{"example":"../examples/array_init_reverse_mult.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 5, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] } }] }"},"run_time":72,"depth":10}]},{"example":"../examples/array_tiling_poly1.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (* i i)) i) (* i i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* i i)) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= S i))\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (* Z Z))\n  (<= S Z)\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (* Z Z))\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 51\nnum_solve_sat_calls = 28\nnum_solve_unsat_calls = 23\nnum_solver_reset = 0\nnum_added_cubes = 4\nnum_subsumed_cubes = 2\nnum_block = 16\nnum_refinements = 1\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.500\nsolve_time = 0.050\nsolve_sat_time = 0.048\nsolve_unsat_time = 0.001\nblock_time = 0.023\ngeneralize_and_push_time = 0.020\nrec_block_time = 0.041\npropagate_time = 0.005\nrefinement_time = 0.002\nprove_time = 0.052\ntotal_time = nan\nsafe"}},"run_time":85,"depth":10}]},{"example":"../examples/array_init_increm.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 5, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] } }] }"},"run_time":63,"depth":10}]},{"example":"../examples/array_nest_split_01.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (<= N Z)\n  (= pc 1)\n  (<= j 0)\n)\n;; clause 2\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 71\nnum_solve_sat_calls = 38\nnum_solve_unsat_calls = 33\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 3\nnum_block = 21\nnum_refinements = 1\nnum_predicates = 7\nmax_cube_size = 4\navg_cube_size = 3.333\nsolve_time = 0.005\nsolve_sat_time = 0.004\nsolve_unsat_time = 0.001\nblock_time = 0.002\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.006\npropagate_time = 0.000\nrefinement_time = 0.002\nprove_time = 0.007\ntotal_time = nan\nsafe"}},"run_time":62,"depth":10}]},{"example":"../examples/array_init_addvar7.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (= pc 1)\n  (<= Z 0)\n  (<= N Z)\n  (= pc 2)\n)\n;; clause 1\n(or\n  (= i 0)\n  (<= Z 0)\n  (<= N Z)\n  (<= j (- 1))\n)\n;; clause 2\n(or\n  (not (= pc 4))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 3\n(or\n  (= i 0)\n  (= pc 1)\n  (<= Z 0)\n  (<= N Z)\n  (= pc 2)\n)\n;; clause 4\n(or\n  (= pc 1)\n  (<= Z 0)\n  (<= N Z)\n  (<= j (- 1))\n)\nsearch stats:\nnum_solve_calls = 678\nnum_solve_sat_calls = 352\nnum_solve_unsat_calls = 326\nnum_solver_reset = 0\nnum_added_cubes = 42\nnum_subsumed_cubes = 41\nnum_block = 325\nnum_refinements = 2\nnum_predicates = 10\nmax_cube_size = 5\navg_cube_size = 3.690\nsolve_time = 0.049\nsolve_sat_time = 0.043\nsolve_unsat_time = 0.005\nblock_time = 0.040\ngeneralize_and_push_time = 0.024\nrec_block_time = 0.058\npropagate_time = 0.012\nrefinement_time = 0.018\nprove_time = 0.072\ntotal_time = nan\nsafe"}},"run_time":186,"depth":10}]},{"example":"../examples/array_two_counters_replace.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":831,"depth":10}]},{"example":"../examples/array_init_addvar5.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) i) (+ (Read-Int-Int a i) j))","(= (Read-Int-Int (Write-Int-Int a i j) i) j)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) N) (Read-Int-Int a N)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i j) N) (Read-Int-Int a N)))","(=> (not (= i i_next)) (= (Read-Int-Int (Write-Int-Int a_next i_next j_next) i) (Read-Int-Int a_next i)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (= pc 3))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (= i N))\n  (not (= pc 3))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 2\n(or\n  (not (= pc 3))\n  (= i i_next)\n)\n;; clause 3\n(or\n  (not (= pc 3))\n  (= i 0)\n)\nsearch stats:\nnum_solve_calls = 112\nnum_solve_sat_calls = 56\nnum_solve_unsat_calls = 56\nnum_solver_reset = 0\nnum_added_cubes = 10\nnum_subsumed_cubes = 6\nnum_block = 47\nnum_refinements = 0\nnum_predicates = 17\nmax_cube_size = 5\navg_cube_size = 3.000\nsolve_time = 0.027\nsolve_sat_time = 0.023\nsolve_unsat_time = 0.003\nblock_time = 0.019\ngeneralize_and_push_time = 0.012\nrec_block_time = 0.019\npropagate_time = 0.005\nrefinement_time = 0.000\nprove_time = 0.028\ntotal_time = nan\nsafe"}},"run_time":162,"depth":10}]},{"example":"../examples/array_nest_split_03.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (<= N Z)\n  (= pc 1)\n  (<= j 0)\n)\n;; clause 2\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 71\nnum_solve_sat_calls = 38\nnum_solve_unsat_calls = 33\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 3\nnum_block = 21\nnum_refinements = 1\nnum_predicates = 8\nmax_cube_size = 4\navg_cube_size = 3.333\nsolve_time = 0.006\nsolve_sat_time = 0.004\nsolve_unsat_time = 0.001\nblock_time = 0.003\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.006\npropagate_time = 0.000\nrefinement_time = 0.002\nprove_time = 0.008\ntotal_time = nan\nsafe"}},"run_time":63,"depth":10}]},{"example":"../examples/array_copy_increment_ind.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (+ 1 (Read-Int-Int a i))) i) (+ 1 (Read-Int-Int a i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (+ 1 (Read-Int-Int a i))) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= (Read-Int-Int b Z) (Read-Int-Int a Z)))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 24\nnum_solve_sat_calls = 11\nnum_solve_unsat_calls = 13\nnum_solver_reset = 0\nnum_added_cubes = 3\nnum_subsumed_cubes = 1\nnum_block = 6\nnum_refinements = 0\nnum_predicates = 7\nmax_cube_size = 3\navg_cube_size = 2.667\nsolve_time = 0.003\nsolve_sat_time = 0.002\nsolve_unsat_time = 0.001\nblock_time = 0.001\ngeneralize_and_push_time = 0.001\nrec_block_time = 0.001\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.003\ntotal_time = nan\nsafe"}},"run_time":32,"depth":10}]},{"example":"../examples/array_tiling_rewnifrev.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a1 i i) i) i)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a1 i i) Z) (Read-Int-Int a1 Z)))","(= (Read-Int-Int (Write-Int-Int a (- i 1) (- i 2)) (- i 1)) (- i 2))","(=> (not (= Z (- i 1))) (= (Read-Int-Int (Write-Int-Int a (- i 1) (- i 2)) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= 0 Z))\n  (<= 0 i)\n  (<= Z (Read-Int-Int a Z))\n  (<= S Z)\n)\n;; clause 1\n(or\n  (<= Z (Read-Int-Int a Z))\n  (<= S Z)\n  (<= Z i)\n)\nsearch stats:\nnum_solve_calls = 52\nnum_solve_sat_calls = 25\nnum_solve_unsat_calls = 27\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 3\nnum_block = 17\nnum_refinements = 1\nnum_predicates = 13\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.008\nsolve_sat_time = 0.006\nsolve_unsat_time = 0.001\nblock_time = 0.003\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.007\npropagate_time = 0.001\nrefinement_time = 0.002\nprove_time = 0.010\ntotal_time = nan\nsafe"}},"run_time":58,"depth":10}]},{"example":"../examples/array_double_inverse.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":177,"depth":10}]},{"example":"../examples/array_init_pair_sum.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i 2) i) 2)","(= (Read-Int-Int (Write-Int-Int a i 1) i) 1)","(= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) i) (+ (Read-Int-Int a i) (Read-Int-Int b i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i 2) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) Z) (Read-Int-Int c Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 1\n(or\n  (<= Z 0)\n  (<= i Z)\n  (= (Read-Int-Int b Z) 2)\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int b Z) 2)\n)\n;; clause 3\n(or\n  (<= Z 0)\n  (<= i Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 4\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int b Z) 2)\n)\n;; clause 5\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 6\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= 3 (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 7\n(or\n  (not (= pc 2))\n  (<= 3 (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 402\nnum_solve_sat_calls = 195\nnum_solve_unsat_calls = 207\nnum_solver_reset = 0\nnum_added_cubes = 38\nnum_subsumed_cubes = 30\nnum_block = 175\nnum_refinements = 3\nnum_predicates = 17\nmax_cube_size = 5\navg_cube_size = 3.737\nsolve_time = 0.053\nsolve_sat_time = 0.046\nsolve_unsat_time = 0.005\nblock_time = 0.034\ngeneralize_and_push_time = 0.024\nrec_block_time = 0.061\npropagate_time = 0.007\nrefinement_time = 0.017\nprove_time = 0.071\ntotal_time = nan\nsafe"}},"run_time":162,"depth":10}]},{"example":"../examples/array_copy_nondet_add.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i j) i) j)","(= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int b i) j)) i) (+ (Read-Int-Int b i) j))","(= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int a i) j)) i) (+ (Read-Int-Int a i) j))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int a i) j)) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"counterexample\n;; step 0\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= c (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j 4)\n  (= N 3)\n  (= pc 1)\n  (= Z 1)\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 4))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 0)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 4) (as @16.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 8)\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 12) (as @12.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 12) 0) 12)\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 12) 1) 3)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 4) 1) 3)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 4))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 0)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 4) (as @16.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 8)\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 12) (as @12.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 12) 0) 12)\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 12) 1) 3)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 4) 1) 3)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n)\n;; step 1\n(and\n  (= a (as @3.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= c (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j 4)\n  (= N 3)\n  (= pc 1)\n  (= Z 1)\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 4))\n  (= (Read-Int-Int (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 7) (as @17.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 7) 1) 7)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 7) (as @13.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 7) 1) 7)\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 7) 1) 7)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 4))\n  (= (Read-Int-Int (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 7) (as @17.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 7) 1) 7)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 7) (as @13.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 7) 1) 7)\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 7) 1) 7)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n)\n;; step 2\n(and\n  (= a (as @4.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= c (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= j 4)\n  (= N 3)\n  (= pc 1)\n  (= Z 1)\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 4))\n  (= (Read-Int-Int (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 4) 2) 4)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2) (- 3))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 1) (as @18.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 1) 2) 1)\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2) (- 6))\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (- 2)) (as @14.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (- 2)) 2) (- 2))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (- 2)) 1) 3)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 4) 1) 4)\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 4))\n  (= (Read-Int-Int (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 4) 2) 4)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2) (- 3))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 1) (as @18.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 1) 2) 1)\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2) (- 6))\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (- 2)) (as @14.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (- 2)) 2) (- 2))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (- 2)) 1) 3)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 4) 1) 4)\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n)\n;; step 3\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= c (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 3)\n  (= j 4)\n  (= N 3)\n  (= pc 1)\n  (= Z 1)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) (as @25.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) 3) 4)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 3) (- 4))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 0) (as @20.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 0) 3) 0)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3) 8)\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 3 12) (as @15.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 3 12) 3) 12)\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 3 12) 1) 3)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) (as @25.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) 3) 4)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 3) (- 4))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 0) (as @20.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 0) 3) 0)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3) 8)\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 3 12) (as @15.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 3 12) 3) 12)\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 3 12) 1) 3)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n)\n;; step 4\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= c (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j 4)\n  (= N 3)\n  (= pc 2)\n  (= Z 1)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 0)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 4) (as @16.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0) 0)\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 4))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 4) 1) 3)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 0)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 4) (as @16.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0) 0)\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 4))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 4) 1) 3)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n)\n;; step 5\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= b (as @6.Array-Int-Int |Array-Int-Int|))\n  (= c (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j 4)\n  (= N 3)\n  (= pc 2)\n  (= Z 1)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) (as @23.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 7) (as @17.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 7) 1) 7)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 8))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 8) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 8) 1) 8)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) (as @23.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 7) (as @17.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 7) 1) 7)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 8))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 8) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 8) 1) 8)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 3)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n)\n;; step 6\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= b (as @7.Array-Int-Int |Array-Int-Int|))\n  (= c (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= j 4)\n  (= N 3)\n  (= pc 2)\n  (= Z 1)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) (as @24.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) 2) 4)\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 2) (- 6))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (- 2)) (as @19.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (- 2)) 2) (- 2))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2) 4)\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 2 8))\n  (= (Read-Int-Int (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 2 8) 2) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 2 8) 1) 8)\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) (as @24.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) 2) 4)\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 2) (- 6))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (- 2)) (as @19.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (- 2)) 2) (- 2))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2) 4)\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 2 8))\n  (= (Read-Int-Int (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 2 8) 2) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 2 8) 1) 8)\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n)\n;; step 7\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 3)\n  (= j 4)\n  (= N 3)\n  (= pc 2)\n  (= Z 1)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) (as @25.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) 3) 4)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3) (- 9))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 (- 5)) (as @21.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 (- 5)) 3) (- 5))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3) 8)\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3 12) (as @29.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3 12) 3) 12)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3 12) 1) 8)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) (as @25.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) 3) 4)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3) (- 9))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 (- 5)) (as @21.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 (- 5)) 3) (- 5))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3) 8)\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3 12) (as @29.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3 12) 3) 12)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3 12) 1) 8)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n)\n;; step 8\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j 4)\n  (= N 3)\n  (= pc 3)\n  (= Z 1)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0) (- 10))\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (- 6)))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (- 6)) 0) (- 6))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0) 0)\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 4) (as @26.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 4) 1) 8)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0) (- 10))\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (- 6)))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (- 6)) 0) (- 6))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0) 0)\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 4) (as @26.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 4) 0) 4)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 4) 1) 8)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 5)\n)\n;; step 9\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @9.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j 4)\n  (= N 3)\n  (= pc 3)\n  (= Z 1)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) (as @23.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1 12))\n  (= (Read-Int-Int (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1 12) 1) 12)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 8) (as @27.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 8) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 8) 1) 8)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) (as @23.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1 12))\n  (= (Read-Int-Int (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1 12) 1) 12)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 8) (as @27.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 8) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 8) 1) 8)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1) 5)\n)\n;; step 10\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @10.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= j 4)\n  (= N 3)\n  (= pc 3)\n  (= Z 1)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) (as @24.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) 2) 4)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 8)\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 12))\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 12) 2) 12)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2) 4)\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 8) (as @28.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 8) 2) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 8) 1) 8)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1) 12)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) (as @24.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) 2) 4)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 8)\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 12))\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 12) 2) 12)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2) 4)\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 8) (as @28.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 8) 2) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 8) 1) 8)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1) 12)\n)\n;; step 11\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @11.Array-Int-Int |Array-Int-Int|))\n  (= i 3)\n  (= j 4)\n  (= N 3)\n  (= pc 3)\n  (= Z 1)\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) (as @25.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) 3) 4)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3) (- 9))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 3 (- 5)))\n  (= (Read-Int-Int (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 3 (- 5)) 3) 0)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3) 8)\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3 12) (as @29.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3 12) 3) 12)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 3 12) 1) 8)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 8)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 4) 1) 4)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 4)\n  (= (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 1) 4)\n)\nsearch stats:\nnum_solve_calls = 1155\nnum_solve_sat_calls = 607\nnum_solve_unsat_calls = 548\nnum_solver_reset = 0\nnum_added_cubes = 72\nnum_subsumed_cubes = 49\nnum_block = 539\nnum_refinements = 8\nnum_predicates = 21\nmax_cube_size = 6\navg_cube_size = 4.167\nsolve_time = 0.277\nsolve_sat_time = 0.261\nsolve_unsat_time = 0.016\nblock_time = 0.194\ngeneralize_and_push_time = 0.120\nrec_block_time = 0.367\npropagate_time = 0.023\nrefinement_time = 0.113\nprove_time = 0.400\ntotal_time = nan\nunsafe"}},"run_time":587,"depth":10}]},{"example":"../examples/array_tiling_poly3.vmt","result":[{"strategy":"abstract","result":{"Timeout":30000},"run_time":30005,"depth":10}]},{"example":"../examples/array_tiling_poly2.vmt","result":[{"strategy":"abstract","result":{"Timeout":30000},"run_time":30005,"depth":10}]},{"example":"../examples/array_copy_ind.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 24\nnum_solve_sat_calls = 11\nnum_solve_unsat_calls = 13\nnum_solver_reset = 0\nnum_added_cubes = 3\nnum_subsumed_cubes = 1\nnum_block = 6\nnum_refinements = 0\nnum_predicates = 7\nmax_cube_size = 3\navg_cube_size = 2.667\nsolve_time = 0.003\nsolve_sat_time = 0.001\nsolve_unsat_time = 0.001\nblock_time = 0.001\ngeneralize_and_push_time = 0.001\nrec_block_time = 0.001\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.002\ntotal_time = nan\nsafe"}},"run_time":31,"depth":10}]},{"example":"../examples/array_tripl_access_init_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= Z (+ (* 3 i) 2))) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a (* 3 i) 0) (+ (* 3 i) 1) 0) (+ (* 3 i) 2) 0) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int a (* 3 i) 0) (+ (* 3 i) 1) 0) Z)))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a (* 3 i) 0) (+ (* 3 i) 1) 0) Z 0) Z) 0)","(=> (not (= Z (+ (* 3 i) 1))) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a (* 3 i) 0) (+ (* 3 i) 1) 0) Z) (Read-Int-Int (Write-Int-Int a (* 3 i) 0) Z)))","(=> (not (= Z i_next)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a (* 3 i) 0) i_next 0) Z) (Read-Int-Int (Write-Int-Int a (* 3 i) 0) Z)))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int a (* 3 i) 0) Z 0) Z) 0)","(= (Read-Int-Int (Write-Int-Int a (* 3 i) 0) (* 3 i)) 0)","(=> (not (= Z (* 3 i))) (= (Read-Int-Int (Write-Int-Int a (* 3 i) 0) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"search stats:\nnum_solve_calls = 30\nnum_solve_sat_calls = 17\nnum_solve_unsat_calls = 13\nnum_solver_reset = 0\nnum_added_cubes = 2\nnum_subsumed_cubes = 0\nnum_block = 10\nnum_refinements = 1\nnum_predicates = 17\nmax_cube_size = 5\navg_cube_size = 3.000\nsolve_time = 0.011\nsolve_sat_time = 0.008\nsolve_unsat_time = 0.002\nblock_time = 0.005\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.010\npropagate_time = 0.001\nrefinement_time = 0.003\nprove_time = 0.014\ntotal_time = nan\nunknown"}},"run_time":94,"depth":10}]},{"example":"../examples/array_init_both_ends_simpl_const.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 4, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] } }, Forall { vars: [(Symbol(\"PH0\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] } }] }"},"run_time":38,"depth":10}]},{"example":"../examples/array_doub_access_init.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":135,"depth":10}]},{"example":"../examples/counterexamples/array_copy_bug.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 2, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0))] }] }] }"},"run_time":8,"depth":10}]},{"example":"../examples/array_init_addvar4.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i j) i) j)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i j) N) (Read-Int-Int a N)))","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) i) (+ (Read-Int-Int a i) j))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 2))\n  (= i 0)\n  (<= N Z)\n  (not (<= i Z))\n  (= j (Read-Int-Int a Z))\n)\n;; clause 1\n(or\n  (not (= pc 1))\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (= j (Read-Int-Int a Z))\n)\n;; clause 2\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 3\n(or\n  (not (= pc 1))\n  (<= Z 0)\n  (<= i Z)\n  (= j (Read-Int-Int a Z))\n)\n;; clause 4\n(or\n  (not (= j (Read-Int-Int (Write-Int-Int a i j) i)))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i j) Z))\n)\n;; clause 5\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= i N)\n)\n;; clause 6\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 7\n(or\n  (not (= i 0))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= j (Read-Int-Int a Z))\n)\n;; clause 8\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (not (<= i Z))\n  (= j (Read-Int-Int a Z))\n)\nsearch stats:\nnum_solve_calls = 641\nnum_solve_sat_calls = 331\nnum_solve_unsat_calls = 310\nnum_solver_reset = 0\nnum_added_cubes = 50\nnum_subsumed_cubes = 40\nnum_block = 299\nnum_refinements = 2\nnum_predicates = 16\nmax_cube_size = 6\navg_cube_size = 4.160\nsolve_time = 0.197\nsolve_sat_time = 0.183\nsolve_unsat_time = 0.013\nblock_time = 0.139\ngeneralize_and_push_time = 0.097\nrec_block_time = 0.169\npropagate_time = 0.040\nrefinement_time = 0.014\nprove_time = 0.215\ntotal_time = nan\nsafe"}},"run_time":366,"depth":10}]},{"example":"../examples/array_init_batches.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Constant(Numeral(1))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, Constant(Numeral(1)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Forall { vars: [(Symbol(\"PH0\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] } }] }"},"run_time":57,"depth":10}]},{"example":"../examples/array_nest_split_02.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (<= N Z)\n  (= pc 1)\n  (<= j 0)\n)\n;; clause 2\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 71\nnum_solve_sat_calls = 38\nnum_solve_unsat_calls = 33\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 3\nnum_block = 21\nnum_refinements = 1\nnum_predicates = 7\nmax_cube_size = 4\navg_cube_size = 3.333\nsolve_time = 0.006\nsolve_sat_time = 0.004\nsolve_unsat_time = 0.001\nblock_time = 0.002\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.006\npropagate_time = 0.000\nrefinement_time = 0.002\nprove_time = 0.007\ntotal_time = nan\nsafe"}},"run_time":65,"depth":10}]},{"example":"../examples/array_min.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= m (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (<= m (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 49\nnum_solve_sat_calls = 28\nnum_solve_unsat_calls = 21\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 14\nnum_refinements = 1\nnum_predicates = 7\nmax_cube_size = 4\navg_cube_size = 3.167\nsolve_time = 0.004\nsolve_sat_time = 0.003\nsolve_unsat_time = 0.001\nblock_time = 0.002\ngeneralize_and_push_time = 0.001\nrec_block_time = 0.005\npropagate_time = 0.001\nrefinement_time = 0.002\nprove_time = 0.006\ntotal_time = nan\nsafe"}},"run_time":36,"depth":10}]},{"example":"../examples/array_init_increm_two_arrs_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i x) i) x)","(= (Read-Int-Int (Write-Int-Int a i x) i) x)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int b i) 1)) Z) (Read-Int-Int b Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int b i x) N) (Read-Int-Int b N)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i x) N) (Read-Int-Int a N)))","(= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int b i) 1)) i) (+ (Read-Int-Int b i) 1))","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) (+ (Read-Int-Int a i) 1))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) N) (Read-Int-Int a N)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i x) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i x) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 1\n(or\n  (not (= i Z))\n  (let ((.def_31 (Read-Int-Int a i))) (not (= (+ .def_31 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_31 1)) i))) (- 1))))\n  (not (= (Read-Int-Int a N) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) N)))\n  (not (= pc 2))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n)\n;; clause 2\n(or\n  (not (= i N))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 3\n(or\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int b i) 1)) Z) (Read-Int-Int b Z)))\n  (let ((.def_39 (Read-Int-Int b i))) (not (= (+ .def_39 (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ .def_39 1)) i))) (- 1))))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 4\n(or\n  (not (= pc 2))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 5\n(or\n  (not (= pc 2))\n  (= i 0)\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 6\n(or\n  (not (= pc 1))\n  (let ((.def_31 (Read-Int-Int a i))) (not (= (+ .def_31 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_31 1)) i))) (- 1))))\n  (not (= (Read-Int-Int a N) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) N)))\n  (not (<= N i))\n)\n;; clause 7\n(or\n  (not (= pc 2))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (<= 3 N)\n)\n;; clause 8\n(or\n  (not (= i N))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (<= 3 N)\n)\n;; clause 9\n(or\n  (not (= pc 2))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (<= 4 N)\n)\n;; clause 10\n(or\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int b i) 1)) Z) (Read-Int-Int b Z)))\n  (let ((.def_39 (Read-Int-Int b i))) (not (= (+ .def_39 (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ .def_39 1)) i))) (- 1))))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (<= 4 N)\n)\n;; clause 11\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 12\n(or\n  (not (= pc 2))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (<= i 1)\n)\nsearch stats:\nnum_solve_calls = 696\nnum_solve_sat_calls = 360\nnum_solve_unsat_calls = 336\nnum_solver_reset = 0\nnum_added_cubes = 68\nnum_subsumed_cubes = 59\nnum_block = 346\nnum_refinements = 4\nnum_predicates = 26\nmax_cube_size = 7\navg_cube_size = 4.632\nsolve_time = 0.201\nsolve_sat_time = 0.185\nsolve_unsat_time = 0.015\nblock_time = 0.151\ngeneralize_and_push_time = 0.077\nrec_block_time = 0.193\npropagate_time = 0.050\nrefinement_time = 0.045\nprove_time = 0.252\ntotal_time = nan\nsafe"}},"run_time":384,"depth":10}]},{"example":"../examples/array_tiling_skipped.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a1 (+ (* 2 i) 1) (+ (* 2 i) 1)) (+ (* 2 i) 1)) (+ (* 2 i) 1))","(=> (not (= S (* 2 i))) (= (Read-Int-Int (Write-Int-Int a (* 2 i) (* 2 i)) S) (Read-Int-Int a S)))","(= (Read-Int-Int (Write-Int-Int a (* 2 i) (* 2 i)) (* 2 i)) (* 2 i))","(=> (not (= i_next (+ (* 2 i) 1))) (= (Read-Int-Int (Write-Int-Int a1 (+ (* 2 i) 1) (+ (* 2 i) 1)) i_next) (Read-Int-Int a1 i_next)))","(=> (not (= (Read-Int-Int a S) (* 2 i))) (= (Read-Int-Int (Write-Int-Int a (* 2 i) (* 2 i)) (Read-Int-Int a S)) (Read-Int-Int a (Read-Int-Int a S))))","(=> (not (= i_next (* 2 i))) (= (Read-Int-Int (Write-Int-Int a (* 2 i) (* 2 i)) i_next) (Read-Int-Int a i_next)))","(=> (not (= (+ (* 2 i) 1) (* 2 i))) (= (Read-Int-Int (Write-Int-Int a (* 2 i) (* 2 i)) (+ (* 2 i) 1)) (Read-Int-Int a (+ (* 2 i) 1))))","(=> (not (= S (+ (* 2 i) 1))) (= (Read-Int-Int (Write-Int-Int a1 (+ (* 2 i) 1) (+ (* 2 i) 1)) S) (Read-Int-Int a1 S)))","(=> (not (= Z (+ (* 2 i) 1))) (= (Read-Int-Int (Write-Int-Int a1 (+ (* 2 i) 1) (+ (* 2 i) 1)) Z) (Read-Int-Int a1 Z)))","(=> (not (= (+ (* 2 i_next) 1) (+ (* 2 i) 1))) (= (Read-Int-Int (Write-Int-Int a1 (+ (* 2 i) 1) (+ (* 2 i) 1)) (+ (* 2 i_next) 1)) (Read-Int-Int a1 (+ (* 2 i_next) 1))))","(=> (not (= Z (* 2 i))) (= (Read-Int-Int (Write-Int-Int a (* 2 i) (* 2 i)) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"search stats:\nnum_solve_calls = 29\nnum_solve_sat_calls = 18\nnum_solve_unsat_calls = 11\nnum_solver_reset = 0\nnum_added_cubes = 2\nnum_subsumed_cubes = 0\nnum_block = 8\nnum_refinements = 1\nnum_predicates = 25\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.031\nsolve_sat_time = 0.026\nsolve_unsat_time = 0.004\nblock_time = 0.014\ngeneralize_and_push_time = 0.008\nrec_block_time = 0.028\npropagate_time = 0.004\nrefinement_time = 0.006\nprove_time = 0.036\ntotal_time = nan\nunknown"}},"run_time":891,"depth":10}]},{"example":"../examples/array_tiling_poly6.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* (- i 1) (+ i 1))) Z) (Read-Int-Int a Z)))","(=> (not (= S i)) (= (Read-Int-Int (Write-Int-Int a i (* (- i 1) (+ i 1))) S) (Read-Int-Int a S)))","(= (Read-Int-Int (Write-Int-Int a i (* (- i 1) (+ i 1))) i) (* (- i 1) (+ i 1)))","(= (Read-Int-Int (Write-Int-Int a i (- (Read-Int-Int a i) (* i i))) i) (- (Read-Int-Int a i) (* i i)))","(=> (not (= S i)) (= (Read-Int-Int (Write-Int-Int a i (- (Read-Int-Int a i) (* i i))) S) (Read-Int-Int a S)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (- (Read-Int-Int a i) (* i i))) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= S 1))\n  (not (<= 0 Z))\n)\n;; clause 1\n(or\n  (let ((.def_40 (Read-Int-Int a i))) (not (= (+ .def_40 (+ (* (- 1) (* i i)) (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_40 (* (- 1) (* i i)))) i)))) 0)))\n  (not (= (Read-Int-Int a S) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) (* (- 1) (* i i)))) S)))\n  (not (<= S i))\n  (not (<= 0 Z))\n)\n;; clause 2\n(or\n  (not (= i 0))\n  (not (= i Z))\n  (let ((.def_40 (Read-Int-Int a i))) (not (= (+ .def_40 (+ (* (- 1) (* i i)) (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_40 (* (- 1) (* i i)))) i)))) 0)))\n  (not (= pc 2))\n  (= (Read-Int-Int (Write-Int-Int a i (* (+ i (- 1)) (+ i 1))) Z) (Read-Int-Int a Z))\n)\n;; clause 3\n(or\n  (= (Read-Int-Int a Z) (- 1))\n  (<= i Z)\n  (not (= Z 0))\n)\n;; clause 4\n(or\n  (= i 0)\n  (= (Read-Int-Int a Z) (- 1))\n  (not (= Z 0))\n)\n;; clause 5\n(or\n  (not (= S i))\n  (= (Read-Int-Int a Z) (- 1))\n  (not (= Z 0))\n)\n;; clause 6\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (- 1))\n  (<= i Z)\n)\n;; clause 7\n(or\n  (not (= i 0))\n  (not (= pc 2))\n  (not (= (Read-Int-Int a Z) (- 1)))\n  (not (<= 0 Z))\n  (= i Z)\n  (<= S Z)\n)\n;; clause 8\n(or\n  (not (= pc 1))\n  (not (= S i))\n  (not (= (Read-Int-Int a Z) (- 1)))\n  (not (<= 0 Z))\n  (<= S Z)\n  (= Z 0)\n)\n;; clause 9\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (- 1))\n  (<= S Z)\n  (<= (- 1) (+ (Read-Int-Int a Z) (* (- 1) (* Z Z))))\n)\n;; clause 10\n(or\n  (not (= pc 1))\n  (not (= (Read-Int-Int a Z) (- 1)))\n  (not (<= 0 Z))\n  (<= i Z)\n  (= Z 0)\n)\n;; clause 11\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= i Z)\n  (<= (- 1) (+ (Read-Int-Int a Z) (* (- 1) (* Z Z))))\n)\n;; clause 12\n(or\n  (not (<= S i))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (- 1))\n  (<= S Z)\n)\n;; clause 13\n(or\n  (not (= pc 2))\n  (not (= (Read-Int-Int a Z) (- 1)))\n  (= i 0)\n  (<= S Z)\n  (not (<= i Z))\n)\n;; clause 14\n(or\n  (not (<= 0 Z))\n  (<= i Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (* Z Z))) (- 1))\n)\n;; clause 15\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= S Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (* Z Z))) (- 1))\n)\n;; clause 16\n(or\n  (not (= i Z))\n  (not (= (* (+ i (- 1)) (+ i 1)) (Read-Int-Int (Write-Int-Int a i (* (+ i (- 1)) (+ i 1))) i)))\n  (let ((.def_40 (Read-Int-Int a i))) (not (= (+ .def_40 (+ (* (- 1) (* i i)) (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_40 (* (- 1) (* i i)))) i)))) 0)))\n  (not (= (Read-Int-Int a S) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) (* (- 1) (* i i)))) S)))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= (Read-Int-Int (Write-Int-Int a i (* (+ i (- 1)) (+ i 1))) Z) (Read-Int-Int a Z))\n)\n;; clause 17\n(or\n  (not (= i 0))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= S Z)\n  (<= (- 1) (+ (Read-Int-Int a Z) (* (- 1) (* Z Z))))\n)\n;; clause 18\n(or\n  (not (= pc 1))\n  (not (= S i))\n  (not (<= 0 Z))\n  (<= S Z)\n  (<= (- 1) (+ (Read-Int-Int a Z) (* (- 1) (* Z Z))))\n)\n;; clause 19\n(or\n  (not (= S i))\n  (not (<= 0 Z))\n  (<= S Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (* Z Z))) (- 1))\n)\nsearch stats:\nnum_solve_calls = 1152\nnum_solve_sat_calls = 518\nnum_solve_unsat_calls = 634\nnum_solver_reset = 0\nnum_added_cubes = 94\nnum_subsumed_cubes = 80\nnum_block = 509\nnum_refinements = 4\nnum_predicates = 22\nmax_cube_size = 8\navg_cube_size = 4.191\nsolve_time = 1.540\nsolve_sat_time = 1.490\nsolve_unsat_time = 0.049\nblock_time = 1.047\ngeneralize_and_push_time = 0.805\nrec_block_time = 1.376\npropagate_time = 0.169\nrefinement_time = 0.033\nprove_time = 1.587\ntotal_time = nan\nsafe"}},"run_time":1724,"depth":10}]},{"example":"../examples/array2dim_init.vmt","result":[{"strategy":"abstract","result":{"Panic":"not yet implemented: Add Z3 function: Read-Int-Int"},"run_time":2,"depth":10}]},{"example":"../examples/array_two_counters_init_const.vmt","result":[{"strategy":"abstract","result":{"Timeout":30000},"run_time":30005,"depth":10}]},{"example":"../examples/array_init_ite_jump_two_const.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(10))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(10))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(10))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(10))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }] }"},"run_time":37,"depth":10}]},{"example":"../examples/array_init_upto_nondet.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= n k))\n)\n;; clause 1\n(or\n  (not (<= n i))\n  (not (<= 0 Z))\n  (= Z (Read-Int-Int a Z))\n  (<= k Z)\n)\n;; clause 2\n(or\n  (not (<= 0 Z))\n  (= Z (Read-Int-Int a Z))\n  (<= k Z)\n  (<= i Z)\n)\n;; clause 3\n(or\n  (not (<= 0 Z))\n  (= Z (Read-Int-Int a Z))\n  (<= k Z)\n  (<= (+ i (* (- 1) n)) (- 2))\n)\nsearch stats:\nnum_solve_calls = 97\nnum_solve_sat_calls = 49\nnum_solve_unsat_calls = 48\nnum_solver_reset = 0\nnum_added_cubes = 11\nnum_subsumed_cubes = 8\nnum_block = 36\nnum_refinements = 2\nnum_predicates = 13\nmax_cube_size = 4\navg_cube_size = 3.091\nsolve_time = 0.010\nsolve_sat_time = 0.008\nsolve_unsat_time = 0.002\nblock_time = 0.005\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.012\npropagate_time = 0.001\nrefinement_time = 0.005\nprove_time = 0.015\ntotal_time = nan\nsafe"}},"run_time":52,"depth":10}]},{"example":"../examples/array_init_addvar3.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) i) (+ (Read-Int-Int a i) j))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i i) i) i)"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 1\n(or\n  (not (<= N i))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 2\n(or\n  (not (= i Z))\n  (not (= i (Read-Int-Int (Write-Int-Int a i i) i)))\n  (not (= pc 2))\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z))\n  (<= i 1)\n)\n;; clause 3\n(or\n  (not (= i 0))\n  (not (= pc 2))\n  (<= N Z)\n  (<= Z 1)\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 4\n(or\n  (not (= pc 1))\n  (<= i Z)\n  (<= Z 1)\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 5\n(or\n  (not (= pc 1))\n  (not (<= N i))\n  (<= N Z)\n  (<= Z 1)\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 6\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 7\n(or\n  (not (= pc 2))\n  (<= N Z)\n  (<= i 1)\n  (not (<= i Z))\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 8\n(or\n  (not (= pc 2))\n  (<= N Z)\n  (not (<= i 1))\n  (<= Z 1)\n  (= Z (Read-Int-Int a Z))\n)\nsearch stats:\nnum_solve_calls = 905\nnum_solve_sat_calls = 461\nnum_solve_unsat_calls = 444\nnum_solver_reset = 0\nnum_added_cubes = 68\nnum_subsumed_cubes = 58\nnum_block = 431\nnum_refinements = 5\nnum_predicates = 17\nmax_cube_size = 6\navg_cube_size = 4.191\nsolve_time = 0.135\nsolve_sat_time = 0.121\nsolve_unsat_time = 0.013\nblock_time = 0.101\ngeneralize_and_push_time = 0.060\nrec_block_time = 0.145\npropagate_time = 0.030\nrefinement_time = 0.039\nprove_time = 0.181\ntotal_time = nan\nsafe"}},"run_time":294,"depth":10}]},{"example":"../examples/array_nest_split_05.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (<= N Z)\n  (= pc 1)\n  (<= j 0)\n)\n;; clause 2\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 71\nnum_solve_sat_calls = 38\nnum_solve_unsat_calls = 33\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 3\nnum_block = 21\nnum_refinements = 1\nnum_predicates = 9\nmax_cube_size = 4\navg_cube_size = 3.333\nsolve_time = 0.006\nsolve_sat_time = 0.004\nsolve_unsat_time = 0.001\nblock_time = 0.002\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.006\npropagate_time = 0.000\nrefinement_time = 0.002\nprove_time = 0.008\ntotal_time = nan\nsafe"}},"run_time":71,"depth":10}]},{"example":"../examples/array_two_counters_min_max.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N 0))\n)\n;; clause 1\n(or\n  (= (+ j (* (- 1) N)) (- 1))\n  (<= (+ j (* (- 1) N)) (- 2))\n)\n;; clause 2\n(or\n  (= i 0)\n  (<= (+ j (* (- 1) N)) (- 2))\n)\n;; clause 3\n(or\n  (not (= j 0))\n  (not (<= i 1))\n  (<= (Read-Int-Int a j) m)\n  (not (<= 1 i))\n)\n;; clause 4\n(or\n  (<= (+ i (+ j (* (- 1) N))) (- 1))\n)\n;; clause 5\n(or\n  (= i 0)\n  (<= 1 i)\n)\n;; clause 6\n(or\n  (not (= i 0))\n  (= (+ j (* (- 1) N)) (- 1))\n)\n;; clause 7\n(or\n  (<= n m)\n  (<= 0 j)\n)\n;; clause 8\n(or\n  (not (<= N i))\n  (<= n m)\n)\n;; clause 9\n(or\n  (= i 0)\n  (<= (Read-Int-Int a 0) m)\n)\n;; clause 10\n(or\n  (= i 0)\n  (not (= j 0))\n  (<= (Read-Int-Int a j) m)\n)\nsearch stats:\nnum_solve_calls = 293\nnum_solve_sat_calls = 153\nnum_solve_unsat_calls = 140\nnum_solver_reset = 0\nnum_added_cubes = 40\nnum_subsumed_cubes = 33\nnum_block = 106\nnum_refinements = 4\nnum_predicates = 13\nmax_cube_size = 4\navg_cube_size = 2.075\nsolve_time = 0.025\nsolve_sat_time = 0.021\nsolve_unsat_time = 0.004\nblock_time = 0.016\ngeneralize_and_push_time = 0.006\nrec_block_time = 0.032\npropagate_time = 0.005\nrefinement_time = 0.013\nprove_time = 0.039\ntotal_time = nan\nsafe"}},"run_time":80,"depth":10}]},{"example":"../examples/array_init_both_ends_multiple.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b (- N (+ i 1)) (+ i 1)) (- N (+ i 1))) (+ i 1))","(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(=> (not (= Z (- N (+ i 1)))) (= (Read-Int-Int (Write-Int-Int b (- N (+ i 1)) (+ i 1)) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= i 0))\n  (not (= (+ i (* (- 1) (Read-Int-Int (Write-Int-Int b (+ (+ (* (- 1) i) N) (- 1)) (+ i 1)) (+ (+ (* (- 1) i) N) (- 1))))) (- 1)))\n  (not (= (+ i (+ (* (- 1) N) Z)) (- 1)))\n  (not (= (Read-Int-Int (Write-Int-Int b (+ (+ (* (- 1) i) N) (- 1)) (+ i 1)) Z) (Read-Int-Int b Z)))\n  (not (= i Z))\n  (not (= pc 2))\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 1\n(or\n  (not (= i 0))\n  (not (= i (Read-Int-Int (Write-Int-Int a i i) i)))\n  (not (= (+ i (+ (* (- 1) N) Z)) (- 1)))\n  (not (= i Z))\n  (not (= pc 2))\n  (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z))\n)\n;; clause 2\n(or\n  (not (= i 0))\n  (not (= i (Read-Int-Int (Write-Int-Int a i i) i)))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z))\n)\n;; clause 3\n(or\n  (= i 0)\n  (= (Read-Int-Int a Z) 0)\n  (not (= Z 0))\n)\n;; clause 4\n(or\n  (= i Z)\n  (= (Read-Int-Int a Z) 0)\n  (not (= Z 0))\n)\n;; clause 5\n(or\n  (not (= pc 2))\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ N (* (- 1) Z)) 1)\n  (<= i 1)\n  (<= 3 (+ N (* (- 1) Z)))\n)\n;; clause 6\n(or\n  (not (= pc 2))\n  (= i 0)\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= N Z)\n  (not (<= (+ N (* (- 1) Z)) 1))\n)\n;; clause 7\n(or\n  (not (= i 0))\n  (not (= (+ i (* (- 1) (Read-Int-Int (Write-Int-Int b (+ (+ (* (- 1) i) N) (- 1)) (+ i 1)) (+ (+ (* (- 1) i) N) (- 1))))) (- 1)))\n  (not (= (+ i (+ (* (- 1) N) Z)) (- 1)))\n  (not (= (Read-Int-Int (Write-Int-Int b (+ (+ (* (- 1) i) N) (- 1)) (+ i 1)) Z) (Read-Int-Int b Z)))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 8\n(or\n  (not (<= 0 Z))\n  (<= (+ N (* (- 1) Z)) 1)\n  (= Z (Read-Int-Int a Z))\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 9\n(or\n  (not (= pc 2))\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= N Z)\n  (<= i 1)\n  (<= 3 (+ N (* (- 1) Z)))\n)\n;; clause 10\n(or\n  (not (= i 0))\n  (not (= (+ i (+ (* (- 1) N) Z)) (- 1)))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 11\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n  (= (Read-Int-Int a Z) 0)\n  (<= (+ N (* (- 1) Z)) 1)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 12\n(or\n  (not (= pc 2))\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ N (* (- 1) Z)) 1)\n  (not (= Z (Read-Int-Int a Z)))\n  (<= (+ i (+ (* (- 1) N) Z)) (- 1))\n)\n;; clause 13\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= N Z)\n)\n;; clause 14\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= N Z)\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 15\n(or\n  (not (= (+ i (* (- 1) (Read-Int-Int (Write-Int-Int b (+ (+ (* (- 1) i) N) (- 1)) (+ i 1)) (+ (+ (* (- 1) i) N) (- 1))))) (- 1)))\n  (not (= (+ i (+ (* (- 1) N) Z)) (- 1)))\n  (not (= (Read-Int-Int (Write-Int-Int b (+ (+ (* (- 1) i) N) (- 1)) (+ i 1)) Z) (Read-Int-Int b Z)))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= N Z)\n)\n;; clause 16\n(or\n  (not (= (+ i (+ (* (- 1) N) Z)) (- 1)))\n  (not (= i Z))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= i 0)\n  (not (= (Read-Int-Int a Z) 0))\n)\n;; clause 17\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 0)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 18\n(or\n  (not (<= 0 Z))\n  (= Z (Read-Int-Int a Z))\n  (<= (+ i (* (- 1) Z)) 1)\n)\n;; clause 19\n(or\n  (not (<= 0 Z))\n  (= Z (Read-Int-Int a Z))\n  (<= i Z)\n)\n;; clause 20\n(or\n  (not (= i Z))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= i 0)\n  (<= N Z)\n  (not (= (Read-Int-Int a Z) 0))\n)\n;; clause 21\n(or\n  (not (= (+ i (* (- 1) (Read-Int-Int (Write-Int-Int b (+ (+ (* (- 1) i) N) (- 1)) (+ i 1)) (+ (+ (* (- 1) i) N) (- 1))))) (- 1)))\n  (not (= (+ i (+ (* (- 1) N) Z)) (- 1)))\n  (not (= (Read-Int-Int (Write-Int-Int b (+ (+ (* (- 1) i) N) (- 1)) (+ i 1)) Z) (Read-Int-Int b Z)))\n  (not (= i Z))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= (+ N (+ (* (- 1) (Read-Int-Int b Z)) (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 22\n(or\n  (not (= i (Read-Int-Int (Write-Int-Int a i i) i)))\n  (not (= i Z))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z))\n)\n;; clause 23\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= N Z)\n  (not (= (Read-Int-Int a Z) 0))\n  (= Z 0)\n)\n;; clause 24\n(or\n  (not (= i 0))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= i Z)\n  (<= N Z)\n  (not (= (Read-Int-Int a Z) 0))\n)\n;; clause 25\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n  (not (= (Read-Int-Int a Z) 0))\n  (= Z 0)\n)\n;; clause 26\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= (+ N (* (- 1) Z)) 1)\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 27\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 28\n(or\n  (not (<= 0 Z))\n  (= i Z)\n  (<= N Z)\n  (not (= (Read-Int-Int a Z) 0))\n  (= Z 0)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 29\n(or\n  (not (<= 0 Z))\n  (= i Z)\n  (<= N Z)\n  (= Z (Read-Int-Int a Z))\n  (<= (+ i (* (- 1) N)) (- 2))\n)\nsearch stats:\nnum_solve_calls = 2387\nnum_solve_sat_calls = 1002\nnum_solve_unsat_calls = 1385\nnum_solver_reset = 0\nnum_added_cubes = 266\nnum_subsumed_cubes = 223\nnum_block = 1130\nnum_refinements = 11\nnum_predicates = 25\nmax_cube_size = 9\navg_cube_size = 5.195\nsolve_time = 0.513\nsolve_sat_time = 0.444\nsolve_unsat_time = 0.069\nblock_time = 0.400\ngeneralize_and_push_time = 0.256\nrec_block_time = 0.532\npropagate_time = 0.110\nrefinement_time = 0.117\nprove_time = 0.654\ntotal_time = nan\nsafe"}},"run_time":783,"depth":10}]},{"example":"../examples/array_init_monot_ind.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 1, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0)), Constant(Numeral(0))] }, Constant(Numeral(1)), Constant(Numeral(1))] }, Constant(Numeral(1))] }, Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(0)), Constant(Numeral(1))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0)), Constant(Numeral(0))] }, Constant(Numeral(1)), Constant(Numeral(1))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0)), Constant(Numeral(0))] }, Constant(Numeral(0))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0)), Constant(Numeral(0))] }, Constant(Numeral(0))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(1)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(0)), Constant(Numeral(0))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0)), Constant(Numeral(0))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0))] }] }] }] }"},"run_time":18,"depth":10}]},{"example":"../examples/array_tiling_poly5.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (* (+ i 1) (- i 1))) i) (* (+ i 1) (- i 1)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* (+ i 1) (- i 1))) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= S i))\n  (not (<= (* Z Z) (Read-Int-Int a Z)))\n  (not (<= 0 Z))\n  (<= S Z)\n)\n;; clause 1\n(or\n  (not (<= (* Z Z) (Read-Int-Int a Z)))\n  (not (<= 0 Z))\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 51\nnum_solve_sat_calls = 28\nnum_solve_unsat_calls = 23\nnum_solver_reset = 0\nnum_added_cubes = 4\nnum_subsumed_cubes = 2\nnum_block = 16\nnum_refinements = 1\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.500\nsolve_time = 0.058\nsolve_sat_time = 0.056\nsolve_unsat_time = 0.001\nblock_time = 0.024\ngeneralize_and_push_time = 0.019\nrec_block_time = 0.046\npropagate_time = 0.005\nrefinement_time = 0.002\nprove_time = 0.060\ntotal_time = nan\nsafe"}},"run_time":97,"depth":10}]},{"example":"../examples/array_init_increm_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i 0) i) 0)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 0) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) (+ (Read-Int-Int a i) 1))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= 1 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (= (Read-Int-Int (Write-Int-Int a i 0) i) 0))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= 1 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int a i 0) Z) (Read-Int-Int a Z))\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (<= 1 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 0)\n)\n;; clause 3\n(or\n  (not (= pc 2))\n  (<= 1 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 4\n(or\n  (<= 1 (Read-Int-Int a Z))\n  (<= Z 0)\n  (= (Read-Int-Int a Z) 0)\n  (<= i Z)\n)\n;; clause 5\n(or\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) Z)))\n  (let ((.def_30 (Read-Int-Int a i))) (not (= (+ .def_30 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_30 1)) i))) (- 1))))\n  (not (= pc 2))\n  (<= 1 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 6\n(or\n  (not (= (Read-Int-Int (Write-Int-Int a i 0) i) 0))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= 1 (Read-Int-Int a Z))\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int a i 0) Z) (Read-Int-Int a Z))\n  (<= i 1)\n)\n;; clause 7\n(or\n  (not (<= N i))\n  (<= 1 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 0)\n)\n;; clause 8\n(or\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) Z)))\n  (let ((.def_30 (Read-Int-Int a i))) (not (= (+ .def_30 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_30 1)) i))) (- 1))))\n  (<= 1 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 0)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\nsearch stats:\nnum_solve_calls = 1095\nnum_solve_sat_calls = 554\nnum_solve_unsat_calls = 541\nnum_solver_reset = 0\nnum_added_cubes = 77\nnum_subsumed_cubes = 69\nnum_block = 525\nnum_refinements = 5\nnum_predicates = 19\nmax_cube_size = 8\navg_cube_size = 5.312\nsolve_time = 0.128\nsolve_sat_time = 0.114\nsolve_unsat_time = 0.014\nblock_time = 0.100\ngeneralize_and_push_time = 0.067\nrec_block_time = 0.143\npropagate_time = 0.021\nrefinement_time = 0.033\nprove_time = 0.169\ntotal_time = nan\nsafe"}},"run_time":252,"depth":10}]},{"example":"../examples/array_tiling_poly4.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 5, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }, Constant(Numeral(2))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }, Constant(Numeral(2))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }, Constant(Numeral(2))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }, Constant(Numeral(2))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"S\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"S\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"S\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"S\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }, Constant(Numeral(2))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"S\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"S\") } })] }] }] }, Forall { vars: [(Symbol(\"PH1\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH3\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }, Constant(Numeral(2))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } })] }] }] }] } }] }"},"run_time":108,"depth":10}]},{"example":"../examples/array_standard_copy4.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int d i (Read-Int-Int c i)) i) (Read-Int-Int c i))","(= (Read-Int-Int (Write-Int-Int c i (Read-Int-Int b i)) i) (Read-Int-Int b i))","(= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(= (Read-Int-Int (Write-Int-Int a i x) i) x)","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int c i (Read-Int-Int b i)) N) (Read-Int-Int c N)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i x) N) (Read-Int-Int a N)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) N) (Read-Int-Int b N)))"],"const_instances":[],"ic3ia_out":"counterexample\n;; step 0\n(and\n  (= a (as @3.Array-Int-Int |Array-Int-Int|))\n  (= b (as @2.Array-Int-Int |Array-Int-Int|))\n  (= c (as @0.Array-Int-Int |Array-Int-Int|))\n  (= d (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= N 2)\n  (= x 5)\n  (= pc 1)\n  (= Z 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0 5))\n  (= (Read-Int-Int (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0 5) 0) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0 5) 2) 5)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0 5))\n  (= (Read-Int-Int (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0 5) 0) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0 5) 2) 5)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 1\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= b (as @2.Array-Int-Int |Array-Int-Int|))\n  (= c (as @0.Array-Int-Int |Array-Int-Int|))\n  (= d (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= N 2)\n  (= x 5)\n  (= pc 1)\n  (= Z 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 12)\n  (= (as @31.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)) 1) 12)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 13)\n  (= (as @29.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1)) 1) 13)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 14)\n  (= (as @33.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1)) 1) 14)\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 5))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 5) 1) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 5) 2) 5)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 12)\n  (= (as @31.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)) 1) 12)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1) 13)\n  (= (as @29.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1)) 1) 13)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1) 14)\n  (= (as @33.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1)) 1) 14)\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 5))\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 5) 1) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1 5) 2) 5)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 2\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= b (as @2.Array-Int-Int |Array-Int-Int|))\n  (= c (as @0.Array-Int-Int |Array-Int-Int|))\n  (= d (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= N 2)\n  (= x 5)\n  (= pc 1)\n  (= Z 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @18.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @17.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @19.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @18.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @17.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @19.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 3\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= b (as @2.Array-Int-Int |Array-Int-Int|))\n  (= c (as @0.Array-Int-Int |Array-Int-Int|))\n  (= d (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= N 2)\n  (= x 5)\n  (= pc 2)\n  (= Z 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) (as @20.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 0) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) (as @20.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 0) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 4\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= b (as @7.Array-Int-Int |Array-Int-Int|))\n  (= c (as @0.Array-Int-Int |Array-Int-Int|))\n  (= d (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= N 2)\n  (= x 5)\n  (= pc 2)\n  (= Z 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 12)\n  (= (as @31.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)) 1) 12)\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1) 15)\n  (= (as @30.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1)) 1) 15)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) (as @21.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 1) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 12)\n  (= (as @31.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)) 1) 12)\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1) 15)\n  (= (as @30.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1)) 1) 15)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) (as @21.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 1) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 5\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @0.Array-Int-Int |Array-Int-Int|))\n  (= d (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= N 2)\n  (= x 5)\n  (= pc 2)\n  (= Z 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @18.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @17.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @25.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @18.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @17.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @25.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 6\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @0.Array-Int-Int |Array-Int-Int|))\n  (= d (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= N 2)\n  (= x 5)\n  (= pc 3)\n  (= Z 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @23.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) (as @20.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 0) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @23.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) (as @20.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 0) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 7\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @9.Array-Int-Int |Array-Int-Int|))\n  (= d (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= N 2)\n  (= x 5)\n  (= pc 3)\n  (= Z 0)\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1) 16)\n  (= (as @32.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1)) 1) 16)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @24.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) (as @21.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 1) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1) 16)\n  (= (as @32.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1)) 1) 16)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @24.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) (as @21.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 1) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 8\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @10.Array-Int-Int |Array-Int-Int|))\n  (= d (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= N 2)\n  (= x 5)\n  (= pc 3)\n  (= Z 0)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @18.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @28.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @25.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @18.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @28.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @25.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 9\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @10.Array-Int-Int |Array-Int-Int|))\n  (= d (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= N 2)\n  (= x 5)\n  (= pc 4)\n  (= Z 0)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @26.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @23.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) (as @20.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 0) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @26.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (as @23.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 0) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) (as @20.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 0) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 10\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @10.Array-Int-Int |Array-Int-Int|))\n  (= d (as @11.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= N 2)\n  (= x 5)\n  (= pc 4)\n  (= Z 0)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @12.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @27.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @24.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) (as @21.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 1) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @12.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @27.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1) 5)\n  (= (as @24.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 1) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) (as @21.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 1) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 1)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 0) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\n;; step 11\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= b (as @8.Array-Int-Int |Array-Int-Int|))\n  (= c (as @10.Array-Int-Int |Array-Int-Int|))\n  (= d (as @12.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= N 2)\n  (= x 5)\n  (= pc 4)\n  (= Z 0)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @28.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (as @25.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) (as @22.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2 5) 2) 5)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 2)) 2) 5)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 2) 5)\n  (= (Read-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 0) 17)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0) 5)\n)\nsearch stats:\nnum_solve_calls = 798\nnum_solve_sat_calls = 417\nnum_solve_unsat_calls = 381\nnum_solver_reset = 0\nnum_added_cubes = 55\nnum_subsumed_cubes = 28\nnum_block = 378\nnum_refinements = 5\nnum_predicates = 23\nmax_cube_size = 7\navg_cube_size = 4.236\nsolve_time = 0.139\nsolve_sat_time = 0.126\nsolve_unsat_time = 0.012\nblock_time = 0.104\ngeneralize_and_push_time = 0.067\nrec_block_time = 0.193\npropagate_time = 0.016\nrefinement_time = 0.069\nprove_time = 0.215\ntotal_time = nan\nunsafe"}},"run_time":392,"depth":10}]},{"example":"../examples/array_init_symmetr_swap.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(= (Read-Int-Int (Write-Int-Int a i x) i) x)","(= (Read-Int-Int (Write-Int-Int b i (* x (- 1))) i) (* x (- 1)))","(= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int b i) (- 1))) i) (* (Read-Int-Int b i) (- 1)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i x) Z) (Read-Int-Int a Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i x) N) (Read-Int-Int a N)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (* x (- 1))) Z) (Read-Int-Int b Z)))","(=> (not (= i_next i)) (= (Read-Int-Int (Write-Int-Int a i x) i_next) (Read-Int-Int a i_next)))","(=> (not (= i i)) (= (Read-Int-Int (Write-Int-Int b i (* x (- 1))) i) (Read-Int-Int b i)))","(=> (not (= i i_next)) (= (Read-Int-Int (Write-Int-Int a_next i_next (* (Read-Int-Int b_next i_next) (- 1))) i) (Read-Int-Int a_next i)))","(=> (not (= i i_next)) (= (Read-Int-Int (Write-Int-Int b_next i_next (Read-Int-Int a_next i_next)) i) (Read-Int-Int b_next i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int b i) (- 1))) Z) (Read-Int-Int a Z)))","(=> (not (= i_next i)) (= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int b i) (- 1))) i_next) (Read-Int-Int a i_next)))","(=> (not (= i_next i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) i_next) (Read-Int-Int b i_next)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (= i i_next)\n)\n;; clause 2\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 3\n(or\n  (not (= pc 2))\n  (= i 0)\n  (<= Z 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 86\nnum_solve_sat_calls = 39\nnum_solve_unsat_calls = 47\nnum_solver_reset = 0\nnum_added_cubes = 8\nnum_subsumed_cubes = 3\nnum_block = 34\nnum_refinements = 0\nnum_predicates = 24\nmax_cube_size = 4\navg_cube_size = 3.625\nsolve_time = 0.036\nsolve_sat_time = 0.031\nsolve_unsat_time = 0.003\nblock_time = 0.022\ngeneralize_and_push_time = 0.017\nrec_block_time = 0.024\npropagate_time = 0.005\nrefinement_time = 0.000\nprove_time = 0.035\ntotal_time = nan\nsafe"}},"run_time":220,"depth":10}]},{"example":"../examples/array_init_double_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(= (Read-Int-Int (Write-Int-Int b i (- N i)) i) (- N i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (- N i)) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (= (+ N (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (= (+ N (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 71\nnum_solve_sat_calls = 42\nnum_solve_unsat_calls = 29\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 26\nnum_refinements = 2\nnum_predicates = 13\nmax_cube_size = 4\navg_cube_size = 2.667\nsolve_time = 0.012\nsolve_sat_time = 0.010\nsolve_unsat_time = 0.002\nblock_time = 0.006\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.014\npropagate_time = 0.002\nrefinement_time = 0.006\nprove_time = 0.018\ntotal_time = nan\nsafe"}},"run_time":65,"depth":10}]},{"example":"../examples/array_init_symmetr_swap_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int b i) (- 1))) i) (* (Read-Int-Int b i) (- 1)))","(= (Read-Int-Int (Write-Int-Int a i x) i) x)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i x) Z) (Read-Int-Int a Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) N) (Read-Int-Int b N)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int b i) (- 1))) N) (Read-Int-Int a N)))","(= (Read-Int-Int (Write-Int-Int b i (* x (- 1))) i) (* x (- 1)))","(=> (not (= i_next i)) (= (Read-Int-Int (Write-Int-Int a i x) i_next) (Read-Int-Int a i_next)))","(=> (not (= i i)) (= (Read-Int-Int (Write-Int-Int b i (* x (- 1))) i) (Read-Int-Int b i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int b i) (- 1))) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (* x (- 1))) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (= i i_next)\n)\n;; clause 2\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 3\n(or\n  (not (= pc 2))\n  (= i 0)\n)\nsearch stats:\nnum_solve_calls = 109\nnum_solve_sat_calls = 55\nnum_solve_unsat_calls = 54\nnum_solver_reset = 0\nnum_added_cubes = 11\nnum_subsumed_cubes = 5\nnum_block = 45\nnum_refinements = 0\nnum_predicates = 22\nmax_cube_size = 4\navg_cube_size = 2.364\nsolve_time = 0.025\nsolve_sat_time = 0.021\nsolve_unsat_time = 0.003\nblock_time = 0.014\ngeneralize_and_push_time = 0.007\nrec_block_time = 0.013\npropagate_time = 0.006\nrefinement_time = 0.000\nprove_time = 0.025\ntotal_time = nan\nsafe"}},"run_time":171,"depth":10}]},{"example":"../examples/array_init_addvar2.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (- (Read-Int-Int a i) i)) i) (- (Read-Int-Int a i) i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i j) i) j)","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i j) N) (Read-Int-Int a N)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (- (Read-Int-Int a i) i)) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 1))\n  (not (= i N))\n  (<= N Z)\n  (= j (Read-Int-Int a Z))\n  (<= Z 1)\n)\n;; clause 1\n(or\n  (not (= pc 1))\n  (let ((.def_20 (Read-Int-Int a i))) (not (= (+ i (+ (* (- 1) .def_20) (Read-Int-Int (Write-Int-Int a i (+ (* (- 1) i) .def_20)) i))) 0)))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (* (- 1) i) (Read-Int-Int a i))) Z)))\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (= j (Read-Int-Int a Z))\n  (<= Z 1)\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (<= N Z)\n  (<= i 1)\n  (= j (Read-Int-Int a Z))\n  (not (<= i Z))\n)\n;; clause 3\n(or\n  (not (= i 0))\n  (not (= pc 2))\n  (<= N Z)\n  (= j (Read-Int-Int a Z))\n  (<= Z 1)\n)\n;; clause 4\n(or\n  (not (= pc 2))\n  (<= N Z)\n  (not (= j (Read-Int-Int a Z)))\n  (<= Z 1)\n  (<= Z (Read-Int-Int a Z))\n)\n;; clause 5\n(or\n  (not (= i Z))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= i (Read-Int-Int a i))\n)\n;; clause 6\n(or\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 7\n(or\n  (= i 0)\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (not (= j (Read-Int-Int a Z)))\n)\n;; clause 8\n(or\n  (let ((.def_20 (Read-Int-Int a i))) (not (= (+ i (+ (* (- 1) .def_20) (Read-Int-Int (Write-Int-Int a i (+ (* (- 1) i) .def_20)) i))) 0)))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (* (- 1) i) (Read-Int-Int a i))) Z)))\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 9\n(or\n  (not (= i N))\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 10\n(or\n  (not (= pc 1))\n  (= j (Read-Int-Int a Z))\n  (<= Z 1)\n  (<= i Z)\n)\n;; clause 11\n(or\n  (not (= pc 2))\n  (<= N Z)\n  (not (<= i 1))\n  (= j (Read-Int-Int a Z))\n  (<= Z 1)\n)\n;; clause 12\n(or\n  (not (= pc 2))\n  (<= N Z)\n  (= j (Read-Int-Int a Z))\n  (<= Z 1)\n  (not (<= i Z))\n)\n;; clause 13\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= i N)\n)\n;; clause 14\n(or\n  (not (= pc 2))\n  (<= N Z)\n  (not (= j (Read-Int-Int a Z)))\n  (not (<= i Z))\n  (<= Z (Read-Int-Int a Z))\n)\n;; clause 15\n(or\n  (not (= pc 1))\n  (<= Z 0)\n  (<= i 1)\n  (<= 2 (Read-Int-Int a Z))\n  (not (<= Z 1))\n)\n;; clause 16\n(or\n  (not (= pc 1))\n  (<= Z 0)\n  (<= 2 (Read-Int-Int a Z))\n  (<= i Z)\n)\n;; clause 17\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (not (<= i 1))\n  (<= 2 (Read-Int-Int a Z))\n)\n;; clause 18\n(or\n  (not (= pc 2))\n  (<= N Z)\n  (<= 2 (Read-Int-Int a Z))\n  (<= Z 1)\n  (not (<= i Z))\n)\n;; clause 19\n(or\n  (not (= i 0))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= 2 (Read-Int-Int a Z))\n)\n;; clause 20\n(or\n  (not (= i Z))\n  (not (= pc 2))\n  (<= N Z)\n  (<= i 1)\n  (<= 2 (Read-Int-Int a Z))\n)\n;; clause 21\n(or\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i 1)\n  (not (<= Z 1))\n)\n;; clause 22\n(or\n  (not (= i Z))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= 2 (Read-Int-Int a Z))\n)\n;; clause 23\n(or\n  (not (= i 0))\n  (not (= pc 2))\n  (<= Z 0)\n  (not (<= 3 N))\n  (<= 2 (Read-Int-Int a Z))\n  (not (<= Z 1))\n)\n;; clause 24\n(or\n  (not (= pc 1))\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (<= 2 (Read-Int-Int a Z))\n)\n;; clause 25\n(or\n  (not (= pc 1))\n  (let ((.def_20 (Read-Int-Int a i))) (not (= (+ i (+ (* (- 1) .def_20) (Read-Int-Int (Write-Int-Int a i (+ (* (- 1) i) .def_20)) i))) 0)))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (* (- 1) i) (Read-Int-Int a i))) Z)))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (<= 2 (Read-Int-Int a Z))\n)\n;; clause 26\n(or\n  (not (= pc 2))\n  (<= N Z)\n  (not (<= i 1))\n  (= j (Read-Int-Int a Z))\n  (<= Z 1)\n  (<= 2 (+ N (* (- 1) Z)))\n)\n;; clause 27\n(or\n  (not (= pc 1))\n  (not (= i N))\n  (= i 0)\n  (<= N Z)\n  (= j (Read-Int-Int a Z))\n  (<= 2 (+ N (* (- 1) Z)))\n)\n;; clause 28\n(or\n  (not (= i 0))\n  (not (= pc 2))\n  (<= N Z)\n  (= j (Read-Int-Int a Z))\n  (<= Z 1)\n  (<= 2 (+ N (* (- 1) Z)))\n)\n;; clause 29\n(or\n  (not (= i Z))\n  (not (= j (Read-Int-Int (Write-Int-Int a i j) i)))\n  (not (= pc 2))\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z))\n  (<= i 1)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 30\n(or\n  (not (= pc 2))\n  (<= N Z)\n  (= j (Read-Int-Int a Z))\n  (<= Z 1)\n  (not (<= i Z))\n  (<= 2 (+ N (* (- 1) Z)))\n)\n;; clause 31\n(or\n  (let ((.def_20 (Read-Int-Int a i))) (not (= (+ i (+ (* (- 1) .def_20) (Read-Int-Int (Write-Int-Int a i (+ (* (- 1) i) .def_20)) i))) 0)))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (* (- 1) i) (Read-Int-Int a i))) Z)))\n  (not (= pc 2))\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 3))\n  (= j (Read-Int-Int a Z))\n  (<= Z 1)\n  (not (<= i Z))\n)\n;; clause 32\n(or\n  (not (= pc 2))\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 3370\nnum_solve_sat_calls = 1525\nnum_solve_unsat_calls = 1845\nnum_solver_reset = 0\nnum_added_cubes = 327\nnum_subsumed_cubes = 325\nnum_block = 1654\nnum_refinements = 10\nnum_predicates = 26\nmax_cube_size = 8\navg_cube_size = 5.128\nsolve_time = 0.718\nsolve_sat_time = 0.637\nsolve_unsat_time = 0.079\nblock_time = 0.569\ngeneralize_and_push_time = 0.342\nrec_block_time = 0.666\npropagate_time = 0.178\nrefinement_time = 0.108\nprove_time = 0.858\ntotal_time = nan\nsafe"}},"run_time":981,"depth":10}]},{"example":"../examples/array_nest_split_04.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (<= N Z)\n  (= pc 1)\n  (<= j 0)\n)\n;; clause 2\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 71\nnum_solve_sat_calls = 38\nnum_solve_unsat_calls = 33\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 3\nnum_block = 21\nnum_refinements = 1\nnum_predicates = 7\nmax_cube_size = 4\navg_cube_size = 3.333\nsolve_time = 0.006\nsolve_sat_time = 0.005\nsolve_unsat_time = 0.001\nblock_time = 0.003\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.007\npropagate_time = 0.000\nrefinement_time = 0.002\nprove_time = 0.008\ntotal_time = nan\nsafe"}},"run_time":69,"depth":10}]},{"example":"../examples/array_index_compl.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a (+ i 1) (+ 1 (Read-Int-Int a i))) (+ i 1)) (+ 1 (Read-Int-Int a i)))","(= (Read-Int-Int (Write-Int-Int a 0 1) 0) 1)"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= 0 i)\n)\n;; clause 1\n(or\n  (<= 2 i)\n  (not (<= 3 (Read-Int-Int a i)))\n)\n;; clause 2\n(or\n  (= i 0)\n  (<= 2 (Read-Int-Int a i))\n)\n;; clause 3\n(or\n  (= (+ i (* (- 1) (Read-Int-Int a i))) (- 1))\n)\n;; clause 4\n(or\n  (not (= i 0))\n  (= a (Write-Int-Int a 0 1))\n)\n;; clause 5\n(or\n  (not (<= 2 i))\n  (<= 2 (Read-Int-Int a i))\n)\n;; clause 6\n(or\n  (not (<= 2 i))\n  (<= 3 (Read-Int-Int a i))\n)\nsearch stats:\nnum_solve_calls = 141\nnum_solve_sat_calls = 80\nnum_solve_unsat_calls = 61\nnum_solver_reset = 0\nnum_added_cubes = 19\nnum_subsumed_cubes = 11\nnum_block = 51\nnum_refinements = 2\nnum_predicates = 9\nmax_cube_size = 3\navg_cube_size = 1.684\nsolve_time = 0.015\nsolve_sat_time = 0.012\nsolve_unsat_time = 0.003\nblock_time = 0.008\ngeneralize_and_push_time = 0.003\nrec_block_time = 0.019\npropagate_time = 0.002\nrefinement_time = 0.007\nprove_time = 0.023\ntotal_time = nan\nsafe"}},"run_time":79,"depth":10}]},{"example":"../examples/array_init_addvar.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) i)) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) i)) i) (+ (Read-Int-Int a i) i))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) i)) N) (Read-Int-Int a N)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i i) N) (Read-Int-Int a N)))","(=> (not (= i_next i)) (= (Read-Int-Int (Write-Int-Int a i i) i_next) (Read-Int-Int a i_next)))","(=> (not (= 0 i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) i)) 0) (Read-Int-Int a 0)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))","(=> (not (= i_next i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) i)) i_next) (Read-Int-Int a i_next)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (let ((.def_24 (Read-Int-Int a i))) (not (= (+ i (+ .def_24 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ i .def_24)) i)))) 0)))\n  (not (= (Read-Int-Int a i_next) (Read-Int-Int (Write-Int-Int a i (+ i (Read-Int-Int a i))) i_next)))\n  (= i 0)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 80\nnum_solve_sat_calls = 35\nnum_solve_unsat_calls = 45\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 5\nnum_block = 30\nnum_refinements = 0\nnum_predicates = 19\nmax_cube_size = 4\navg_cube_size = 3.167\nsolve_time = 0.018\nsolve_sat_time = 0.014\nsolve_unsat_time = 0.003\nblock_time = 0.010\ngeneralize_and_push_time = 0.008\nrec_block_time = 0.013\npropagate_time = 0.001\nrefinement_time = 0.000\nprove_time = 0.018\ntotal_time = nan\nsafe"}},"run_time":169,"depth":10}]},{"example":"../examples/array_max_min_approx.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 5, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"max\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"max\") } })] }] }"},"run_time":62,"depth":10}]},{"example":"../examples/array_equiv_1.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (+ i c)) i) (+ i c))","(= (Read-Int-Int (Write-Int-Int a i c) i) c)","(= (Read-Int-Int (Write-Int-Int a i (+ 1 (Read-Int-Int a (- i 1)))) i) (+ 1 (Read-Int-Int a (- i 1))))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i c) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ 1 (Read-Int-Int a (- i 1)))) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (not (<= 3 i))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 1\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (<= i 1)\n  (not (<= 3 Z))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 2\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (not (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 3)))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 3\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 4\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (<= Z 3)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 5\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (not (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 8)))\n)\n;; clause 6\n(or\n  (not (= pc 0))\n  (not (= (+ i (+ c (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ i c)) i)))) 0))\n  (let ((.def_33 (Read-Int-Int a (+ i (- 1))))) (not (= (+ .def_33 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_33 1)) i))) (- 1))))\n  (not (= i Z))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a (+ i (- 1))) 1)) Z)))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int b Z)))\n  (= i 0)\n  (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z))\n)\n;; clause 7\n(or\n  (not (= pc 0))\n  (not (= (+ i (+ c (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ i c)) i)))) 0))\n  (let ((.def_33 (Read-Int-Int a (+ i (- 1))))) (not (= (+ .def_33 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_33 1)) i))) (- 1))))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z)))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a (+ i (- 1))) 1)) Z)))\n  (= i 0)\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n)\n;; clause 8\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (not (<= 6 Z))\n)\n;; clause 9\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 3)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 10\n(or\n  (<= i Z)\n  (<= Z 3)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 11\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (<= i 3)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 12\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (not (<= 3 i))\n  (not (<= 3 Z))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 13\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= i 4)\n)\n;; clause 14\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (not (<= i Z))\n  (<= i 3)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 15\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= i 5)\n)\n;; clause 16\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (not (<= i Z))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= i 4)\n)\n;; clause 17\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= i 6)\n)\n;; clause 18\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= i 7)\n)\n;; clause 19\n(or\n  (not (= pc 1))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int b Z)))\n  (= i Z)\n  (<= n Z)\n  (<= i 1)\n  (not (<= i Z))\n  (<= (+ i (+ c (* (- 1) (Read-Int-Int b Z)))) (- 1))\n)\n;; clause 20\n(or\n  (not (= (+ i (+ c (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ i c)) i)))) 0))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z)))\n  (not (= pc 1))\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n  (<= i 7)\n)\n;; clause 21\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ c (* (- 1) (Read-Int-Int a (+ i (- 1))))) (- 6))\n)\n;; clause 22\n(or\n  (not (= (+ i (+ c (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ i c)) i)))) 0))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z)))\n  (not (= pc 1))\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n  (<= i 6)\n)\n;; clause 23\n(or\n  (not (= (+ i (+ c (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ i c)) i)))) 0))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z)))\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n)\n;; clause 24\n(or\n  (not (= (+ i (+ c (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ i c)) i)))) 0))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z)))\n  (not (= pc 1))\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n  (not (<= 6 Z))\n)\n;; clause 25\n(or\n  (not (= i Z))\n  (not (= pc 1))\n  (<= n Z)\n  (<= (+ i (+ c (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 26\n(or\n  (not (= (+ i (+ c (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ i c)) i)))) 0))\n  (not (= i Z))\n  (not (= pc 1))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int b Z)))\n  (not (<= 0 Z))\n  (<= n Z)\n  (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z))\n)\n;; clause 27\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (not (<= i Z))\n  (<= (+ i (+ c (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 28\n(or\n  (not (= pc 1))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int b Z)))\n  (<= n Z)\n  (not (<= i Z))\n  (not (<= 1 (+ i (+ c (* (- 1) (Read-Int-Int b Z))))))\n)\n;; clause 29\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n  (<= (+ i (+ c (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 30\n(or\n  (not (= pc 1))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int b Z)))\n  (= i Z)\n  (<= n Z)\n  (not (<= i Z))\n  (<= (+ i (+ c (* (- 1) (Read-Int-Int b Z)))) (- 1))\n  (<= i 8)\n)\n;; clause 31\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (not (<= i Z))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= i 8)\n)\n;; clause 32\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (= c (Read-Int-Int a Z))\n  (<= i Z)\n)\n;; clause 33\n(or\n  (not (= pc 0))\n  (<= i 1)\n  (<= (+ i (+ c (* (- 1) (Read-Int-Int a (+ i (- 1)))))) 1)\n)\n;; clause 34\n(or\n  (<= i Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 35\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 36\n(or\n  (not (= i 0))\n  (not (= c (Read-Int-Int (Write-Int-Int a i c) i)))\n  (not (= i Z))\n  (not (= pc 1))\n  (<= n Z)\n  (= (Read-Int-Int (Write-Int-Int a i c) Z) (Read-Int-Int a Z))\n)\n;; clause 37\n(or\n  (not (= pc 1))\n  (= i 0)\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (not (= Z 0))\n)\n;; clause 38\n(or\n  (not (<= n i))\n  (not (<= 0 Z))\n  (<= n Z)\n  (= c (Read-Int-Int a Z))\n  (not (<= i 1))\n)\n;; clause 39\n(or\n  (not (= (Read-Int-Int (Write-Int-Int a i c) Z) (Read-Int-Int a Z)))\n  (= c (Read-Int-Int a Z))\n  (not (= Z 0))\n)\n;; clause 40\n(or\n  (not (= i 0))\n  (not (= (+ i (+ c (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ i c)) i)))) 0))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z)))\n  (not (= pc 1))\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n)\n;; clause 41\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (= i Z)\n  (<= n Z)\n  (= Z 0)\n  (not (<= i 1))\n  (<= 3 n)\n)\n;; clause 42\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (= i Z)\n  (<= n Z)\n  (<= n i)\n  (= Z 0)\n  (<= 3 n)\n)\n;; clause 43\n(or\n  (not (= pc 0))\n  (= i 0)\n  (<= c (Read-Int-Int a (+ i (- 1))))\n)\n;; clause 44\n(or\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (= c (Read-Int-Int a Z))\n  (<= c (Read-Int-Int a (+ i (- 1))))\n  (<= i Z)\n)\n;; clause 45\n(or\n  (let ((.def_33 (Read-Int-Int a (+ i (- 1))))) (not (= (+ .def_33 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_33 1)) i))) (- 1))))\n  (not (= i Z))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a (+ i (- 1))) 1)) Z)))\n  (not (<= 0 Z))\n  (= i 0)\n  (<= n Z)\n  (<= 1 (+ i (+ c (* (- 1) (Read-Int-Int a (+ i (- 1)))))))\n)\n;; clause 46\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (<= 0 (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))))\n)\n;; clause 47\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (= c (Read-Int-Int a Z))\n  (not (= (Read-Int-Int b Z) (Read-Int-Int (Write-Int-Int b 0 c) Z)))\n  (<= i Z)\n  (not (<= (Read-Int-Int (Write-Int-Int b 0 c) Z) c))\n)\n;; clause 48\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (= c (Read-Int-Int a Z))\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 1))\n)\n;; clause 49\n(or\n  (not (= i Z))\n  (not (= pc 1))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int b Z)))\n  (not (<= 0 Z))\n  (<= n Z)\n  (not (<= (+ i (+ c (* (- 1) (Read-Int-Int b Z)))) (- 1)))\n)\n;; clause 50\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (= i 0)\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n  (not (= c (Read-Int-Int a Z)))\n)\n;; clause 51\n(or\n  (let ((.def_33 (Read-Int-Int a (+ i (- 1))))) (not (= (+ .def_33 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_33 1)) i))) (- 1))))\n  (not (= i Z))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a (+ i (- 1))) 1)) Z)))\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (<= 1 (+ i (+ c (* (- 1) (Read-Int-Int a (+ i (- 1)))))))\n)\n;; clause 52\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (not (= c (Read-Int-Int a Z)))\n  (= Z 0)\n)\n;; clause 53\n(or\n  (not (= pc 0))\n  (let ((.def_33 (Read-Int-Int a (+ i (- 1))))) (not (= (+ .def_33 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_33 1)) i))) (- 1))))\n  (not (= i Z))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a (+ i (- 1))) 1)) Z)))\n  (<= i 1)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 2))\n)\n;; clause 54\n(or\n  (not (= pc 0))\n  (<= i 1)\n  (<= (+ c (* (- 1) (Read-Int-Int a (+ i (- 1))))) (- 1))\n)\n;; clause 55\n(or\n  (<= i Z)\n  (<= Z 1)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 2))\n)\n;; clause 56\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (<= Z 1)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 2))\n)\n;; clause 57\n(or\n  (not (= pc 0))\n  (= i 0)\n  (<= 1 (+ i (+ c (* (- 1) (Read-Int-Int a (+ i (- 1)))))))\n)\n;; clause 58\n(or\n  (not (<= 0 Z))\n  (<= i Z)\n  (<= 0 (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))))\n)\n;; clause 59\n(or\n  (not (<= 0 Z))\n  (= c (Read-Int-Int a Z))\n  (<= i Z)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 1))\n)\n;; clause 60\n(or\n  (not (<= 0 Z))\n  (not (= c (Read-Int-Int a Z)))\n  (= Z 0)\n  (<= i Z)\n)\n;; clause 61\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (= i Z)\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n  (not (= c (Read-Int-Int a Z)))\n)\n;; clause 62\n(or\n  (not (= i 0))\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (= i Z)\n  (<= n Z)\n  (not (= c (Read-Int-Int a Z)))\n)\n;; clause 63\n(or\n  (not (= c (Read-Int-Int (Write-Int-Int a i c) i)))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int a i c) Z) (Read-Int-Int a Z)))\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (= i 0)\n  (<= n Z)\n)\n;; clause 64\n(or\n  (not (= (+ i (+ c (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ i c)) i)))) 0))\n  (let ((.def_33 (Read-Int-Int a (+ i (- 1))))) (not (= (+ .def_33 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_33 1)) i))) (- 1))))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z)))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a (+ i (- 1))) 1)) Z)))\n  (not (<= 0 Z))\n  (= i 0)\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n  (not (<= i 1))\n)\n;; clause 65\n(or\n  (not (= c (Read-Int-Int (Write-Int-Int a i c) i)))\n  (let ((.def_33 (Read-Int-Int a (+ i (- 1))))) (not (= (+ .def_33 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_33 1)) i))) (- 1))))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int a i c) Z) (Read-Int-Int a Z)))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a (+ i (- 1))) 1)) Z)))\n  (not (<= 0 Z))\n  (= i 0)\n  (<= n Z)\n)\n;; clause 66\n(or\n  (not (<= n i))\n  (not (<= 0 Z))\n  (<= n Z)\n  (<= 0 (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))))\n)\n;; clause 67\n(or\n  (not (= pc 0))\n  (<= i 1)\n  (<= 1 (+ i (+ c (* (- 1) (Read-Int-Int a (+ i (- 1)))))))\n)\n;; clause 68\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (= i Z)\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 1))\n)\n;; clause 69\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 1)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 2))\n)\n;; clause 70\n(or\n  (not (<= n i))\n  (not (<= 0 Z))\n  (<= n Z)\n  (not (= c (Read-Int-Int a Z)))\n  (= Z 0)\n)\n;; clause 71\n(or\n  (not (<= n i))\n  (not (<= 0 Z))\n  (<= n Z)\n  (= c (Read-Int-Int a Z))\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 1))\n)\n;; clause 72\n(or\n  (not (= pc 0))\n  (not (<= 3 i))\n  (<= (+ c (* (- 1) (Read-Int-Int a (+ i (- 1))))) (- 2))\n)\n;; clause 73\n(or\n  (not (= pc 0))\n  (<= i 3)\n  (<= (+ c (* (- 1) (Read-Int-Int a (+ i (- 1))))) (- 3))\n)\n;; clause 74\n(or\n  (<= i Z)\n  (<= Z 3)\n  (not (<= Z 4))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 75\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (<= Z 3)\n  (not (<= Z 4))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 76\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 3)\n  (not (<= Z 4))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n)\n;; clause 77\n(or\n  (not (= i Z))\n  (not (= pc 1))\n  (<= n Z)\n  (<= i 3)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 3))\n)\n;; clause 78\n(or\n  (<= i Z)\n  (<= Z 4)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 4))\n)\n;; clause 79\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 4))\n)\n;; clause 80\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 4))\n)\n;; clause 81\n(or\n  (not (= pc 1))\n  (= i 0)\n  (<= n Z)\n  (not (<= i Z))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 6))\n)\n;; clause 82\n(or\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z)))\n  (not (= pc 1))\n  (<= n Z)\n  (not (<= 3 Z))\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 3))\n)\n;; clause 83\n(or\n  (not (= (Read-Int-Int b Z) (Read-Int-Int (Write-Int-Int b 0 c) Z)))\n  (<= i Z)\n  (not (<= 3 Z))\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 3))\n)\n;; clause 84\n(or\n  (not (<= n i))\n  (<= n Z)\n  (not (= (Read-Int-Int b Z) (Read-Int-Int (Write-Int-Int b 0 c) Z)))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int (Write-Int-Int b 0 c) Z)))) (- 1))\n  (<= (- 2) (+ c (* (- 1) (Read-Int-Int b Z))))\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 3))\n)\n;; clause 85\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (<= i 3)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= 6 Z)\n)\n;; clause 86\n(or\n  (not (= pc 0))\n  (<= i 4)\n  (<= (+ c (* (- 1) (Read-Int-Int a (+ i (- 1))))) (- 4))\n)\n;; clause 87\n(or\n  (<= i Z)\n  (<= Z 4)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 5))\n)\n;; clause 88\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 5))\n)\n;; clause 89\n(or\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (<= n Z)\n  (<= i 3)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 6))\n)\n;; clause 90\n(or\n  (not (= pc 0))\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (* (- 1) (Read-Int-Int a (+ i (- 1))))) (- 5))\n)\n;; clause 91\n(or\n  (not (= pc 0))\n  (not (= (+ i (+ c (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ i c)) i)))) 0))\n  (let ((.def_33 (Read-Int-Int a (+ i (- 1))))) (not (= (+ .def_33 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_33 1)) i))) (- 1))))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ i c)) Z) (Read-Int-Int b Z)))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a (+ i (- 1))) 1)) Z)))\n  (= i 0)\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 6))\n)\n;; clause 92\n(or\n  (not (= pc 0))\n  (not (= i Z))\n  (not (<= 6 Z))\n  (<= (+ c (* (- 1) (Read-Int-Int a (+ i (- 1))))) (- 5))\n)\n;; clause 93\n(or\n  (<= i Z)\n  (not (<= 6 Z))\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 6))\n)\n;; clause 94\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 6))\n)\n;; clause 95\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (not (<= i Z))\n  (not (<= 3 i))\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= 6 Z)\n)\n;; clause 96\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (not (<= 6 Z))\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 6))\n)\n;; clause 97\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= 6 Z)\n)\n;; clause 98\n(or\n  (not (<= n i))\n  (<= n Z)\n  (not (<= 6 Z))\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 6))\n)\n;; clause 99\n(or\n  (<= i Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= 6 Z)\n)\n;; clause 100\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= 6 Z)\n)\n;; clause 101\n(or\n  (<= i Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 6))\n)\n;; clause 102\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 6))\n)\n;; clause 103\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 5))\n)\n;; clause 104\n(or\n  (not (= pc 0))\n  (<= i 5)\n  (<= (+ c (* (- 1) (Read-Int-Int a (+ i (- 1))))) (- 5))\n)\n;; clause 105\n(or\n  (not (= pc 0))\n  (<= i 6)\n  (<= (+ c (* (- 1) (Read-Int-Int a (+ i (- 1))))) (- 6))\n)\n;; clause 106\n(or\n  (not (= pc 0))\n  (<= i 7)\n  (<= (+ c (* (- 1) (Read-Int-Int a (+ i (- 1))))) (- 7))\n)\n;; clause 107\n(or\n  (<= i Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 8))\n)\n;; clause 108\n(or\n  (not (= pc 1))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 8))\n)\n;; clause 109\n(or\n  (not (<= n i))\n  (<= n Z)\n  (<= Z 4)\n  (<= (+ c (+ Z (* (- 1) (Read-Int-Int a Z)))) 0)\n  (<= (+ c (* (- 1) (Read-Int-Int a Z))) (- 8))\n)\n;; clause 110\n(or\n  (not (<= n i))\n  (not (= pc 1))\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n)\nsearch stats:\nnum_solve_calls = 10965\nnum_solve_sat_calls = 4831\nnum_solve_unsat_calls = 6134\nnum_solver_reset = 2\nnum_added_cubes = 1377\nnum_subsumed_cubes = 1322\nnum_block = 5602\nnum_refinements = 39\nnum_predicates = 65\nmax_cube_size = 10\navg_cube_size = 5.028\nsolve_time = 4.181\nsolve_sat_time = 3.678\nsolve_unsat_time = 0.502\nblock_time = 3.356\ngeneralize_and_push_time = 1.513\nrec_block_time = 4.322\npropagate_time = 1.395\nrefinement_time = 1.416\nprove_time = 5.777\ntotal_time = nan\nsafe"}},"run_time":5917,"depth":10}]},{"example":"../examples/array_min_swap.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) Z (Read-Int-Int a i)) Z) (Read-Int-Int a i))","(=> (not (= i_next Z)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) Z (Read-Int-Int a i)) i_next) (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) i_next)))","(= (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) i) (Read-Int-Int a j))","(=> (not (= j_next Z)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) Z (Read-Int-Int a i)) j_next) (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) j_next)))","(=> (not (= Z j)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) j (Read-Int-Int a i)) Z) (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) Z)))","(=> (not (= i_next j)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) j (Read-Int-Int a i)) i_next) (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) i_next)))","(=> (not (= j_next i)) (= (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) j_next) (Read-Int-Int a j_next)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"search stats:\nnum_solve_calls = 29\nnum_solve_sat_calls = 18\nnum_solve_unsat_calls = 11\nnum_solver_reset = 0\nnum_added_cubes = 2\nnum_subsumed_cubes = 0\nnum_block = 8\nnum_refinements = 1\nnum_predicates = 20\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.008\nsolve_sat_time = 0.006\nsolve_unsat_time = 0.002\nblock_time = 0.003\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.009\npropagate_time = 0.000\nrefinement_time = 0.004\nprove_time = 0.011\ntotal_time = nan\nunknown"}},"run_time":137,"depth":10}]},{"example":"../examples/array_split_02.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(= (Read-Int-Int (Write-Int-Int a i (* 2 i)) i) (* 2 i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* 2 i)) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (<= (Read-Int-Int a Z) Z))\n  (<= Z CONST0)\n  (<= N Z)\n  (<= CONST0 1)\n)\n;; clause 1\n(or\n  (not (<= (Read-Int-Int a Z) Z))\n  (<= Z CONST0)\n  (<= CONST0 1)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 130\nnum_solve_sat_calls = 90\nnum_solve_unsat_calls = 40\nnum_solver_reset = 0\nnum_added_cubes = 11\nnum_subsumed_cubes = 5\nnum_block = 43\nnum_refinements = 3\nnum_predicates = 13\nmax_cube_size = 5\navg_cube_size = 3.273\nsolve_time = 0.020\nsolve_sat_time = 0.017\nsolve_unsat_time = 0.002\nblock_time = 0.009\ngeneralize_and_push_time = 0.006\nrec_block_time = 0.021\npropagate_time = 0.004\nrefinement_time = 0.007\nprove_time = 0.028\ntotal_time = nan\nsafe"}},"run_time":76,"depth":10}]},{"example":"../examples/array_split_16.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"counterexample\n;; step 0\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) (- 1)) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 26)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 53) (as @3.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) (- 1)) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 26)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 53) (as @3.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 1\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 26)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 27)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 53) (as @2.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) 26)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 27)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 53) (as @2.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 2\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 26)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 53) (as @5.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 26)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 53) (as @5.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 3\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 3)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 26)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) 27)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3 53) (as @6.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) 26)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) 27)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3 53) (as @6.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 4\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 4)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 4) 26)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 4 53) (as @7.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 4 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 4) 26)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 4 53) (as @7.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 4 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 5\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 5)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 4) 26)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 5) 27)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 5 53) (as @8.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 5 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 4) 26)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 5) 27)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 5 53) (as @8.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 5 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 6\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 6)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 5) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 6) 26)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 6 53) (as @9.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 6 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 5) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 6) 26)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 6 53) (as @9.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 6 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 7\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 7)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 6) 26)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 7) 27)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 7 53) (as @10.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 7 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 6) 26)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 7) 27)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 7 53) (as @10.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 7 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 8\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 8)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 7) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 8) 26)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 8 53) (as @11.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 8 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 7) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 8) 26)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 8 53) (as @11.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 8 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 9\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 9)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 8) 26)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 9) 27)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 9 53) (as @12.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 9 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 8) 26)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 9) 27)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 9 53) (as @12.Array-Int-Int |Array-Int-Int|))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 9 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 10\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 10)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 9) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10 28) (as @4.Array-Int-Int |Array-Int-Int|))\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 9) 27)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10 28) (as @4.Array-Int-Int |Array-Int-Int|))\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10 2))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\n;; step 11\n(and\n  (= a (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 11)\n  (= N 11)\n  (= Z 10)\n  (= CONST0 2)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10) 1)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 11) 0)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 11 1))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 11 2))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10) 1)\n)\nsearch stats:\nnum_solve_calls = 302\nnum_solve_sat_calls = 235\nnum_solve_unsat_calls = 67\nnum_solver_reset = 0\nnum_added_cubes = 21\nnum_subsumed_cubes = 11\nnum_block = 138\nnum_refinements = 10\nnum_predicates = 16\nmax_cube_size = 3\navg_cube_size = 1.857\nsolve_time = 0.031\nsolve_sat_time = 0.028\nsolve_unsat_time = 0.002\nblock_time = 0.018\ngeneralize_and_push_time = 0.003\nrec_block_time = 0.066\npropagate_time = 0.006\nrefinement_time = 0.042\nprove_time = 0.075\ntotal_time = nan\nunsafe"}},"run_time":103,"depth":10}]},{"example":"../examples/array_split_17.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 4, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Constant(Numeral(1))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(1)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Constant(Numeral(1))] }] }, Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] } }] }"},"run_time":66,"depth":10}]},{"example":"../examples/array_split_03.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 8, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Forall { vars: [(Symbol(\"PH0\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] } }] }"},"run_time":94,"depth":10}]},{"example":"../examples/array_copy_inverse.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"n\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"n\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }] }, Forall { vars: [(Symbol(\"PH4\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"n_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH4\") } })] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] } }] }"},"run_time":17,"depth":10}]},{"example":"../examples/array_init_both_ends_simpl.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 5, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(1)), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(0)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(0)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(0)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(0))] }] }] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(0)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }] }] } }, Forall { vars: [(Symbol(\"PH0\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] } }] }"},"run_time":188,"depth":10}]},{"example":"../examples/array_tiling_pnr3.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= defval_next (- (* 3 i) 1))) (= (Read-Int-Int (Write-Int-Int a2 (- (* 3 i) 1) fixval) defval_next) (Read-Int-Int a2 defval_next)))","(=> (not (= Z (- (* 3 i) 2))) (= (Read-Int-Int (Write-Int-Int a1 (- (* 3 i) 2) fixval) Z) (Read-Int-Int a1 Z)))","(= (Read-Int-Int (Write-Int-Int a1 (- (* 3 i) 2) fixval) (- (* 3 i) 2)) fixval)","(=> (not (= Z (- (* 3 i) 3))) (= (Read-Int-Int (Write-Int-Int a (- (* 3 i) 3) val3) Z) (Read-Int-Int a Z)))","(=> (not (= defval_next (- (* 3 i) 2))) (= (Read-Int-Int (Write-Int-Int a1 (- (* 3 i) 2) fixval) defval_next) (Read-Int-Int a1 defval_next)))","(=> (not (= Z (- (* 3 i) 1))) (= (Read-Int-Int (Write-Int-Int a2 (- (* 3 i) 1) val1) Z) (Read-Int-Int a2 Z)))","(= (Read-Int-Int (Write-Int-Int a2 (- (* 3 i) 1) val1) (- (* 3 i) 1)) val1)","(= (Read-Int-Int (Write-Int-Int a (- (* 3 i) 3) fixval) (- (* 3 i) 3)) fixval)","(=> (not (= Z (- (* 3 i) 3))) (= (Read-Int-Int (Write-Int-Int a (- (* 3 i) 3) fixval) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a1 (- (* 3 i) 2) val2) (- (* 3 i) 2)) val2)","(= (Read-Int-Int (Write-Int-Int a (- (* 3 i) 3) val3) (- (* 3 i) 3)) val3)","(= (Read-Int-Int (Write-Int-Int a2 (- (* 3 i) 1) fixval) (- (* 3 i) 1)) fixval)","(=> (not (= Z (- (* 3 i) 1))) (= (Read-Int-Int (Write-Int-Int a2 (- (* 3 i) 1) fixval) Z) (Read-Int-Int a2 Z)))","(=> (not (= Z (- (* 3 i) 2))) (= (Read-Int-Int (Write-Int-Int a1 (- (* 3 i) 2) val2) Z) (Read-Int-Int a1 Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= fixval 10)\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (not (= defval (Read-Int-Int a Z)))\n  (<= i S)\n  (<= (+ (* 3 S) (* (- 1) Z)) 0)\n)\n;; clause 2\n(or\n  (= defval 0)\n)\n;; clause 3\n(or\n  (not (<= 0 Z))\n  (not (= defval (Read-Int-Int a Z)))\n  (<= (+ (* 3 i) (* (- 1) Z)) 3)\n)\nsearch stats:\nnum_solve_calls = 71\nnum_solve_sat_calls = 37\nnum_solve_unsat_calls = 34\nnum_solver_reset = 0\nnum_added_cubes = 9\nnum_subsumed_cubes = 5\nnum_block = 24\nnum_refinements = 1\nnum_predicates = 28\nmax_cube_size = 4\navg_cube_size = 2.444\nsolve_time = 0.044\nsolve_sat_time = 0.033\nsolve_unsat_time = 0.008\nblock_time = 0.024\ngeneralize_and_push_time = 0.016\nrec_block_time = 0.040\npropagate_time = 0.002\nrefinement_time = 0.005\nprove_time = 0.049\ntotal_time = nan\nsafe"}},"run_time":746,"depth":10}]},{"example":"../examples/array_two_counters_min_max_prog.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i m_next) i) m_next)","(=> (not (= Z j)) (= (Read-Int-Int (Write-Int-Int c j n_next) Z) (Read-Int-Int c Z)))","(= (Read-Int-Int (Write-Int-Int c j n_next) j) n_next)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i m_next) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"search stats:\nnum_solve_calls = 388\nnum_solve_sat_calls = 218\nnum_solve_unsat_calls = 170\nnum_solver_reset = 0\nnum_added_cubes = 36\nnum_subsumed_cubes = 22\nnum_block = 153\nnum_refinements = 9\nnum_predicates = 22\nmax_cube_size = 6\navg_cube_size = 3.500\nsolve_time = 0.080\nsolve_sat_time = 0.072\nsolve_unsat_time = 0.007\nblock_time = 0.047\ngeneralize_and_push_time = 0.028\nrec_block_time = 0.104\npropagate_time = 0.011\nrefinement_time = 0.040\nprove_time = 0.123\ntotal_time = nan\nunknown"}},"run_time":206,"depth":10}]},{"example":"../examples/array_init_and_copy.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i 1) i) 1)","(= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i 1) N) (Read-Int-Int a N)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= i N)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 2\n(or\n  (<= Z 0)\n  (<= i Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 3\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 4\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (<= 1 (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 5\n(or\n  (not (= pc 2))\n  (<= 1 (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 385\nnum_solve_sat_calls = 194\nnum_solve_unsat_calls = 191\nnum_solver_reset = 0\nnum_added_cubes = 35\nnum_subsumed_cubes = 25\nnum_block = 172\nnum_refinements = 2\nnum_predicates = 16\nmax_cube_size = 5\navg_cube_size = 3.743\nsolve_time = 0.049\nsolve_sat_time = 0.042\nsolve_unsat_time = 0.006\nblock_time = 0.033\ngeneralize_and_push_time = 0.023\nrec_block_time = 0.049\npropagate_time = 0.009\nrefinement_time = 0.010\nprove_time = 0.061\ntotal_time = nan\nsafe"}},"run_time":138,"depth":10}]},{"example":"../examples/array_copy_increment.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (+ 1 (Read-Int-Int a i))) i) (+ 1 (Read-Int-Int a i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (+ 1 (Read-Int-Int a i))) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= n i))\n  (not (<= (Read-Int-Int b Z) (Read-Int-Int a Z)))\n  (<= Z 0)\n  (<= n Z)\n)\n;; clause 1\n(or\n  (not (<= (Read-Int-Int b Z) (Read-Int-Int a Z)))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 70\nnum_solve_sat_calls = 45\nnum_solve_unsat_calls = 25\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 22\nnum_refinements = 2\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.009\nsolve_sat_time = 0.007\nsolve_unsat_time = 0.001\nblock_time = 0.003\ngeneralize_and_push_time = 0.003\nrec_block_time = 0.010\npropagate_time = 0.001\nrefinement_time = 0.004\nprove_time = 0.013\ntotal_time = nan\nsafe"}},"run_time":48,"depth":10}]},{"example":"../examples/array_nonlin_init_depend.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"C1\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"C1\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"C2\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"C2\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"C1\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }] }"},"run_time":29,"depth":10}]},{"example":"../examples/array_init_ite.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (+ i (Read-Int-Int a i))) i) (+ i (Read-Int-Int a i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i i) i) i)"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= n i))\n  (= Z (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= n Z)\n)\n;; clause 1\n(or\n  (= Z (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 78\nnum_solve_sat_calls = 45\nnum_solve_unsat_calls = 33\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 26\nnum_refinements = 2\nnum_predicates = 11\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.011\nsolve_sat_time = 0.009\nsolve_unsat_time = 0.002\nblock_time = 0.005\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.013\npropagate_time = 0.001\nrefinement_time = 0.005\nprove_time = 0.016\ntotal_time = nan\nsafe"}},"run_time":60,"depth":10}]},{"example":"../examples/array_init_and_copy_inverse.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 7, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(1))] }] }] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(1))] }] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(1))] }] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] } }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }] }] } }, Forall { vars: [(Symbol(\"PH0\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH1\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH3\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } }), Constant(Numeral(1))] }] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] } }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Constant(Numeral(1))] }] }] }] }] } }] }"},"run_time":227,"depth":10}]},{"example":"../examples/array_init_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i 1) i) 1)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (= (Read-Int-Int a Z) 1)\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (= (Read-Int-Int a Z) 1)\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 70\nnum_solve_sat_calls = 45\nnum_solve_unsat_calls = 25\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 22\nnum_refinements = 2\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.007\nsolve_sat_time = 0.006\nsolve_unsat_time = 0.001\nblock_time = 0.003\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.009\npropagate_time = 0.001\nrefinement_time = 0.004\nprove_time = 0.011\ntotal_time = nan\nsafe"}},"run_time":40,"depth":10}]},{"example":"../examples/array_equiv_2.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (* i c)) i) (* i c))","(= (Read-Int-Int (Write-Int-Int a i (+ c (Read-Int-Int a (- i 1)))) i) (+ c (Read-Int-Int a (- i 1))))","(=> (not (= (- i 1) i)) (= (Read-Int-Int (Write-Int-Int b i (* i c)) (- i 1)) (Read-Int-Int b (- i 1))))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (* i c)) Z) (Read-Int-Int b Z)))","(= (Read-Int-Int (Write-Int-Int a i 0) i) 0)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 0) Z) (Read-Int-Int a Z)))","(=> (not (= (- i 1) i)) (= (Read-Int-Int (Write-Int-Int a i 0) (- i 1)) (Read-Int-Int a (- i 1))))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ c (Read-Int-Int a (- i 1)))) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"search stats:\nnum_solve_calls = 852\nnum_solve_sat_calls = 428\nnum_solve_unsat_calls = 424\nnum_solver_reset = 0\nnum_added_cubes = 51\nnum_subsumed_cubes = 28\nnum_block = 378\nnum_refinements = 7\nnum_predicates = 23\nmax_cube_size = 10\navg_cube_size = 4.980\nsolve_time = 1.269\nsolve_sat_time = 1.239\nsolve_unsat_time = 0.028\nblock_time = 0.877\ngeneralize_and_push_time = 0.649\nrec_block_time = 1.284\npropagate_time = 0.081\nrefinement_time = 0.128\nprove_time = 1.409\ntotal_time = nan\nunknown"}},"run_time":1572,"depth":10}]},{"example":"../examples/array_split_15.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CONST0\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CONST0\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Constant(Numeral(1)), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Constant(Numeral(1)), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }] }"},"run_time":18,"depth":10}]},{"example":"../examples/array_split_01.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int c i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(= (Read-Int-Int (Write-Int-Int c i i) i) i)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i i) Z) (Read-Int-Int c Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (<= CONST0 Z))\n  (= Z (Read-Int-Int c Z))\n  (<= N Z)\n  (<= CONST0 1)\n)\n;; clause 1\n(or\n  (not (<= CONST0 Z))\n  (= Z (Read-Int-Int c Z))\n  (<= CONST0 1)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 100\nnum_solve_sat_calls = 69\nnum_solve_unsat_calls = 31\nnum_solver_reset = 0\nnum_added_cubes = 8\nnum_subsumed_cubes = 3\nnum_block = 32\nnum_refinements = 3\nnum_predicates = 13\nmax_cube_size = 5\navg_cube_size = 3.500\nsolve_time = 0.015\nsolve_sat_time = 0.012\nsolve_unsat_time = 0.002\nblock_time = 0.006\ngeneralize_and_push_time = 0.005\nrec_block_time = 0.019\npropagate_time = 0.002\nrefinement_time = 0.008\nprove_time = 0.023\ntotal_time = nan\nsafe"}},"run_time":69,"depth":10}]},{"example":"../examples/array_init_const_ind.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i 1) i) 1)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= (Read-Int-Int a Z) 1)\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 24\nnum_solve_sat_calls = 11\nnum_solve_unsat_calls = 13\nnum_solver_reset = 0\nnum_added_cubes = 3\nnum_subsumed_cubes = 1\nnum_block = 6\nnum_refinements = 0\nnum_predicates = 7\nmax_cube_size = 3\navg_cube_size = 2.667\nsolve_time = 0.002\nsolve_sat_time = 0.001\nsolve_unsat_time = 0.001\nblock_time = 0.000\ngeneralize_and_push_time = 0.001\nrec_block_time = 0.001\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.002\ntotal_time = nan\nsafe"}},"run_time":28,"depth":10}]},{"example":"../examples/array_split_14.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 4, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }"},"run_time":22,"depth":10}]},{"example":"../examples/array_equiv_3.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":187,"depth":10}]},{"example":"../examples/array_copy_sum.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) i) (+ (Read-Int-Int a i) (Read-Int-Int b i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) Z) (Read-Int-Int c Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= n i))\n  (= (+ (Read-Int-Int c Z) (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n  (<= Z 0)\n  (<= n Z)\n)\n;; clause 1\n(or\n  (= (+ (Read-Int-Int c Z) (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 70\nnum_solve_sat_calls = 45\nnum_solve_unsat_calls = 25\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 22\nnum_refinements = 2\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.012\nsolve_sat_time = 0.010\nsolve_unsat_time = 0.001\nblock_time = 0.004\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.013\npropagate_time = 0.001\nrefinement_time = 0.005\nprove_time = 0.017\ntotal_time = nan\nsafe"}},"run_time":58,"depth":10}]},{"example":"../examples/array_tiling_pnr2.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 1, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(10))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, Constant(Numeral(10))] }] }"},"run_time":10,"depth":10}]},{"example":"../examples/array_min_swap_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) Z (Read-Int-Int a i)) Z) (Read-Int-Int a i))","(=> (not (= i_next Z)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) Z (Read-Int-Int a i)) i_next) (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) i_next)))","(= (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) i) (Read-Int-Int a j))","(=> (not (= j_next Z)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) Z (Read-Int-Int a i)) j_next) (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) j_next)))","(=> (not (= i_next j)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) j (Read-Int-Int a i)) i_next) (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) i_next)))","(=> (not (= Z j)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) j (Read-Int-Int a i)) Z) (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) N) (Read-Int-Int a N)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) Z) (Read-Int-Int a Z)))","(=> (not (= j_next i)) (= (Read-Int-Int (Write-Int-Int a i (Read-Int-Int a j)) j_next) (Read-Int-Int a j_next)))"],"const_instances":[],"ic3ia_out":"search stats:\nnum_solve_calls = 29\nnum_solve_sat_calls = 18\nnum_solve_unsat_calls = 11\nnum_solver_reset = 0\nnum_added_cubes = 2\nnum_subsumed_cubes = 0\nnum_block = 8\nnum_refinements = 1\nnum_predicates = 23\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.010\nsolve_sat_time = 0.007\nsolve_unsat_time = 0.002\nblock_time = 0.003\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.010\npropagate_time = 0.000\nrefinement_time = 0.004\nprove_time = 0.013\ntotal_time = nan\nunknown"}},"run_time":140,"depth":10}]},{"example":"../examples/array_two_counters_max_subtr.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int a i) (- 1))) i) (* (Read-Int-Int a i) (- 1)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int a i) (- 1))) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= i Z))\n  (not (<= 0 j))\n  (<= Z 0)\n  (<= (Read-Int-Int a Z) m)\n  (not (<= i 1))\n  (not (<= j 0))\n)\n;; clause 1\n(or\n  (<= (+ i (+ j (* (- 1) N))) (- 1))\n)\n;; clause 2\n(or\n  (<= N Z)\n  (<= 0 (+ i (+ j (* (- 1) Z))))\n)\n;; clause 3\n(or\n  (<= Z 0)\n  (<= N Z)\n  (<= (Read-Int-Int a Z) m)\n  (<= 0 j)\n)\n;; clause 4\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (<= (Read-Int-Int a Z) m)\n)\n;; clause 5\n(or\n  (<= Z 0)\n  (<= (Read-Int-Int a Z) m)\n  (<= i Z)\n  (not (<= j 0))\n)\n;; clause 6\n(or\n  (<= N Z)\n  (<= (Read-Int-Int a Z) m)\n  (not (<= (+ j (* (- 1) Z)) (- 1)))\n)\nsearch stats:\nnum_solve_calls = 201\nnum_solve_sat_calls = 110\nnum_solve_unsat_calls = 91\nnum_solver_reset = 0\nnum_added_cubes = 20\nnum_subsumed_cubes = 11\nnum_block = 79\nnum_refinements = 5\nnum_predicates = 17\nmax_cube_size = 6\navg_cube_size = 3.150\nsolve_time = 0.050\nsolve_sat_time = 0.045\nsolve_unsat_time = 0.004\nblock_time = 0.028\ngeneralize_and_push_time = 0.017\nrec_block_time = 0.056\npropagate_time = 0.006\nrefinement_time = 0.017\nprove_time = 0.068\ntotal_time = nan\nsafe"}},"run_time":146,"depth":10}]},{"example":"../examples/array_init_increm_two_arrs_antisym.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 7, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"x\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"x\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"x\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"x\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"x\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"x\") } })] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] } }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"x\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] } }] }"},"run_time":110,"depth":10}]},{"example":"../examples/array_init_ite_jump_two.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 1, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }] }"},"run_time":8,"depth":10}]},{"example":"../examples/array_init_var.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= n i))\n  (= Z (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= n Z)\n)\n;; clause 1\n(or\n  (= Z (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 70\nnum_solve_sat_calls = 45\nnum_solve_unsat_calls = 25\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 22\nnum_refinements = 2\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.008\nsolve_sat_time = 0.006\nsolve_unsat_time = 0.001\nblock_time = 0.003\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.009\npropagate_time = 0.001\nrefinement_time = 0.004\nprove_time = 0.011\ntotal_time = nan\nsafe"}},"run_time":39,"depth":10}]},{"example":"../examples/array_init_both_ends.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 4, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Forall { vars: [(Symbol(\"PH0\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] } }] }"},"run_time":20,"depth":10}]},{"example":"../examples/array_single_elem_const.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }] }"},"run_time":12,"depth":10}]},{"example":"../examples/array_tiling_rew.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= val1_next i)) (= (Read-Int-Int (Write-Int-Int a1 i val2) val1_next) (Read-Int-Int a1 val1_next)))","(= (Read-Int-Int (Write-Int-Int a1 i val2) i) val2)","(=> (not (= Z (+ i 1))) (= (Read-Int-Int (Write-Int-Int a (+ i 1) val1) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a (+ i 1) val1) (+ i 1)) val1)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a1 i val2) Z) (Read-Int-Int a1 Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= val2 3)\n)\n;; clause 1\n(or\n  (= low 2)\n)\n;; clause 2\n(or\n  (not (<= S i))\n  (not (<= 0 Z))\n  (<= low (Read-Int-Int a Z))\n  (<= S Z)\n)\n;; clause 3\n(or\n  (= val1 0)\n)\n;; clause 4\n(or\n  (not (<= 0 Z))\n  (= i Z)\n  (<= low (Read-Int-Int a Z))\n  (<= (+ i (* (- 1) Z)) (- 1))\n)\n;; clause 5\n(or\n  (not (<= 0 Z))\n  (= i Z)\n  (<= low (Read-Int-Int a Z))\n  (<= S Z)\n  (<= (+ i (* (- 1) S)) (- 2))\n)\nsearch stats:\nnum_solve_calls = 118\nnum_solve_sat_calls = 58\nnum_solve_unsat_calls = 60\nnum_solver_reset = 0\nnum_added_cubes = 16\nnum_subsumed_cubes = 13\nnum_block = 46\nnum_refinements = 2\nnum_predicates = 19\nmax_cube_size = 5\navg_cube_size = 2.500\nsolve_time = 0.021\nsolve_sat_time = 0.017\nsolve_unsat_time = 0.003\nblock_time = 0.010\ngeneralize_and_push_time = 0.005\nrec_block_time = 0.023\npropagate_time = 0.002\nrefinement_time = 0.007\nprove_time = 0.028\ntotal_time = nan\nsafe"}},"run_time":86,"depth":10}]},{"example":"../examples/array_split_10.vmt","result":[{"strategy":"abstract","result":{"Timeout":30000},"run_time":30005,"depth":10}]},{"example":"../examples/array_split_04.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"counterexample\n;; step 0\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= N 11)\n  (= Z 10)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 2))\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 2) (as @11.Array-Int-Int |Array-Int-Int|))\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 13)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 2))\n  (= (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 2) (as @11.Array-Int-Int |Array-Int-Int|))\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 13)\n)\n;; step 1\n(and\n  (= a (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= N 11)\n  (= Z 10)\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) (- 1))\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 1) (as @12.Array-Int-Int |Array-Int-Int|))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10) 12)\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) (- 1))\n  (= (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 1) (as @12.Array-Int-Int |Array-Int-Int|))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10) 12)\n)\n;; step 2\n(and\n  (= a (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 3)\n  (= N 11)\n  (= Z 10)\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) (- 3))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 3) (as @13.Array-Int-Int |Array-Int-Int|))\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 10) 14)\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2) (- 3))\n  (= (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 3) (as @13.Array-Int-Int |Array-Int-Int|))\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 3 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 10) 14)\n)\n;; step 3\n(and\n  (= a (as @3.Array-Int-Int |Array-Int-Int|))\n  (= i 4)\n  (= N 11)\n  (= Z 10)\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 3) (- 4))\n  (= (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 4 4) (as @14.Array-Int-Int |Array-Int-Int|))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 4 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 10) 15)\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 3) (- 4))\n  (= (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 4 4) (as @14.Array-Int-Int |Array-Int-Int|))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 4 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 10) 15)\n)\n;; step 4\n(and\n  (= a (as @4.Array-Int-Int |Array-Int-Int|))\n  (= i 5)\n  (= N 11)\n  (= Z 10)\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 4) (- 5))\n  (= (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 5 5) (as @15.Array-Int-Int |Array-Int-Int|))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 5 (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 4)))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 10) 16)\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 4) (- 5))\n  (= (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 5 5) (as @15.Array-Int-Int |Array-Int-Int|))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 5 (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 4)))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 10) 16)\n)\n;; step 5\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= i 6)\n  (= N 11)\n  (= Z 10)\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 5) (- 6))\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 6 6) (as @16.Array-Int-Int |Array-Int-Int|))\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 6 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 5)))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 10) 17)\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 5) (- 6))\n  (= (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 6 6) (as @16.Array-Int-Int |Array-Int-Int|))\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 6 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 5)))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 10) 17)\n)\n;; step 6\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= i 7)\n  (= N 11)\n  (= Z 10)\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 6) (- 7))\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 7 7) (as @17.Array-Int-Int |Array-Int-Int|))\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 7 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 6)))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 10) 18)\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 6) (- 7))\n  (= (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 7 7) (as @17.Array-Int-Int |Array-Int-Int|))\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 7 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 6)))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 10) 18)\n)\n;; step 7\n(and\n  (= a (as @7.Array-Int-Int |Array-Int-Int|))\n  (= i 8)\n  (= N 11)\n  (= Z 10)\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 7) (- 8))\n  (= (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 8 8) (as @18.Array-Int-Int |Array-Int-Int|))\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 8 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 7)))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 10) 19)\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 7) (- 8))\n  (= (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 8 8) (as @18.Array-Int-Int |Array-Int-Int|))\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 8 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 7)))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 10) 19)\n)\n;; step 8\n(and\n  (= a (as @8.Array-Int-Int |Array-Int-Int|))\n  (= i 9)\n  (= N 11)\n  (= Z 10)\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 8) (- 9))\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 9 9) (as @19.Array-Int-Int |Array-Int-Int|))\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 9 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 8)))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 10) 20)\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 8) (- 9))\n  (= (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 9 9) (as @19.Array-Int-Int |Array-Int-Int|))\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 9 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 8)))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 10) 20)\n)\n;; step 9\n(and\n  (= a (as @9.Array-Int-Int |Array-Int-Int|))\n  (= i 10)\n  (= N 11)\n  (= Z 10)\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 9) 0)\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10 0))\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10 (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 9)))\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10) 21)\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 9) 0)\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10 0))\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10 (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 9)))\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10) 21)\n)\n;; step 10\n(and\n  (= a (as @10.Array-Int-Int |Array-Int-Int|))\n  (= i 11)\n  (= N 11)\n  (= Z 10)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 0 1))\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10) 22)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 11 (- 22)))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 11 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10) 22)\n)\nsearch stats:\nnum_solve_calls = 274\nnum_solve_sat_calls = 210\nnum_solve_unsat_calls = 64\nnum_solver_reset = 0\nnum_added_cubes = 20\nnum_subsumed_cubes = 11\nnum_block = 125\nnum_refinements = 9\nnum_predicates = 14\nmax_cube_size = 3\navg_cube_size = 1.900\nsolve_time = 0.024\nsolve_sat_time = 0.021\nsolve_unsat_time = 0.002\nblock_time = 0.014\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.051\npropagate_time = 0.005\nrefinement_time = 0.033\nprove_time = 0.059\ntotal_time = nan\nunsafe"}},"run_time":87,"depth":10}]},{"example":"../examples/array_split_05.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 2, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Constant(Numeral(1))] }] }] }"},"run_time":18,"depth":10}]},{"example":"../examples/array_split_11.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 4, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"max_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"max_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"max_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"min_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"min_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"max_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"max_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"max_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"max_next\") } })] }] }] }, Forall { vars: [(Symbol(\"PH3\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] } }] }"},"run_time":48,"depth":10}]},{"example":"../examples/array_init_ite_dupl.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 1, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }] }"},"run_time":19,"depth":10}]},{"example":"../examples/array_init_var_plus_ind.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i j) i) j)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= i 0)\n  (<= 1 i)\n)\n;; clause 1\n(or\n  (not (= i 0))\n  (= j 0)\n)\n;; clause 2\n(or\n  (not (= j (Read-Int-Int (Write-Int-Int a i j) i)))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))\n  (<= 0 (Read-Int-Int a Z))\n)\n;; clause 3\n(or\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 4\n(or\n  (= j 0)\n  (<= 1 j)\n)\nsearch stats:\nnum_solve_calls = 165\nnum_solve_sat_calls = 95\nnum_solve_unsat_calls = 70\nnum_solver_reset = 0\nnum_added_cubes = 15\nnum_subsumed_cubes = 11\nnum_block = 66\nnum_refinements = 2\nnum_predicates = 10\nmax_cube_size = 5\navg_cube_size = 2.933\nsolve_time = 0.014\nsolve_sat_time = 0.012\nsolve_unsat_time = 0.002\nblock_time = 0.008\ngeneralize_and_push_time = 0.005\nrec_block_time = 0.016\npropagate_time = 0.002\nrefinement_time = 0.005\nprove_time = 0.020\ntotal_time = nan\nsafe"}},"run_time":49,"depth":10}]},{"example":"../examples/array2dim_rec2.vmt","result":[{"strategy":"abstract","result":{"Panic":"not yet implemented: Add Z3 function: Read-Int-Int"},"run_time":2,"depth":10}]},{"example":"../examples/array_init_select_copy.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }] }"},"run_time":27,"depth":10}]},{"example":"../examples/array2dim_init_j.vmt","result":[{"strategy":"abstract","result":{"Panic":"not yet implemented: Add Z3 function: Read-Int-Int"},"run_time":2,"depth":10}]},{"example":"../examples/array_init_batches_const.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Constant(Numeral(1))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, Constant(Numeral(1)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Forall { vars: [(Symbol(\"PH0\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] } }] }"},"run_time":72,"depth":10}]},{"example":"../examples/array_init_const_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i 1) i) 1)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (= (Read-Int-Int a Z) 1)\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (= (Read-Int-Int a Z) 1)\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 71\nnum_solve_sat_calls = 42\nnum_solve_unsat_calls = 29\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 26\nnum_refinements = 2\nnum_predicates = 11\nmax_cube_size = 4\navg_cube_size = 2.667\nsolve_time = 0.007\nsolve_sat_time = 0.005\nsolve_unsat_time = 0.001\nblock_time = 0.003\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.009\npropagate_time = 0.001\nrefinement_time = 0.004\nprove_time = 0.011\ntotal_time = nan\nsafe"}},"run_time":41,"depth":10}]},{"example":"../examples/array_horn_copy2.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":85,"depth":10}]},{"example":"../examples/array_hybr_sum.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":113,"depth":10}]},{"example":"../examples/array_init_tuples.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= Z 5)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) (+ i 4) (+ i 2)) 5 N) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) (+ i 4) (+ i 2)) Z)))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) (+ i 4) (+ i 2)) Z i_next) Z) i_next)","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) (+ i 4) (+ i 2)) Z 1) Z) 1)","(=> (not (= Z 4)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) 4 2) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) Z)))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) Z 2) Z) 2)","(=> (not (= Z 3)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) 3 3) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) Z)))","(=> (not (= Z N)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) 4 2) N 1) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) 4 2) Z)))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) Z Z) Z) Z)","(=> (not (= Z 5)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) 4 2) 5 1) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) 4 2) Z)))","(=> (not (= Z 2)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) 2 4) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) Z)))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) Z N) Z) N)","(=> (not (= Z 1)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) 1 5) Z) (Read-Int-Int (Write-Int-Int a i (+ i 6)) Z)))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) 1 5) Z 4) Z) 4)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ i 6)) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i (+ i 6)) i) (+ i 6))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) Z 5) Z) 5)","(=> (not (= Z (+ i 2))) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) Z)))","(=> (not (= Z N)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) N N) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) Z)))","(=> (not (= Z (+ i 1))) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) Z) (Read-Int-Int (Write-Int-Int a i (+ i 6)) Z)))","(=> (not (= Z (+ i 5))) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) (+ i 4) (+ i 2)) (+ i 5) (+ i 1)) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) (+ i 4) (+ i 2)) Z)))","(=> (not (= Z (+ i 4))) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) (+ i 4) (+ i 2)) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) Z)))","(=> (not (= Z (+ i 3))) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) Z) (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) Z)))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) (+ i 4) (+ i 2)) Z (+ i 1)) Z) (+ i 1))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) Z (+ i 5)) Z) (+ i 5))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) Z (+ i 4)) Z) (+ i 4))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) Z (+ i 2)) Z) (+ i 2))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= Z 4))\n  (let ((.def_33 (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)))) (not (= (Read-Int-Int (Write-Int-Int .def_33 (+ i 4) (+ i 2)) Z) (Read-Int-Int .def_33 Z))))\n  (<= 0 (Read-Int-Int a Z))\n)\n;; clause 1\n(or\n  (not (= Z 5))\n  (let ((.def_34 (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) (+ i 4) (+ i 2)))) (not (= (Read-Int-Int .def_34 Z) (Read-Int-Int (Write-Int-Int .def_34 (+ i 5) (+ i 1)) Z))))\n  (<= 0 (Read-Int-Int a Z))\n)\n;; clause 2\n(or\n  (not (= Z 5))\n  (let ((.def_49 (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) (+ i 1) (+ i 5)) (+ i 2) (+ i 4)) (+ i 3) (+ i 3)) 4 2))) (not (= (Read-Int-Int .def_49 Z) (Read-Int-Int (Write-Int-Int .def_49 5 1) Z))))\n  (<= 0 (Read-Int-Int a Z))\n)\n;; clause 3\n(or\n  (not (= Z 5))\n  (not (<= N i))\n  (<= 0 (Read-Int-Int a Z))\n  (<= N Z)\n)\n;; clause 4\n(or\n  (not (= Z 1))\n  (not (<= N i))\n  (<= 0 (Read-Int-Int a Z))\n  (<= N Z)\n)\n;; clause 5\n(or\n  (not (= Z 1))\n  (not (= (Read-Int-Int (Write-Int-Int a i (+ i 6)) Z) (Read-Int-Int a Z)))\n  (not (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ i 6)) Z 5) Z) 5))\n  (let ((.def_21 (Write-Int-Int a i (+ i 6)))) (not (= (Read-Int-Int (Write-Int-Int .def_21 (+ i 1) (+ i 5)) Z) (Read-Int-Int .def_21 Z))))\n  (let ((.def_21 (Write-Int-Int a i (+ i 6)))) (= (Read-Int-Int (Write-Int-Int .def_21 1 5) Z) (Read-Int-Int .def_21 Z)))\n)\n;; clause 6\n(or\n  (not (= Z 2))\n  (not (<= N i))\n  (<= 0 (Read-Int-Int a Z))\n  (<= N Z)\n)\n;; clause 7\n(or\n  (<= 0 (Read-Int-Int a Z))\n  (<= i 6)\n  (<= 6 (+ i (* (- 1) Z)))\n  (<= i Z)\n)\n;; clause 8\n(or\n  (<= 0 (Read-Int-Int a Z))\n  (not (<= 4 Z))\n  (not (<= 6 (+ i (* (- 1) Z))))\n)\n;; clause 9\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= 0 (Read-Int-Int a Z))\n  (<= N Z)\n)\n;; clause 10\n(or\n  (not (= (Read-Int-Int (Write-Int-Int a i (+ i 6)) Z) (Read-Int-Int a Z)))\n  (not (<= 0 Z))\n  (= Z 3)\n  (= Z 2)\n  (<= 0 (Read-Int-Int a Z))\n  (= Z 1)\n  (<= 4 Z)\n)\n;; clause 11\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (<= 0 (Read-Int-Int a Z))\n  (<= 4 Z)\n)\n;; clause 12\n(or\n  (= i 0)\n  (<= 6 i)\n)\n;; clause 13\n(or\n  (not (= (+ i (* (- 1) Z)) (- 4)))\n  (<= 4 Z)\n)\n;; clause 14\n(or\n  (not (= (+ i (* (- 1) Z)) (- 5)))\n  (<= 4 Z)\n)\n;; clause 15\n(or\n  (not (= Z 1))\n  (not (= (+ i (* (- 1) Z)) (- 2)))\n)\n;; clause 16\n(or\n  (not (= Z 1))\n  (not (= (+ i (* (- 1) Z)) (- 3)))\n)\nsearch stats:\nnum_solve_calls = 419\nnum_solve_sat_calls = 225\nnum_solve_unsat_calls = 194\nnum_solver_reset = 0\nnum_added_cubes = 44\nnum_subsumed_cubes = 31\nnum_block = 132\nnum_refinements = 4\nnum_predicates = 48\nmax_cube_size = 7\navg_cube_size = 3.273\nsolve_time = 0.392\nsolve_sat_time = 0.318\nsolve_unsat_time = 0.071\nblock_time = 0.242\ngeneralize_and_push_time = 0.157\nrec_block_time = 0.375\npropagate_time = 0.045\nrefinement_time = 0.046\nprove_time = 0.444\ntotal_time = nan\nsafe"}},"run_time":1195,"depth":10}]},{"example":"../examples/array_two_counters_add.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 7, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j_next\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"j\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] } }] }"},"run_time":170,"depth":10}]},{"example":"../examples/array_bubble_sort.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"counterexample\n;; step 0\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j 0)\n  (= N 3)\n  (= pc 1)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (let ((.def_4684 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0))) (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 .def_4684) 0 .def_4684)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (let ((.def_4684 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0))) (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 .def_4684) 0 .def_4684)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 1\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j 0)\n  (= N 3)\n  (= pc 2)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (let ((.def_4684 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0))) (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 .def_4684) 0 .def_4684)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (let ((.def_4684 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0))) (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 .def_4684) 0 .def_4684)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 2\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j 1)\n  (= N 3)\n  (= pc 2)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 3\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j 2)\n  (= N 3)\n  (= pc 2)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 4\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= j 3)\n  (= N 3)\n  (= pc 2)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 5\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j 3)\n  (= N 3)\n  (= pc 1)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (as @12.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (as @12.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 6\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j 1)\n  (= N 3)\n  (= pc 2)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (let ((.def_4690 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1))) (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 .def_4690) 1 .def_4690)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (let ((.def_4690 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1))) (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 .def_4690) 1 .def_4690)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 7\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j 2)\n  (= N 3)\n  (= pc 2)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 8\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= j 3)\n  (= N 3)\n  (= pc 2)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (as @12.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (as @12.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 9\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= j 3)\n  (= N 3)\n  (= pc 1)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (as @14.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (as @14.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 10\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= j 2)\n  (= N 3)\n  (= pc 2)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (let ((.def_4692 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2))) (= (as @13.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 .def_4692) 2 .def_4692)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (let ((.def_4692 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2))) (= (as @13.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 .def_4692) 2 .def_4692)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 11\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= j 3)\n  (= N 3)\n  (= pc 2)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (as @14.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (as @14.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 12\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 3)\n  (= j 3)\n  (= N 3)\n  (= pc 1)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (let ((.def_4705 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3))) (= (as @15.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3 .def_4705) 3 .def_4705)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (let ((.def_4705 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3))) (= (as @15.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3 .def_4705) 3 .def_4705)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\n;; step 13\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 3)\n  (= j 3)\n  (= N 3)\n  (= pc 3)\n  (= ZZ 2)\n  (= Z 1)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 1))\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3)))\n  (let ((.def_4705 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3))) (= (as @15.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3 .def_4705) 3 .def_4705)))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) 0)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 1))\n)\nsearch stats:\nnum_solve_calls = 553\nnum_solve_sat_calls = 321\nnum_solve_unsat_calls = 232\nnum_solver_reset = 0\nnum_added_cubes = 44\nnum_subsumed_cubes = 26\nnum_block = 262\nnum_refinements = 3\nnum_predicates = 14\nmax_cube_size = 6\navg_cube_size = 3.205\nsolve_time = 0.073\nsolve_sat_time = 0.066\nsolve_unsat_time = 0.007\nblock_time = 0.052\ngeneralize_and_push_time = 0.024\nrec_block_time = 0.086\npropagate_time = 0.023\nrefinement_time = 0.034\nprove_time = 0.112\ntotal_time = nan\nunsafe"}},"run_time":163,"depth":10}]},{"example":"../examples/array_tiling_pnr5.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: TooManyRefinements { n_refines: 10, depth: 1 }"},"run_time":110,"depth":10}]},{"example":"../examples/array_min_max.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= x m)\n)\nsearch stats:\nnum_solve_calls = 21\nnum_solve_sat_calls = 9\nnum_solve_unsat_calls = 12\nnum_solver_reset = 0\nnum_added_cubes = 3\nnum_subsumed_cubes = 1\nnum_block = 5\nnum_refinements = 0\nnum_predicates = 7\nmax_cube_size = 3\navg_cube_size = 1.667\nsolve_time = 0.002\nsolve_sat_time = 0.001\nsolve_unsat_time = 0.001\nblock_time = 0.000\ngeneralize_and_push_time = 0.000\nrec_block_time = 0.001\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.002\ntotal_time = nan\nsafe"}},"run_time":31,"depth":10}]},{"example":"../examples/array_max_reverse_min.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 8, instantiations: [] }"},"run_time":98,"depth":10}]},{"example":"../examples/array_copy_sum_ind.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) i) (+ (Read-Int-Int a i) (Read-Int-Int b i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) Z) (Read-Int-Int c Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= (+ (Read-Int-Int c Z) (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 24\nnum_solve_sat_calls = 11\nnum_solve_unsat_calls = 13\nnum_solver_reset = 0\nnum_added_cubes = 3\nnum_subsumed_cubes = 1\nnum_block = 6\nnum_refinements = 0\nnum_predicates = 7\nmax_cube_size = 3\navg_cube_size = 2.667\nsolve_time = 0.004\nsolve_sat_time = 0.002\nsolve_unsat_time = 0.001\nblock_time = 0.001\ngeneralize_and_push_time = 0.001\nrec_block_time = 0.001\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.003\ntotal_time = nan\nsafe"}},"run_time":42,"depth":10}]},{"example":"../examples/array_min_ind.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= m (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 24\nnum_solve_sat_calls = 11\nnum_solve_unsat_calls = 13\nnum_solver_reset = 0\nnum_added_cubes = 3\nnum_subsumed_cubes = 1\nnum_block = 6\nnum_refinements = 0\nnum_predicates = 5\nmax_cube_size = 3\navg_cube_size = 2.667\nsolve_time = 0.002\nsolve_sat_time = 0.001\nsolve_unsat_time = 0.001\nblock_time = 0.001\ngeneralize_and_push_time = 0.001\nrec_block_time = 0.001\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.002\ntotal_time = nan\nsafe"}},"run_time":31,"depth":10}]},{"example":"../examples/array_nonlin_init_mult.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (* i (- 1) n (- 1))) i) (* i (- 1) n (- 1)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* i (- 1) n (- 1))) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= n i))\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= n Z)\n)\n;; clause 1\n(or\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 70\nnum_solve_sat_calls = 45\nnum_solve_unsat_calls = 25\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 22\nnum_refinements = 2\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.087\nsolve_sat_time = 0.085\nsolve_unsat_time = 0.001\nblock_time = 0.032\ngeneralize_and_push_time = 0.027\nrec_block_time = 0.064\npropagate_time = 0.014\nrefinement_time = 0.004\nprove_time = 0.091\ntotal_time = nan\nsafe"}},"run_time":131,"depth":10}]},{"example":"../examples/array_single_elem_increm.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a 0 0) 0) 0)","(= (Read-Int-Int (Write-Int-Int a 0 (+ 1 (Read-Int-Int a 0))) 0) (+ 1 (Read-Int-Int a 0)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= 0 (Read-Int-Int a 0))\n)\nsearch stats:\nnum_solve_calls = 10\nnum_solve_sat_calls = 2\nnum_solve_unsat_calls = 8\nnum_solver_reset = 0\nnum_added_cubes = 2\nnum_subsumed_cubes = 1\nnum_block = 2\nnum_refinements = 0\nnum_predicates = 4\nmax_cube_size = 1\navg_cube_size = 1.000\nsolve_time = 0.001\nsolve_sat_time = 0.000\nsolve_unsat_time = 0.000\nblock_time = 0.000\ngeneralize_and_push_time = 0.000\nrec_block_time = 0.000\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.001\ntotal_time = nan\nsafe"}},"run_time":26,"depth":10}]},{"example":"../examples/array_split_07.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int c i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(= (Read-Int-Int (Write-Int-Int c i (Read-Int-Int b i)) i) (Read-Int-Int b i))","(=> (not (= CONST0_next i)) (= (Read-Int-Int (Write-Int-Int c i (Read-Int-Int b i)) CONST0_next) (Read-Int-Int c CONST0_next)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (Read-Int-Int b i)) Z) (Read-Int-Int c Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (<= CONST0 Z))\n  (= (Read-Int-Int c Z) (Read-Int-Int b Z))\n  (<= N Z)\n  (<= CONST0 1)\n)\n;; clause 1\n(or\n  (not (<= CONST0 Z))\n  (= (Read-Int-Int c Z) (Read-Int-Int b Z))\n  (<= CONST0 1)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 106\nnum_solve_sat_calls = 71\nnum_solve_unsat_calls = 35\nnum_solver_reset = 0\nnum_added_cubes = 8\nnum_subsumed_cubes = 3\nnum_block = 34\nnum_refinements = 3\nnum_predicates = 15\nmax_cube_size = 5\navg_cube_size = 3.625\nsolve_time = 0.019\nsolve_sat_time = 0.016\nsolve_unsat_time = 0.002\nblock_time = 0.007\ngeneralize_and_push_time = 0.007\nrec_block_time = 0.025\npropagate_time = 0.003\nrefinement_time = 0.011\nprove_time = 0.030\ntotal_time = nan\nsafe"}},"run_time":98,"depth":10}]},{"example":"../examples/array_split_13.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 4, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"y\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"y\") } })] }] }"},"run_time":19,"depth":10}]},{"example":"../examples/array_split_12.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"y\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"y\") } })] }] }] }"},"run_time":16,"depth":10}]},{"example":"../examples/array_split_06.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"counterexample\n;; step 0\n(and\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 14)\n  (= (as @12.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 0))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 14)\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 14)\n  (= (as @12.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @1.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0 0))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) 14)\n)\n;; step 1\n(and\n  (= a (as @1.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10) 13)\n  (= (as @13.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 1))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10) 13)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10) 13)\n  (= (as @13.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @2.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1 1))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10) 13)\n)\n;; step 2\n(and\n  (= a (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 10) 15)\n  (= (as @14.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 2))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 10) 15)\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 10) 15)\n  (= (as @14.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 2 2))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 10) 15)\n)\n;; step 3\n(and\n  (= a (as @3.Array-Int-Int |Array-Int-Int|))\n  (= i 3)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 10) 16)\n  (= (as @15.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 3 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 3 3))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 10) 16)\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 10) 16)\n  (= (as @15.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 3 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 3 3))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 10) 16)\n)\n;; step 4\n(and\n  (= a (as @4.Array-Int-Int |Array-Int-Int|))\n  (= i 4)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 10) 17)\n  (= (as @16.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 4 (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 4 4))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 10) 17)\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 10) 17)\n  (= (as @16.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 4 (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 4 4))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 10) 17)\n)\n;; step 5\n(and\n  (= a (as @5.Array-Int-Int |Array-Int-Int|))\n  (= i 5)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 10) 18)\n  (= (as @17.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 5 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 5 5))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 10) 18)\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 10) 18)\n  (= (as @17.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 5 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 5 5))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 10) 18)\n)\n;; step 6\n(and\n  (= a (as @6.Array-Int-Int |Array-Int-Int|))\n  (= i 6)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 10) 19)\n  (= (as @18.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 6 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 6 6))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 10) 19)\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 10) 19)\n  (= (as @18.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 6 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 6 6))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 10) 19)\n)\n;; step 7\n(and\n  (= a (as @7.Array-Int-Int |Array-Int-Int|))\n  (= i 7)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 10) 20)\n  (= (as @19.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 7 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 7 7))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 10) 20)\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 10) 20)\n  (= (as @19.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 7 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 7 7))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 10) 20)\n)\n;; step 8\n(and\n  (= a (as @8.Array-Int-Int |Array-Int-Int|))\n  (= i 8)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 10) 21)\n  (= (as @20.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 8 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 8 8))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 10) 21)\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 10) 21)\n  (= (as @20.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 8 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 8 8))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 10) 21)\n)\n;; step 9\n(and\n  (= a (as @9.Array-Int-Int |Array-Int-Int|))\n  (= i 9)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10) 22)\n  (= (as @21.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 9 (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 9 9))\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10) 22)\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10) 22)\n  (= (as @21.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 9 (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 9 9))\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10) 22)\n)\n;; step 10\n(and\n  (= a (as @10.Array-Int-Int |Array-Int-Int|))\n  (= i 10)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10) 23)\n  (= (as @22.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10 10))\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10) 23)\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10) 23)\n  (= (as @22.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10 10))\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10) 23)\n)\n;; step 11\n(and\n  (= a (as @11.Array-Int-Int |Array-Int-Int|))\n  (= i 11)\n  (= N 11)\n  (= Z 10)\n  (= (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 10) 11)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 11 (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 11 11))\n  (= (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 10) 11)\n)\nsearch stats:\nnum_solve_calls = 302\nnum_solve_sat_calls = 235\nnum_solve_unsat_calls = 67\nnum_solver_reset = 0\nnum_added_cubes = 21\nnum_subsumed_cubes = 11\nnum_block = 138\nnum_refinements = 10\nnum_predicates = 14\nmax_cube_size = 3\navg_cube_size = 1.857\nsolve_time = 0.022\nsolve_sat_time = 0.020\nsolve_unsat_time = 0.002\nblock_time = 0.013\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.051\npropagate_time = 0.004\nrefinement_time = 0.033\nprove_time = 0.057\ntotal_time = nan\nunsafe"}},"run_time":80,"depth":10}]},{"example":"../examples/array2dim_rec1.vmt","result":[{"strategy":"abstract","result":{"Panic":"not yet implemented: Add Z3 function: Read-Int-Int"},"run_time":2,"depth":10}]},{"example":"../examples/array2dim_init_i.vmt","result":[{"strategy":"abstract","result":{"Panic":"not yet implemented: Add Z3 function: Read-Int-Int"},"run_time":2,"depth":10}]},{"example":"../examples/array_max_min_shift.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int a i) (- max min))) i) (+ (Read-Int-Int a i) (- max min)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int a i) (- max min))) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (<= min max)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= min max)\n)\n;; clause 2\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 3\n(or\n  (not (= pc 2))\n  (<= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 277\nnum_solve_sat_calls = 139\nnum_solve_unsat_calls = 138\nnum_solver_reset = 0\nnum_added_cubes = 20\nnum_subsumed_cubes = 13\nnum_block = 122\nnum_refinements = 2\nnum_predicates = 12\nmax_cube_size = 5\navg_cube_size = 3.800\nsolve_time = 0.032\nsolve_sat_time = 0.027\nsolve_unsat_time = 0.003\nblock_time = 0.022\ngeneralize_and_push_time = 0.014\nrec_block_time = 0.040\npropagate_time = 0.006\nrefinement_time = 0.016\nprove_time = 0.049\ntotal_time = nan\nsafe"}},"run_time":196,"depth":10}]},{"example":"../examples/array_init_select.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 1, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }"},"run_time":7,"depth":10}]},{"example":"../examples/array_tiling_pnr4.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 1, instantiations: [] }"},"run_time":7,"depth":10}]},{"example":"../examples/array_two_counters_init_var.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b j j) j) j)","(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))","(=> (not (= Z j)) (= (Read-Int-Int (Write-Int-Int b j j) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= i Z))\n  (not (<= 0 Z))\n  (= j Z)\n  (<= n i)\n  (<= (+ i (* (- 1) n)) (- 2))\n  (not (<= (+ i (+ j (* (- 1) n))) (- 1)))\n  (= Z (Read-Int-Int b Z))\n)\n;; clause 1\n(or\n  (<= n i)\n  (<= 0 j)\n)\n;; clause 2\n(or\n  (<= (- 1) (+ i (+ j (* (- 1) n))))\n)\n;; clause 3\n(or\n  (<= n Z)\n  (<= Z j)\n  (= Z (Read-Int-Int b Z))\n)\n;; clause 4\n(or\n  (not (<= n i))\n  (not (<= 0 Z))\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n)\n;; clause 5\n(or\n  (not (<= 0 Z))\n  (<= 0 j)\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n)\n;; clause 6\n(or\n  (<= (+ i (+ j (* (- 1) n))) (- 1))\n)\n;; clause 7\n(or\n  (not (<= 0 Z))\n  (= Z (Read-Int-Int a Z))\n  (<= i Z)\n)\n;; clause 8\n(or\n  (not (= (+ j (* (- 1) n)) (- 1)))\n  (= i 0)\n)\n;; clause 9\n(or\n  (not (<= 0 Z))\n  (= j Z)\n  (= (Read-Int-Int a Z) (Read-Int-Int b Z))\n  (<= n Z)\n  (= i Z)\n  (<= (+ i (* (- 1) n)) (- 2))\n)\n;; clause 10\n(or\n  (not (= i 0))\n  (= (+ j (* (- 1) n)) (- 1))\n)\nsearch stats:\nnum_solve_calls = 274\nnum_solve_sat_calls = 171\nnum_solve_unsat_calls = 103\nnum_solver_reset = 0\nnum_added_cubes = 33\nnum_subsumed_cubes = 22\nnum_block = 94\nnum_refinements = 7\nnum_predicates = 21\nmax_cube_size = 7\navg_cube_size = 3.455\nsolve_time = 0.052\nsolve_sat_time = 0.046\nsolve_unsat_time = 0.005\nblock_time = 0.024\ngeneralize_and_push_time = 0.017\nrec_block_time = 0.066\npropagate_time = 0.005\nrefinement_time = 0.024\nprove_time = 0.077\ntotal_time = nan\nsafe"}},"run_time":124,"depth":10}]},{"example":"../examples/array_init_depend.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i c) i) c)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i c) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= 0 Z))\n  (<= i Z)\n  (= c (Read-Int-Int a (+ i (- 1))))\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (= c (Read-Int-Int a Z))\n  (<= i Z)\n)\n;; clause 2\n(or\n  (= i 0)\n  (= c (Read-Int-Int a (+ i (- 1))))\n)\n;; clause 3\n(or\n  (<= i 1)\n  (= c (Read-Int-Int a (+ i (- 1))))\n)\n;; clause 4\n(or\n  (not (= i Z))\n  (not (<= 0 Z))\n  (= i 0)\n  (not (<= i 1))\n  (= c (Read-Int-Int a 0))\n)\n;; clause 5\n(or\n  (not (<= n i))\n  (not (<= 0 Z))\n  (= c (Read-Int-Int a Z))\n  (<= n Z)\n)\nsearch stats:\nnum_solve_calls = 173\nnum_solve_sat_calls = 102\nnum_solve_unsat_calls = 71\nnum_solver_reset = 0\nnum_added_cubes = 16\nnum_subsumed_cubes = 11\nnum_block = 65\nnum_refinements = 3\nnum_predicates = 12\nmax_cube_size = 5\navg_cube_size = 3.250\nsolve_time = 0.023\nsolve_sat_time = 0.018\nsolve_unsat_time = 0.004\nblock_time = 0.013\ngeneralize_and_push_time = 0.008\nrec_block_time = 0.025\npropagate_time = 0.003\nrefinement_time = 0.008\nprove_time = 0.032\ntotal_time = nan\nsafe"}},"run_time":68,"depth":10}]},{"example":"../examples/array_zero_sum_m2.vmt","result":[{"strategy":"abstract","result":{"Timeout":30000},"run_time":30005,"depth":10}]},{"example":"../examples/array_tiling_pr2.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 2, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"minval_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"minval_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"minval_next\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1_next\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"minval_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"minval_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"minval_next\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] } }] }"},"run_time":116,"depth":10}]},{"example":"../examples/array_init_double.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(= (Read-Int-Int (Write-Int-Int b i (- N i)) i) (- N i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (- N i)) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (= (+ N (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (= (+ N (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 70\nnum_solve_sat_calls = 45\nnum_solve_unsat_calls = 25\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 22\nnum_refinements = 2\nnum_predicates = 12\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.014\nsolve_sat_time = 0.011\nsolve_unsat_time = 0.002\nblock_time = 0.005\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.016\npropagate_time = 0.002\nrefinement_time = 0.006\nprove_time = 0.020\ntotal_time = nan\nsafe"}},"run_time":71,"depth":10}]},{"example":"../examples/array_tiling_rewrev.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":80,"depth":10}]},{"example":"../examples/array_init_doubl3.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) i) (+ (Read-Int-Int a i) j))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i i) N) (Read-Int-Int a N)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= i N))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 3\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= i N)\n)\n;; clause 4\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 2 Z)\n)\n;; clause 5\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= i 1)\n  (<= 2 Z)\n)\n;; clause 6\n(or\n  (not (= pc 2))\n  (<= i 1)\n  (<= 2 (+ i (* (- 1) j)))\n)\n;; clause 7\n(or\n  (not (= pc 2))\n  (= i 0)\n  (<= 2 (+ i (* (- 1) j)))\n)\n;; clause 8\n(or\n  (not (= i N))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (not (<= i 3))\n)\n;; clause 9\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (not (<= N 3))\n)\n;; clause 10\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (not (<= N 4))\n)\n;; clause 11\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (not (<= Z 2))\n)\n;; clause 12\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (= i Z)\n  (<= Z 0)\n  (<= N Z)\n  (<= i 2)\n  (not (<= N 4))\n)\n;; clause 13\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (= i Z)\n  (<= Z 0)\n  (<= i 1)\n  (not (<= Z 2))\n)\n;; clause 14\n(or\n  (not (= pc 2))\n  (<= i 2)\n  (<= j (- 1))\n)\n;; clause 15\n(or\n  (not (= pc 2))\n  (<= i 1)\n  (<= j (- 1))\n)\n;; clause 16\n(or\n  (not (= i Z))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ j (Read-Int-Int a i))) Z)))\n  (let ((.def_29 (Read-Int-Int a i))) (not (= (+ j (+ .def_29 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ j .def_29)) i)))) 0)))\n  (not (= pc 2))\n  (= i 0)\n)\n;; clause 17\n(or\n  (not (= i Z))\n  (not (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i (+ j (Read-Int-Int a i))) Z)))\n  (let ((.def_29 (Read-Int-Int a i))) (not (= (+ j (+ .def_29 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ j .def_29)) i)))) 0)))\n  (not (= pc 2))\n  (<= Z 0)\n)\n;; clause 18\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 4 Z)\n)\n;; clause 19\n(or\n  (not (= i N))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 6 N)\n)\n;; clause 20\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 6 N)\n)\n;; clause 21\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= i 3)\n  (<= Z 2)\n  (<= 4 Z)\n)\n;; clause 22\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 5 Z)\n)\n;; clause 23\n(or\n  (not (= i N))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 7 i)\n)\n;; clause 24\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 7 N)\n)\n;; clause 25\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (= i Z)\n  (<= Z 0)\n  (<= i 3)\n  (<= 5 Z)\n)\n;; clause 26\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 8 N)\n)\n;; clause 27\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 6 Z)\n)\n;; clause 28\n(or\n  (not (= i N))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 8 i)\n)\n;; clause 29\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (= i Z)\n  (<= Z 0)\n  (<= i 4)\n  (<= 6 Z)\n)\n;; clause 30\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 7 Z)\n)\n;; clause 31\n(or\n  (not (= i N))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 9 N)\n)\n;; clause 32\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 9 N)\n)\n;; clause 33\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (not (<= 7 i))\n  (<= 7 Z)\n)\n;; clause 34\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 8 Z)\n)\n;; clause 35\n(or\n  (not (= i N))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 10 i)\n)\n;; clause 36\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 10 N)\n)\n;; clause 37\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (= i Z)\n  (not (<= 7 i))\n  (not (<= 7 Z))\n  (<= 8 Z)\n)\n;; clause 38\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 9 Z)\n)\n;; clause 39\n(or\n  (not (= i N))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 11 i)\n)\n;; clause 40\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 11 N)\n)\n;; clause 41\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (= i Z)\n  (not (<= 8 i))\n  (not (<= 8 Z))\n  (<= 9 Z)\n)\n;; clause 42\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 12 N)\n)\n;; clause 43\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (= i Z)\n  (<= N Z)\n  (not (<= 10 i))\n  (not (<= 9 Z))\n  (<= 12 N)\n)\n;; clause 44\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 13 N)\n)\n;; clause 45\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 11 Z)\n)\n;; clause 46\n(or\n  (not (= i N))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 13 i)\n)\n;; clause 47\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (= i Z)\n  (<= Z 0)\n  (not (<= 10 i))\n  (<= 11 Z)\n)\n;; clause 48\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 12 Z)\n)\n;; clause 49\n(or\n  (not (= i N))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 14 N)\n)\n;; clause 50\n(or\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n  (<= 14 N)\n)\n;; clause 51\n(or\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (= i Z)\n  (<= Z 0)\n  (not (<= 11 i))\n  (<= 12 Z)\n)\n;; clause 52\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (not (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0))\n  (<= Z 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 7410\nnum_solve_sat_calls = 3485\nnum_solve_unsat_calls = 3925\nnum_solver_reset = 1\nnum_added_cubes = 1014\nnum_subsumed_cubes = 1144\nnum_block = 3939\nnum_refinements = 30\nnum_predicates = 52\nmax_cube_size = 7\navg_cube_size = 4.674\nsolve_time = 2.039\nsolve_sat_time = 1.806\nsolve_unsat_time = 0.232\nblock_time = 1.612\ngeneralize_and_push_time = 0.535\nrec_block_time = 2.238\npropagate_time = 0.698\nrefinement_time = 0.833\nprove_time = 2.983\ntotal_time = nan\nsafe"}},"run_time":3104,"depth":10}]},{"example":"../examples/array_tiling_tcpy.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int acopy1 i (Read-Int-Int a i)) Z) (Read-Int-Int acopy1 Z)))","(= (Read-Int-Int (Write-Int-Int acopy1 i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(=> (not (= Z (- (* 2 S) (+ i 1)))) (= (Read-Int-Int (Write-Int-Int acopy (- (* 2 S) (+ i 1)) (Read-Int-Int a (- (* 2 S) (+ i 1)))) Z) (Read-Int-Int acopy Z)))","(= (Read-Int-Int (Write-Int-Int acopy (- (* 2 S) (+ i 1)) (Read-Int-Int a (- (* 2 S) (+ i 1)))) (- (* 2 S) (+ i 1))) (Read-Int-Int a (- (* 2 S) (+ i 1))))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= (+ (* 2 S) (* (- 1) Z)) 0)\n  (<= (+ i (+ (* (- 2) S) Z)) (- 1))\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 56\nnum_solve_sat_calls = 30\nnum_solve_unsat_calls = 26\nnum_solver_reset = 0\nnum_added_cubes = 7\nnum_subsumed_cubes = 4\nnum_block = 17\nnum_refinements = 1\nnum_predicates = 14\nmax_cube_size = 3\navg_cube_size = 2.714\nsolve_time = 0.015\nsolve_sat_time = 0.012\nsolve_unsat_time = 0.002\nblock_time = 0.006\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.014\npropagate_time = 0.001\nrefinement_time = 0.003\nprove_time = 0.018\ntotal_time = nan\nsafe"}},"run_time":84,"depth":10}]},{"example":"../examples/array_init_pair_symmetr2.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int c i (- (Read-Int-Int a i) (Read-Int-Int b i))) i) (- (Read-Int-Int a i) (Read-Int-Int b i)))","(= (Read-Int-Int (Write-Int-Int a i x) i) x)","(= (Read-Int-Int (Write-Int-Int b i y) i) y)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i y) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i x) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (- (Read-Int-Int a i) (Read-Int-Int b i))) Z) (Read-Int-Int c Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= Z 0)\n  (<= i Z)\n  (= y (Read-Int-Int b Z))\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= y (Read-Int-Int b Z))\n)\n;; clause 2\n(or\n  (<= Z 0)\n  (<= i Z)\n  (= x (Read-Int-Int a Z))\n)\n;; clause 3\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= x (Read-Int-Int a Z))\n)\n;; clause 4\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int b Z) (* (- 1) (Read-Int-Int a Z))) (- 1))\n)\n;; clause 5\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= y (Read-Int-Int b Z))\n)\n;; clause 6\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= x (Read-Int-Int a Z))\n)\n;; clause 7\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (not (<= (Read-Int-Int c Z) 0))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 8\n(or\n  (not (= pc 2))\n  (not (<= (Read-Int-Int c Z) 0))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 438\nnum_solve_sat_calls = 210\nnum_solve_unsat_calls = 228\nnum_solver_reset = 0\nnum_added_cubes = 41\nnum_subsumed_cubes = 34\nnum_block = 190\nnum_refinements = 4\nnum_predicates = 18\nmax_cube_size = 5\navg_cube_size = 3.756\nsolve_time = 0.069\nsolve_sat_time = 0.061\nsolve_unsat_time = 0.007\nblock_time = 0.045\ngeneralize_and_push_time = 0.030\nrec_block_time = 0.090\npropagate_time = 0.008\nrefinement_time = 0.032\nprove_time = 0.104\ntotal_time = nan\nsafe"}},"run_time":255,"depth":10}]},{"example":"../examples/array_init_pair_symmetr3.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (+ N x)) i) (+ N x))","(= (Read-Int-Int (Write-Int-Int b i x) i) x)","(= (Read-Int-Int (Write-Int-Int c i (- (Read-Int-Int a i) (Read-Int-Int b i))) i) (- (Read-Int-Int a i) (Read-Int-Int b i)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int b i x) N) (Read-Int-Int b N)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ N x)) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (- (Read-Int-Int a i) (Read-Int-Int b i))) Z) (Read-Int-Int c Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i x) Z) (Read-Int-Int b Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (+ N x)) N) (Read-Int-Int a N)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= i N)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ N (+ (* (- 1) (Read-Int-Int a Z)) (Read-Int-Int b Z))) 0)\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= 0 (+ N (+ (* (- 1) (Read-Int-Int a Z)) (Read-Int-Int b Z))))\n)\n;; clause 3\n(or\n  (<= Z 0)\n  (<= i Z)\n  (<= (+ N (+ (* (- 1) (Read-Int-Int a Z)) (Read-Int-Int b Z))) 0)\n)\n;; clause 4\n(or\n  (<= Z 0)\n  (<= i Z)\n  (<= 0 (+ N (+ (* (- 1) (Read-Int-Int a Z)) (Read-Int-Int b Z))))\n)\n;; clause 5\n(or\n  (not (= (+ x (+ N (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ x N)) i)))) 0))\n  (not (= x (Read-Int-Int (Write-Int-Int b i x) i)))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i x) Z) (Read-Int-Int b Z)))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int a i (+ x N)) Z) (Read-Int-Int a Z))\n)\n;; clause 6\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ N (+ (* (- 1) (Read-Int-Int a Z)) (Read-Int-Int b Z))) 0)\n)\n;; clause 7\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (<= 0 (+ N (+ (* (- 1) (Read-Int-Int a Z)) (Read-Int-Int b Z))))\n)\n;; clause 8\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (= N (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 9\n(or\n  (not (= pc 2))\n  (= N (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 496\nnum_solve_sat_calls = 237\nnum_solve_unsat_calls = 259\nnum_solver_reset = 0\nnum_added_cubes = 50\nnum_subsumed_cubes = 39\nnum_block = 219\nnum_refinements = 2\nnum_predicates = 21\nmax_cube_size = 8\navg_cube_size = 4.000\nsolve_time = 0.129\nsolve_sat_time = 0.115\nsolve_unsat_time = 0.012\nblock_time = 0.088\ngeneralize_and_push_time = 0.065\nrec_block_time = 0.124\npropagate_time = 0.020\nrefinement_time = 0.020\nprove_time = 0.152\ntotal_time = nan\nsafe"}},"run_time":277,"depth":10}]},{"example":"../examples/array_init_nondet_vars.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (+ i j k)) i) (+ i j k))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ i j k)) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= (+ Z (* (- 1) (Read-Int-Int a Z))) (- 2))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 1\n(or\n  (not (<= j 0))\n)\n;; clause 2\n(or\n  (not (<= n i))\n  (<= (+ Z (* (- 1) (Read-Int-Int a Z))) (- 2))\n  (<= Z 0)\n  (<= n Z)\n)\nsearch stats:\nnum_solve_calls = 50\nnum_solve_sat_calls = 27\nnum_solve_unsat_calls = 23\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 3\nnum_block = 14\nnum_refinements = 1\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 2.667\nsolve_time = 0.006\nsolve_sat_time = 0.005\nsolve_unsat_time = 0.001\nblock_time = 0.002\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.006\npropagate_time = 0.000\nrefinement_time = 0.002\nprove_time = 0.008\ntotal_time = nan\nsafe"}},"run_time":47,"depth":10}]},{"example":"../examples/array_min_and_copy_shift_sum_add.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":234,"depth":10}]},{"example":"../examples/array_init_doubl2.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) i) (+ (Read-Int-Int a i) j))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) j)) N) (Read-Int-Int a N)))","(= (Read-Int-Int (Write-Int-Int a i i) i) i)"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= i N)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (not (<= 0 (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z)))))\n  (= i Z)\n  (<= Z 0)\n  (<= (+ i (* (- 1) Z)) (- 1))\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (not (<= 0 (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z)))))\n  (<= Z 0)\n  (<= N Z)\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 3\n(or\n  (not (= i N))\n  (not (<= 0 (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z)))))\n  (<= Z 0)\n  (<= N Z)\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 4\n(or\n  (not (<= 0 (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z)))))\n  (= i Z)\n  (<= Z 0)\n  (= Z (Read-Int-Int a Z))\n  (<= (+ i (* (- 1) Z)) (- 1))\n)\n;; clause 5\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (not (<= 0 (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z)))))\n  (<= Z 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 611\nnum_solve_sat_calls = 306\nnum_solve_unsat_calls = 305\nnum_solver_reset = 0\nnum_added_cubes = 45\nnum_subsumed_cubes = 34\nnum_block = 268\nnum_refinements = 5\nnum_predicates = 19\nmax_cube_size = 6\navg_cube_size = 4.467\nsolve_time = 0.129\nsolve_sat_time = 0.115\nsolve_unsat_time = 0.013\nblock_time = 0.090\ngeneralize_and_push_time = 0.065\nrec_block_time = 0.151\npropagate_time = 0.016\nrefinement_time = 0.038\nprove_time = 0.172\ntotal_time = nan\nsafe"}},"run_time":300,"depth":10}]},{"example":"../examples/array_standard_password.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= j 0)\n)\nsearch stats:\nnum_solve_calls = 10\nnum_solve_sat_calls = 2\nnum_solve_unsat_calls = 8\nnum_solver_reset = 0\nnum_added_cubes = 2\nnum_subsumed_cubes = 1\nnum_block = 2\nnum_refinements = 0\nnum_predicates = 5\nmax_cube_size = 1\navg_cube_size = 1.000\nsolve_time = 0.001\nsolve_sat_time = 0.000\nsolve_unsat_time = 0.001\nblock_time = 0.000\ngeneralize_and_push_time = 0.000\nrec_block_time = 0.000\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.001\ntotal_time = nan\nsafe"}},"run_time":21,"depth":10}]},{"example":"../examples/array_tiling_pr3.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 2, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(3))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val3\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(3))] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val3\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(3))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(3))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val3\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(3))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(3))] }] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(3))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(3))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val3\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(2))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CC\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(3))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(3))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val3\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1_next\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1_next\") } })] }] }] }, Forall { vars: [(Symbol(\"PH3\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"val1\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } })] }] }] } }] }"},"run_time":164,"depth":10}]},{"example":"../examples/array_init_tuples_relative.vmt","result":[{"strategy":"abstract","result":{"Timeout":30000},"run_time":30005,"depth":10}]},{"example":"../examples/array_init_nondet_vars2.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (+ i (* j k))) i) (+ i (* j k)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ i (* j k))) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= 0 k))\n)\n;; clause 1\n(or\n  (not (<= n i))\n  (not (<= Z (Read-Int-Int a Z)))\n  (<= Z 0)\n  (<= n Z)\n)\n;; clause 2\n(or\n  (not (<= j 0))\n)\n;; clause 3\n(or\n  (not (<= Z (Read-Int-Int a Z)))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 67\nnum_solve_sat_calls = 37\nnum_solve_unsat_calls = 30\nnum_solver_reset = 0\nnum_added_cubes = 9\nnum_subsumed_cubes = 5\nnum_block = 20\nnum_refinements = 1\nnum_predicates = 11\nmax_cube_size = 4\navg_cube_size = 2.444\nsolve_time = 0.060\nsolve_sat_time = 0.054\nsolve_unsat_time = 0.005\nblock_time = 0.021\ngeneralize_and_push_time = 0.027\nrec_block_time = 0.055\npropagate_time = 0.002\nrefinement_time = 0.002\nprove_time = 0.062\ntotal_time = nan\nsafe"}},"run_time":126,"depth":10}]},{"example":"../examples/array_init_var_plus_ind3.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i j) i) j)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= i 1)\n  (<= j (- 1))\n)\n;; clause 1\n(or\n  (<= (Read-Int-Int a Z) 0)\n  (<= Z 3)\n  (<= i Z)\n)\n;; clause 2\n(or\n  (<= i 2)\n  (<= j (- 1))\n)\n;; clause 3\n(or\n  (= i 0)\n  (<= 1 (+ i (* (- 1) j)))\n)\n;; clause 4\n(or\n  (= j 0)\n  (<= j (- 1))\n)\n;; clause 5\n(or\n  (= j 0)\n  (not (<= i 1))\n)\n;; clause 6\n(or\n  (not (= j 0))\n  (<= i 1)\n)\n;; clause 7\n(or\n  (not (= i 0))\n  (= j 0)\n)\n;; clause 8\n(or\n  (not (= j (Read-Int-Int (Write-Int-Int a i j) i)))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))\n  (<= (Read-Int-Int a Z) 0)\n)\nsearch stats:\nnum_solve_calls = 350\nnum_solve_sat_calls = 198\nnum_solve_unsat_calls = 152\nnum_solver_reset = 0\nnum_added_cubes = 52\nnum_subsumed_cubes = 47\nnum_block = 145\nnum_refinements = 4\nnum_predicates = 12\nmax_cube_size = 5\navg_cube_size = 2.250\nsolve_time = 0.034\nsolve_sat_time = 0.029\nsolve_unsat_time = 0.004\nblock_time = 0.021\ngeneralize_and_push_time = 0.010\nrec_block_time = 0.043\npropagate_time = 0.007\nrefinement_time = 0.016\nprove_time = 0.052\ntotal_time = nan\nsafe"}},"run_time":98,"depth":10}]},{"example":"../examples/array_init_disj_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i 0) i) 0)","(= (Read-Int-Int (Write-Int-Int a i 2) i) 2)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 2) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 0) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (= (Read-Int-Int a Z) 1))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (= (Read-Int-Int a Z) 1))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 71\nnum_solve_sat_calls = 42\nnum_solve_unsat_calls = 29\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 26\nnum_refinements = 2\nnum_predicates = 13\nmax_cube_size = 4\navg_cube_size = 2.667\nsolve_time = 0.009\nsolve_sat_time = 0.007\nsolve_unsat_time = 0.001\nblock_time = 0.004\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.011\npropagate_time = 0.001\nrefinement_time = 0.005\nprove_time = 0.014\ntotal_time = nan\nsafe"}},"run_time":81,"depth":10}]},{"example":"../examples/array_bubble_sort_rev.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"ERROR computing witness\nsearch stats:\nnum_solve_calls = 3\nnum_solve_sat_calls = 0\nnum_solve_unsat_calls = 3\nnum_solver_reset = 0\nnum_added_cubes = 0\nnum_subsumed_cubes = 0\nnum_block = 0\nnum_refinements = 0\nnum_predicates = 2\nmax_cube_size = 0\navg_cube_size = 0.000\nsolve_time = 0.001\nsolve_sat_time = 0.000\nsolve_unsat_time = 0.001\nblock_time = 0.000\ngeneralize_and_push_time = 0.000\nrec_block_time = 0.000\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.001\ntotal_time = nan\nsafe"}},"run_time":66,"depth":10}]},{"example":"../examples/array_split_20.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 1, instantiations: [] }"},"run_time":7,"depth":10}]},{"example":"../examples/array_split_08.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"ConstArr-Int-Int\") } }, arguments: [Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"CONST1\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"ConstArr-Int-Int\") } }, arguments: [Constant(Numeral(0))] }, Constant(Numeral(0))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"ConstArr-Int-Int\") } }, arguments: [Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }] }"},"run_time":34,"depth":10}]},{"example":"../examples/array_init_disj.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i 0) i) 0)","(= (Read-Int-Int (Write-Int-Int a i 2) i) 2)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 2) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 0) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (= (Read-Int-Int a Z) 1))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (= (Read-Int-Int a Z) 1))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 70\nnum_solve_sat_calls = 45\nnum_solve_unsat_calls = 25\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 22\nnum_refinements = 2\nnum_predicates = 12\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.009\nsolve_sat_time = 0.007\nsolve_unsat_time = 0.001\nblock_time = 0.003\ngeneralize_and_push_time = 0.003\nrec_block_time = 0.011\npropagate_time = 0.001\nrefinement_time = 0.005\nprove_time = 0.014\ntotal_time = nan\nsafe"}},"run_time":72,"depth":10}]},{"example":"../examples/array_split_09.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"counterexample\n;; step 0\n(and\n  (= c (as @2.Array-Int-Int |Array-Int-Int|))\n  (= i 0)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 3))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) (- 4))\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (- 7)))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) (- 1)) 24)\n  (= (as @35.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) (- 1))))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 10) 13)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 0) (- 3))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 0) (- 4))\n  (= (as @3.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (- 7)))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) (- 1)) 24)\n  (= (as @35.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 0 (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) (- 1))))\n  (= (Read-Int-Int (as @2.Array-Int-Int |Array-Int-Int|) 10) 13)\n)\n;; step 1\n(and\n  (= c (as @3.Array-Int-Int |Array-Int-Int|))\n  (= i 1)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) (- 1))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) (- 2))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 (- 2)))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0) 25)\n  (= (as @36.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 10) 12)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 1) (- 1))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 1) (- 2))\n  (= (as @4.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 (- 2)))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0) 25)\n  (= (as @36.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 1 (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 0)))\n  (= (Read-Int-Int (as @3.Array-Int-Int |Array-Int-Int|) 10) 12)\n)\n;; step 2\n(and\n  (= c (as @4.Array-Int-Int |Array-Int-Int|))\n  (= i 2)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 5))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2) (- 6))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 (- 9)))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 1) 26)\n  (= (as @37.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 10) 14)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 2) (- 5))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 2) (- 6))\n  (= (as @5.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 (- 9)))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 1) 26)\n  (= (as @37.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 2 (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 1)))\n  (= (Read-Int-Int (as @4.Array-Int-Int |Array-Int-Int|) 10) 14)\n)\n;; step 3\n(and\n  (= c (as @5.Array-Int-Int |Array-Int-Int|))\n  (= i 3)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 7))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 3) (- 8))\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 (- 12)))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2) 27)\n  (= (as @38.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 10) 15)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 3) (- 7))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 3) (- 8))\n  (= (as @6.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 (- 12)))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2) 27)\n  (= (as @38.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 3 (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 2)))\n  (= (Read-Int-Int (as @5.Array-Int-Int |Array-Int-Int|) 10) 15)\n)\n;; step 4\n(and\n  (= c (as @6.Array-Int-Int |Array-Int-Int|))\n  (= i 4)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 4) (- 9))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 4) (- 10))\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 4 (- 15)))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 3) 28)\n  (= (as @39.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 4 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 10) 16)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 4) (- 9))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 4) (- 10))\n  (= (as @7.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 4 (- 15)))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 3) 28)\n  (= (as @39.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 4 (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 3)))\n  (= (Read-Int-Int (as @6.Array-Int-Int |Array-Int-Int|) 10) 16)\n)\n;; step 5\n(and\n  (= c (as @7.Array-Int-Int |Array-Int-Int|))\n  (= i 5)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 5) (- 11))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 5) (- 12))\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 5 (- 18)))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 4) 29)\n  (= (as @40.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 5 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 4)))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 10) 17)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 5) (- 11))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 5) (- 12))\n  (= (as @8.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 5 (- 18)))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 4) 29)\n  (= (as @40.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 5 (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 4)))\n  (= (Read-Int-Int (as @7.Array-Int-Int |Array-Int-Int|) 10) 17)\n)\n;; step 6\n(and\n  (= c (as @8.Array-Int-Int |Array-Int-Int|))\n  (= i 6)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 6) (- 13))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 6) (- 14))\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 6 (- 21)))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 5) 30)\n  (= (as @41.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 6 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 5)))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 10) 18)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 6) (- 13))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 6) (- 14))\n  (= (as @9.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 6 (- 21)))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 5) 30)\n  (= (as @41.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 6 (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 5)))\n  (= (Read-Int-Int (as @8.Array-Int-Int |Array-Int-Int|) 10) 18)\n)\n;; step 7\n(and\n  (= c (as @9.Array-Int-Int |Array-Int-Int|))\n  (= i 7)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 7) (- 15))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 7) (- 16))\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 7 (- 24)))\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 6) 31)\n  (= (as @42.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 7 (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 6)))\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10) 19)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 7) (- 15))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 7) (- 16))\n  (= (as @10.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 7 (- 24)))\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 6) 31)\n  (= (as @42.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 7 (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 6)))\n  (= (Read-Int-Int (as @9.Array-Int-Int |Array-Int-Int|) 10) 19)\n)\n;; step 8\n(and\n  (= c (as @10.Array-Int-Int |Array-Int-Int|))\n  (= i 8)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 8) (- 17))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 8) (- 18))\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 8 (- 27)))\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 7) 32)\n  (= (as @43.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 8 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 7)))\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10) 20)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 8) (- 17))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 8) (- 18))\n  (= (as @11.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 8 (- 27)))\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 7) 32)\n  (= (as @43.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 8 (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 7)))\n  (= (Read-Int-Int (as @10.Array-Int-Int |Array-Int-Int|) 10) 20)\n)\n;; step 9\n(and\n  (= c (as @11.Array-Int-Int |Array-Int-Int|))\n  (= i 9)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 9) (- 19))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 9) (- 20))\n  (= (as @12.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 9 (- 30)))\n  (= (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 8) 33)\n  (= (as @44.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 9 (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 8)))\n  (= (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 10) 21)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 9) (- 19))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 9) (- 20))\n  (= (as @12.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 9 (- 30)))\n  (= (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 8) 33)\n  (= (as @44.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 9 (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 8)))\n  (= (Read-Int-Int (as @11.Array-Int-Int |Array-Int-Int|) 10) 21)\n)\n;; step 10\n(and\n  (= c (as @12.Array-Int-Int |Array-Int-Int|))\n  (= i 10)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) (- 21))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10) (- 22))\n  (= (Write-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 10 (- 33)) (as @34.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 9) 34)\n  (= (as @13.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 10 (Read-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 9)))\n  (= (Read-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 10) 22)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 10) (- 21))\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 10) (- 22))\n  (= (Write-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 10 (- 33)) (as @34.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 9) 34)\n  (= (as @13.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 10 (Read-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 9)))\n  (= (Read-Int-Int (as @12.Array-Int-Int |Array-Int-Int|) 10) 22)\n)\n;; step 11\n(and\n  (= c (as @13.Array-Int-Int |Array-Int-Int|))\n  (= i 11)\n  (= a (as @0.Array-Int-Int |Array-Int-Int|))\n  (= b (as @1.Array-Int-Int |Array-Int-Int|))\n  (= N 11)\n  (= Z 10)\n  (= (ConstArr-Int-Int 1) (as @0.Array-Int-Int |Array-Int-Int|))\n  (= (ConstArr-Int-Int (- 1)) (as @1.Array-Int-Int |Array-Int-Int|))\n  (= (Read-Int-Int (as @0.Array-Int-Int |Array-Int-Int|) 11) 0)\n  (= (Read-Int-Int (as @1.Array-Int-Int |Array-Int-Int|) 11) 0)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @13.Array-Int-Int |Array-Int-Int|) 11 11))\n  (= (Read-Int-Int (as @13.Array-Int-Int |Array-Int-Int|) 10) 23)\n  (= (as @0.Array-Int-Int |Array-Int-Int|) (Write-Int-Int (as @13.Array-Int-Int |Array-Int-Int|) 11 (Read-Int-Int (as @13.Array-Int-Int |Array-Int-Int|) 10)))\n  (= (Read-Int-Int (as @13.Array-Int-Int |Array-Int-Int|) 10) 23)\n)\nsearch stats:\nnum_solve_calls = 302\nnum_solve_sat_calls = 235\nnum_solve_unsat_calls = 67\nnum_solver_reset = 0\nnum_added_cubes = 21\nnum_subsumed_cubes = 11\nnum_block = 138\nnum_refinements = 10\nnum_predicates = 16\nmax_cube_size = 3\navg_cube_size = 1.857\nsolve_time = 0.027\nsolve_sat_time = 0.025\nsolve_unsat_time = 0.002\nblock_time = 0.016\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.069\npropagate_time = 0.005\nrefinement_time = 0.047\nprove_time = 0.077\ntotal_time = nan\nunsafe"}},"run_time":112,"depth":10}]},{"example":"../examples/array_split_21.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 5, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Constant(Numeral(0)), Constant(Numeral(0))] }, Constant(Numeral(0))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Constant(Numeral(0))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Constant(Numeral(0)), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } }), Constant(Numeral(0)), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Constant(Numeral(1))] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(1)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Constant(Numeral(1))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Forall { vars: [(Symbol(\"PH3\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH3\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }] } }] }"},"run_time":204,"depth":10}]},{"example":"../examples/array_init_nondet_vars_plus_ind.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (+ i x)) i) (+ i x))","(= (Read-Int-Int (Write-Int-Int a i (+ i y)) i) (+ i y))","(= (Read-Int-Int (Write-Int-Int c i (- (Read-Int-Int a i) (Read-Int-Int b i))) i) (- (Read-Int-Int a i) (Read-Int-Int b i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ i y)) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (- (Read-Int-Int a i) (Read-Int-Int b i))) Z) (Read-Int-Int c Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int b i (+ i x)) N) (Read-Int-Int b N)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (+ i x)) Z) (Read-Int-Int b Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (+ i y)) N) (Read-Int-Int a N)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 2))\n  (not (<= 0 (Read-Int-Int c Z)))\n  (= i Z)\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1))\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (not (<= 0 (Read-Int-Int c Z)))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 3\n(or\n  (<= Z 0)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1))\n  (<= i Z)\n)\n;; clause 4\n(or\n  (let ((.def_38 (Read-Int-Int a i))) (not (= (+ .def_38 (+ (* (- 1) (Read-Int-Int b i)) (* (- 1) (Read-Int-Int (Write-Int-Int c i (+ .def_38 (* (- 1) (Read-Int-Int b i)))) i)))) 0)))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (* (- 1) (Read-Int-Int b i)))) Z) (Read-Int-Int c Z)))\n  (not (= pc 2))\n  (not (<= 0 (Read-Int-Int c Z)))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 5\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1))\n)\n;; clause 6\n(or\n  (= i Z)\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1))\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 7\n(or\n  (not (= pc 2))\n  (<= 1 (+ x (* (- 1) y)))\n)\n;; clause 8\n(or\n  (not (= pc 2))\n  (= i 0)\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1))\n)\n;; clause 9\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= i N)\n)\n;; clause 10\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1))\n  (<= 3 N)\n)\n;; clause 11\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1))\n  (<= 3 N)\n)\n;; clause 12\n(or\n  (not (= pc 2))\n  (not (<= 0 (Read-Int-Int c Z)))\n  (<= Z 0)\n  (not (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1)))\n  (<= i Z)\n)\n;; clause 13\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1))\n  (not (<= N 3))\n)\n;; clause 14\n(or\n  (= i Z)\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1))\n  (<= (+ i (* (- 1) N)) (- 2))\n  (not (<= N 3))\n)\n;; clause 15\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (not (<= 0 (Read-Int-Int c Z)))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 16\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= i 1)\n  (<= (+ (Read-Int-Int a Z) (* (- 1) (Read-Int-Int b Z))) (- 1))\n)\nsearch stats:\nnum_solve_calls = 1109\nnum_solve_sat_calls = 544\nnum_solve_unsat_calls = 565\nnum_solver_reset = 0\nnum_added_cubes = 92\nnum_subsumed_cubes = 80\nnum_block = 529\nnum_refinements = 6\nnum_predicates = 24\nmax_cube_size = 7\navg_cube_size = 4.554\nsolve_time = 0.414\nsolve_sat_time = 0.380\nsolve_unsat_time = 0.032\nblock_time = 0.307\ngeneralize_and_push_time = 0.190\nrec_block_time = 0.402\npropagate_time = 0.084\nrefinement_time = 0.076\nprove_time = 0.505\ntotal_time = nan\nsafe"}},"run_time":707,"depth":10}]},{"example":"../examples/array_min_swap_and_shift.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) Z (Read-Int-Int a i)) Z) (Read-Int-Int a i))","(=> (not (= i_next Z)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) Z (Read-Int-Int a i)) i_next) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) i_next)))","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) i) (+ (Read-Int-Int a j) k))","(=> (not (= Z j)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) j (Read-Int-Int a i)) Z) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) Z)))","(=> (not (= i_next j)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) j (Read-Int-Int a i)) i_next) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) i_next)))","(=> (not (= j_next Z)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) Z (Read-Int-Int a i)) j_next) (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) j_next)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) N) (Read-Int-Int a N)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) Z) (Read-Int-Int a Z)))","(=> (not (= j_next i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a j) k)) j_next) (Read-Int-Int a j_next)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= i j_next))\n  (= (+ j (* (- 1) i)) 1)\n  (= j i_next)\n)\n;; clause 1\n(or\n  (not (<= 0 k))\n)\n;; clause 2\n(or\n  (not (<= N j))\n  (not (<= (Read-Int-Int a Z) (Read-Int-Int a i)))\n  (<= Z i)\n  (<= N Z)\n)\n;; clause 3\n(or\n  (not (<= (Read-Int-Int a Z) (Read-Int-Int a i)))\n  (<= Z i)\n  (<= j Z)\n)\n;; clause 4\n(or\n  (not (<= (Read-Int-Int a Z) (Read-Int-Int a i)))\n  (= j Z)\n  (<= Z i)\n  (<= N Z)\n  (<= (+ j (* (- 1) N)) (- 2))\n)\nsearch stats:\nnum_solve_calls = 121\nnum_solve_sat_calls = 65\nnum_solve_unsat_calls = 56\nnum_solver_reset = 0\nnum_added_cubes = 14\nnum_subsumed_cubes = 10\nnum_block = 40\nnum_refinements = 2\nnum_predicates = 25\nmax_cube_size = 5\navg_cube_size = 3.143\nsolve_time = 0.041\nsolve_sat_time = 0.034\nsolve_unsat_time = 0.005\nblock_time = 0.017\ngeneralize_and_push_time = 0.013\nrec_block_time = 0.042\npropagate_time = 0.004\nrefinement_time = 0.012\nprove_time = 0.052\ntotal_time = nan\nsafe"}},"run_time":265,"depth":10}]},{"example":"../examples/array_init_var_plus_ind2.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i j) i) j)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= k 0)\n  (<= 4 (+ i (+ j (* (- 1) k))))\n)\n;; clause 1\n(or\n  (not (= j (Read-Int-Int (Write-Int-Int a i j) i)))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))\n  (<= k (Read-Int-Int a Z))\n)\n;; clause 2\n(or\n  (= j 0)\n  (<= 4 (+ i (+ j (* (- 1) k))))\n)\n;; clause 3\n(or\n  (<= k (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 4\n(or\n  (= i 0)\n  (<= 1 i)\n)\n;; clause 5\n(or\n  (not (= i 0))\n  (= k 0)\n)\nsearch stats:\nnum_solve_calls = 254\nnum_solve_sat_calls = 147\nnum_solve_unsat_calls = 107\nnum_solver_reset = 0\nnum_added_cubes = 23\nnum_subsumed_cubes = 15\nnum_block = 102\nnum_refinements = 2\nnum_predicates = 11\nmax_cube_size = 6\navg_cube_size = 2.739\nsolve_time = 0.029\nsolve_sat_time = 0.024\nsolve_unsat_time = 0.004\nblock_time = 0.016\ngeneralize_and_push_time = 0.010\nrec_block_time = 0.031\npropagate_time = 0.004\nrefinement_time = 0.008\nprove_time = 0.038\ntotal_time = nan\nsafe"}},"run_time":83,"depth":10}]},{"example":"../examples/array_tiling_pr4.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: TooManyRefinements { n_refines: 10, depth: 1 }"},"run_time":132,"depth":10}]},{"example":"../examples/array_init_increm_twice_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) (+ (Read-Int-Int a i) 1))","(= (Read-Int-Int (Write-Int-Int a i 0) i) 0)","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) N) (Read-Int-Int a N)))","(=> (not (= i i_next)) (= (Read-Int-Int (Write-Int-Int a_next i_next 0) i) (Read-Int-Int a_next i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 0) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) 1)) i) (+ (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) 1))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) 1)) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (= i i_next)\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (= i 0)\n)\nsearch stats:\nnum_solve_calls = 82\nnum_solve_sat_calls = 42\nnum_solve_unsat_calls = 40\nnum_solver_reset = 0\nnum_added_cubes = 9\nnum_subsumed_cubes = 4\nnum_block = 34\nnum_refinements = 0\nnum_predicates = 19\nmax_cube_size = 4\navg_cube_size = 2.000\nsolve_time = 0.017\nsolve_sat_time = 0.014\nsolve_unsat_time = 0.002\nblock_time = 0.009\ngeneralize_and_push_time = 0.003\nrec_block_time = 0.009\npropagate_time = 0.004\nrefinement_time = 0.000\nprove_time = 0.017\ntotal_time = nan\nsafe"}},"run_time":165,"depth":10}]},{"example":"../examples/array_tiling_tcpy2.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int acopy3 i (Read-Int-Int a i)) Z) (Read-Int-Int acopy3 Z)))","(= (Read-Int-Int (Write-Int-Int acopy3 i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(=> (not (= Z (- (* 2 S) (+ i 1)))) (= (Read-Int-Int (Write-Int-Int acopy2 (- (* 2 S) (+ i 1)) (Read-Int-Int a (- (* 2 S) (+ i 1)))) Z) (Read-Int-Int acopy2 Z)))","(= (Read-Int-Int (Write-Int-Int acopy2 (- (* 2 S) (+ i 1)) (Read-Int-Int a (- (* 2 S) (+ i 1)))) (- (* 2 S) (+ i 1))) (Read-Int-Int a (- (* 2 S) (+ i 1))))","(=> (not (= Z (- (* 3 S) (+ i 1)))) (= (Read-Int-Int (Write-Int-Int acopy1 (- (* 3 S) (+ i 1)) (Read-Int-Int a (- (* 3 S) (+ i 1)))) Z) (Read-Int-Int acopy1 Z)))","(= (Read-Int-Int (Write-Int-Int acopy1 (- (* 3 S) (+ i 1)) (Read-Int-Int a (- (* 3 S) (+ i 1)))) (- (* 3 S) (+ i 1))) (Read-Int-Int a (- (* 3 S) (+ i 1))))","(=> (not (= Z (- (* 4 S) (+ i 1)))) (= (Read-Int-Int (Write-Int-Int acopy0 (- (* 4 S) (+ i 1)) (Read-Int-Int a (- (* 4 S) (+ i 1)))) Z) (Read-Int-Int acopy0 Z)))","(= (Read-Int-Int (Write-Int-Int acopy0 (- (* 4 S) (+ i 1)) (Read-Int-Int a (- (* 4 S) (+ i 1)))) (- (* 4 S) (+ i 1))) (Read-Int-Int a (- (* 4 S) (+ i 1))))","(=> (not (= Z (- (* 5 S) (+ i 1)))) (= (Read-Int-Int (Write-Int-Int acopy (- (* 5 S) (+ i 1)) (Read-Int-Int a (- (* 5 S) (+ i 1)))) Z) (Read-Int-Int acopy Z)))","(= (Read-Int-Int (Write-Int-Int acopy (- (* 5 S) (+ i 1)) (Read-Int-Int a (- (* 5 S) (+ i 1)))) (- (* 5 S) (+ i 1))) (Read-Int-Int a (- (* 5 S) (+ i 1))))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= (+ i (+ (* (- 5) S) Z)) (- 1)))\n  (let ((.def_105 (Read-Int-Int a (+ (+ (* (- 1) i) (* 5 S)) (- 1))))) (not (= .def_105 (Read-Int-Int (Write-Int-Int acopy (+ (+ (* (- 1) i) (* 5 S)) (- 1)) .def_105) (+ (+ (* (- 1) i) (* 5 S)) (- 1))))))\n  (not (<= S i))\n  (= (Read-Int-Int (Write-Int-Int acopy (+ (+ (* (- 1) i) (* 5 S)) (- 1)) (Read-Int-Int a (+ (+ (* (- 1) i) (* 5 S)) (- 1)))) Z) (Read-Int-Int acopy Z))\n)\n;; clause 1\n(or\n  (= (+ i (+ (* (- 4) S) Z)) (- 1))\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= (+ (* 4 S) (* (- 1) Z)) 0)\n  (<= 2 (+ (* 4 S) (* (- 1) Z)))\n)\n;; clause 2\n(or\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= (+ i (+ (* (- 3) S) Z)) (- 1))\n  (<= (+ (* 3 S) (* (- 1) Z)) 0)\n)\n;; clause 3\n(or\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= (+ i (+ (* (- 2) S) Z)) (- 1))\n  (<= (+ (* 2 S) (* (- 1) Z)) 0)\n)\n;; clause 4\n(or\n  (not (<= 0 Z))\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= i Z)\n)\n;; clause 5\n(or\n  (<= (+ (* 5 S) (* (- 1) Z)) 0)\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= (+ i (+ (* (- 5) S) Z)) (- 1))\n)\n;; clause 6\n(or\n  (not (<= S i))\n  (not (<= 0 Z))\n  (<= (+ (* 5 S) (* (- 1) Z)) 0)\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n)\n;; clause 7\n(or\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (not (<= 2 (+ (* 4 S) (* (- 1) Z))))\n  (<= (+ i (+ (* (- 4) S) Z)) (- 1))\n)\nsearch stats:\nnum_solve_calls = 244\nnum_solve_sat_calls = 120\nnum_solve_unsat_calls = 124\nnum_solver_reset = 0\nnum_added_cubes = 24\nnum_subsumed_cubes = 15\nnum_block = 83\nnum_refinements = 4\nnum_predicates = 31\nmax_cube_size = 4\navg_cube_size = 3.208\nsolve_time = 0.352\nsolve_sat_time = 0.310\nsolve_unsat_time = 0.040\nblock_time = 0.166\ngeneralize_and_push_time = 0.122\nrec_block_time = 0.319\npropagate_time = 0.033\nrefinement_time = 0.033\nprove_time = 0.389\ntotal_time = nan\nsafe"}},"run_time":579,"depth":10}]},{"example":"../examples/array_split_19.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int c i (+ x (Read-Int-Int a i) (Read-Int-Int b i))) i) (+ x (Read-Int-Int a i) (Read-Int-Int b i)))","(=> (not (= CONST0_next i)) (= (Read-Int-Int (Write-Int-Int c i (+ x (Read-Int-Int a i) (Read-Int-Int b i))) CONST0_next) (Read-Int-Int c CONST0_next)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (+ x (Read-Int-Int a i) (Read-Int-Int b i))) Z) (Read-Int-Int c Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (let ((.def_22 (Read-Int-Int a i))) (let ((.def_23 (Read-Int-Int b i))) (not (= (+ x (+ .def_22 (+ .def_23 (* (- 1) (Read-Int-Int (Write-Int-Int c i (+ x (+ .def_22 .def_23))) i))))) 0))))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int c i (+ x (+ (Read-Int-Int a i) (Read-Int-Int b i)))) Z) (Read-Int-Int c Z)))\n  (= (+ (Read-Int-Int c Z) (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n)\n;; clause 1\n(or\n  (= x 0)\n)\n;; clause 2\n(or\n  (let ((.def_22 (Read-Int-Int a i))) (let ((.def_23 (Read-Int-Int b i))) (not (= (+ x (+ .def_22 (+ .def_23 (* (- 1) (Read-Int-Int (Write-Int-Int c i (+ x (+ .def_22 .def_23))) i))))) 0))))\n  (not (= i CONST0_next))\n  (not (= (Read-Int-Int (Write-Int-Int c i (+ x (+ (Read-Int-Int a i) (Read-Int-Int b i)))) CONST0_next) (Read-Int-Int c CONST0_next)))\n  (not (= i Z))\n  (= (+ (Read-Int-Int c Z) (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n)\n;; clause 3\n(or\n  (not (= i CONST0_next))\n  (not (<= CONST0 Z))\n  (= i 1)\n  (<= i Z)\n)\n;; clause 4\n(or\n  (not (<= CONST0 Z))\n  (= (+ (Read-Int-Int c Z) (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n  (<= CONST0 1)\n  (<= i Z)\n)\n;; clause 5\n(or\n  (not (<= N i))\n  (not (<= CONST0 Z))\n  (= (+ (Read-Int-Int c Z) (+ (* (- 1) (Read-Int-Int a Z)) (* (- 1) (Read-Int-Int b Z)))) 0)\n  (<= N Z)\n  (<= CONST0 1)\n)\nsearch stats:\nnum_solve_calls = 140\nnum_solve_sat_calls = 83\nnum_solve_unsat_calls = 57\nnum_solver_reset = 0\nnum_added_cubes = 17\nnum_subsumed_cubes = 9\nnum_block = 45\nnum_refinements = 2\nnum_predicates = 14\nmax_cube_size = 5\navg_cube_size = 3.588\nsolve_time = 0.040\nsolve_sat_time = 0.034\nsolve_unsat_time = 0.004\nblock_time = 0.016\ngeneralize_and_push_time = 0.016\nrec_block_time = 0.039\npropagate_time = 0.003\nrefinement_time = 0.007\nprove_time = 0.047\ntotal_time = nan\nsafe"}},"run_time":132,"depth":10}]},{"example":"../examples/array_init_pair_symmetr4.vmt","result":[{"strategy":"abstract","result":{"Timeout":30000},"run_time":30005,"depth":10}]},{"example":"../examples/array_doub_access_init_const.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Forall { vars: [(Symbol(\"PH0\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] } }] }"},"run_time":14,"depth":10}]},{"example":"../examples/array_split_18.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 2, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"x\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"x\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }] }"},"run_time":16,"depth":10}]},{"example":"../examples/array_init_increm_two_arrs.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int b i) 1)) i) (+ (Read-Int-Int b i) 1))","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) (+ (Read-Int-Int a i) 1))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int b i) 1)) N) (Read-Int-Int b N)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i x) N) (Read-Int-Int a N)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i x) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i x) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i x) i) x)","(= (Read-Int-Int (Write-Int-Int b i x) i) x)","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int b i x) N) (Read-Int-Int b N)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) N) (Read-Int-Int a N)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int b i) 1)) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (let ((.def_21 (Read-Int-Int b i))) (not (= (+ .def_21 (* (- 1) (Read-Int-Int (Write-Int-Int b i (+ .def_21 1)) i))) (- 1))))\n  (not (= (Read-Int-Int (Write-Int-Int b i (+ (Read-Int-Int b i) 1)) N) (Read-Int-Int b N)))\n  (not (<= N i))\n  (= i 0)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 2\n(or\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 3\n(or\n  (not (= i N))\n  (<= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 253\nnum_solve_sat_calls = 112\nnum_solve_unsat_calls = 141\nnum_solver_reset = 0\nnum_added_cubes = 26\nnum_subsumed_cubes = 21\nnum_block = 108\nnum_refinements = 1\nnum_predicates = 22\nmax_cube_size = 4\navg_cube_size = 3.654\nsolve_time = 0.071\nsolve_sat_time = 0.063\nsolve_unsat_time = 0.007\nblock_time = 0.047\ngeneralize_and_push_time = 0.033\nrec_block_time = 0.068\npropagate_time = 0.013\nrefinement_time = 0.014\nprove_time = 0.086\ntotal_time = nan\nsafe"}},"run_time":395,"depth":10}]},{"example":"../examples/array_tiling_tcpy3.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int acopy3 i (Read-Int-Int a i)) Z) (Read-Int-Int acopy3 Z)))","(= (Read-Int-Int (Write-Int-Int acopy3 i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(=> (not (= Z (- (* 2 S) (+ i 1)))) (= (Read-Int-Int (Write-Int-Int acopy2 (- (* 2 S) (+ i 1)) (Read-Int-Int a (- (* 2 S) (+ i 1)))) Z) (Read-Int-Int acopy2 Z)))","(= (Read-Int-Int (Write-Int-Int acopy2 (- (* 2 S) (+ i 1)) (Read-Int-Int a (- (* 2 S) (+ i 1)))) (- (* 2 S) (+ i 1))) (Read-Int-Int a (- (* 2 S) (+ i 1))))","(=> (not (= S (- (* 3 S) (+ i 1)))) (= (Read-Int-Int (Write-Int-Int acopy1 (- (* 3 S) (+ i 1)) (Read-Int-Int a (- (* 3 S) (+ i 1)))) S) (Read-Int-Int acopy1 S)))","(= (Read-Int-Int (Write-Int-Int acopy1 (- (* 3 S) (+ i 1)) (Read-Int-Int a (- (* 3 S) (+ i 1)))) (- (* 3 S) (+ i 1))) (Read-Int-Int a (- (* 3 S) (+ i 1))))","(=> (not (= S (- (* 4 S) (+ i 1)))) (= (Read-Int-Int (Write-Int-Int acopy (- (* 4 S) (+ i 1)) (Read-Int-Int a (- (* 4 S) (+ i 1)))) S) (Read-Int-Int acopy S)))","(=> (not (= Z (- (* 3 S) (+ i 1)))) (= (Read-Int-Int (Write-Int-Int acopy1 (- (* 3 S) (+ i 1)) (Read-Int-Int a (- (* 3 S) (+ i 1)))) Z) (Read-Int-Int acopy1 Z)))","(= (Read-Int-Int (Write-Int-Int acopy (- (* 4 S) (+ i 1)) (Read-Int-Int a (- (* 4 S) (+ i 1)))) (- (* 4 S) (+ i 1))) (Read-Int-Int a (- (* 4 S) (+ i 1))))","(=> (not (= Z (- (* 4 S) (+ i 1)))) (= (Read-Int-Int (Write-Int-Int acopy (- (* 4 S) (+ i 1)) (Read-Int-Int a (- (* 4 S) (+ i 1)))) Z) (Read-Int-Int acopy Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= 1 S))\n  (not (= (+ i (* (- 3) S)) (- 1)))\n)\n;; clause 1\n(or\n  (not (= (+ i (* (- 2) S)) (- 1)))\n  (not (<= 0 Z))\n  (<= (+ (* 4 S) (* (- 1) Z)) 0)\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n)\n;; clause 2\n(or\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= (+ i (+ (* (- 2) S) Z)) (- 1))\n  (<= (+ (* 2 S) (* (- 1) Z)) 0)\n)\n;; clause 3\n(or\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= (+ (* 3 S) (* (- 1) Z)) 0)\n  (<= (+ i (+ (* (- 3) S) Z)) (- 1))\n)\n;; clause 4\n(or\n  (not (<= 0 Z))\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= i Z)\n)\n;; clause 5\n(or\n  (<= (+ (* 4 S) (* (- 1) Z)) 0)\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n  (<= (+ i (+ (* (- 4) S) Z)) (- 1))\n)\n;; clause 6\n(or\n  (not (<= S i))\n  (not (<= 0 Z))\n  (<= (+ (* 4 S) (* (- 1) Z)) 0)\n  (= (Read-Int-Int acopy Z) (Read-Int-Int a Z))\n)\nsearch stats:\nnum_solve_calls = 156\nnum_solve_sat_calls = 75\nnum_solve_unsat_calls = 81\nnum_solver_reset = 0\nnum_added_cubes = 21\nnum_subsumed_cubes = 12\nnum_block = 53\nnum_refinements = 1\nnum_predicates = 28\nmax_cube_size = 4\navg_cube_size = 3.095\nsolve_time = 0.101\nsolve_sat_time = 0.085\nsolve_unsat_time = 0.014\nblock_time = 0.053\ngeneralize_and_push_time = 0.042\nrec_block_time = 0.086\npropagate_time = 0.009\nrefinement_time = 0.006\nprove_time = 0.109\ntotal_time = nan\nsafe"}},"run_time":336,"depth":10}]},{"example":"../examples/array_init_increm_twice.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i 0) i) 0)","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) 1)) i) (+ (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) 1))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) 1)) Z) (Read-Int-Int a Z)))","(=> (not (= i i_next)) (= (Read-Int-Int (Write-Int-Int a_next i_next 0) i) (Read-Int-Int a_next i)))","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) (+ (Read-Int-Int a i) 1))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 0) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (= i i_next)\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (= i 0)\n  (<= Z 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 70\nnum_solve_sat_calls = 32\nnum_solve_unsat_calls = 38\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 27\nnum_refinements = 0\nnum_predicates = 15\nmax_cube_size = 4\navg_cube_size = 3.500\nsolve_time = 0.019\nsolve_sat_time = 0.014\nsolve_unsat_time = 0.003\nblock_time = 0.011\ngeneralize_and_push_time = 0.009\nrec_block_time = 0.013\npropagate_time = 0.002\nrefinement_time = 0.000\nprove_time = 0.018\ntotal_time = nan\nsafe"}},"run_time":151,"depth":10}]},{"example":"../examples/array_tiling_pr5.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: TooManyRefinements { n_refines: 10, depth: 1 }"},"run_time":225,"depth":10}]},{"example":"../examples/array_two_counters_sum.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":304,"depth":10}]},{"example":"../examples/array_hybr_add.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i j) i) j)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i j) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 2))\n  (<= (Read-Int-Int a Z) N)\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (= i Z)\n  (<= (Read-Int-Int a Z) N)\n  (<= Z 0)\n  (<= N Z)\n  (not (<= (- 1) (+ i (* (- 1) N))))\n)\n;; clause 2\n(or\n  (= j N)\n  (<= j 0)\n)\n;; clause 3\n(or\n  (<= Z 0)\n  (<= N Z)\n  (not (<= i 0))\n  (<= j 0)\n)\n;; clause 4\n(or\n  (= i N)\n  (<= j 0)\n)\n;; clause 5\n(or\n  (not (= i Z))\n  (<= N Z)\n  (<= j 0)\n)\n;; clause 6\n(or\n  (not (= pc 2))\n  (<= (Read-Int-Int a Z) N)\n  (<= Z 0)\n  (<= i 1)\n  (not (<= Z 1))\n)\n;; clause 7\n(or\n  (not (= pc 2))\n  (= i Z)\n  (<= (Read-Int-Int a Z) N)\n  (<= Z 0)\n  (<= i 0)\n  (not (<= Z 1))\n)\n;; clause 8\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (<= (Read-Int-Int a Z) N)\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 9\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= (Read-Int-Int a Z) N)\n  (<= Z 0)\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 968\nnum_solve_sat_calls = 557\nnum_solve_unsat_calls = 411\nnum_solver_reset = 0\nnum_added_cubes = 85\nnum_subsumed_cubes = 56\nnum_block = 463\nnum_refinements = 9\nnum_predicates = 23\nmax_cube_size = 6\navg_cube_size = 3.424\nsolve_time = 0.156\nsolve_sat_time = 0.138\nsolve_unsat_time = 0.016\nblock_time = 0.111\ngeneralize_and_push_time = 0.061\nrec_block_time = 0.199\npropagate_time = 0.034\nrefinement_time = 0.076\nprove_time = 0.242\ntotal_time = nan\nsafe"}},"run_time":368,"depth":10}]},{"example":"../examples/array_init_doubl.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int a i) 2)) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int a i) 2)) i) (* (Read-Int-Int a i) 2))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int a i) 2)) N) (Read-Int-Int a N)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 2))\n  (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0)\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 1\n(or\n  (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0)\n  (<= Z 0)\n  (<= i Z)\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 2\n(or\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int a i (* 2 (Read-Int-Int a i))) Z) (Read-Int-Int a Z)))\n  (not (= (+ (* 2 (Read-Int-Int a i)) (* (- 1) (Read-Int-Int (Write-Int-Int a i (* 2 (Read-Int-Int a i))) i))) 0))\n  (not (= pc 2))\n  (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0)\n  (<= N Z)\n)\n;; clause 3\n(or\n  (not (= i (Read-Int-Int (Write-Int-Int a i i) i)))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0)\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a i i) Z))\n)\n;; clause 4\n(or\n  (not (= i N))\n  (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0)\n  (<= Z 0)\n  (<= N Z)\n  (= Z (Read-Int-Int a Z))\n)\n;; clause 5\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= i N)\n)\n;; clause 6\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0)\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 7\n(or\n  (not (= pc 2))\n  (<= (+ (* 2 Z) (* (- 1) (Read-Int-Int a Z))) 0)\n  (<= Z 0)\n  (<= N Z)\n  (= Z (Read-Int-Int a Z))\n)\nsearch stats:\nnum_solve_calls = 579\nnum_solve_sat_calls = 289\nnum_solve_unsat_calls = 290\nnum_solver_reset = 0\nnum_added_cubes = 46\nnum_subsumed_cubes = 33\nnum_block = 273\nnum_refinements = 2\nnum_predicates = 16\nmax_cube_size = 7\navg_cube_size = 4.457\nsolve_time = 0.189\nsolve_sat_time = 0.171\nsolve_unsat_time = 0.017\nblock_time = 0.136\ngeneralize_and_push_time = 0.093\nrec_block_time = 0.158\npropagate_time = 0.042\nrefinement_time = 0.012\nprove_time = 0.207\ntotal_time = nan\nsafe"}},"run_time":326,"depth":10}]},{"example":"../examples/array_init_reverse.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i 1) i) 1)"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= 0 i)\n  (= (Read-Int-Int a Z) 1)\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (= (Read-Int-Int a Z) 1)\n  (<= N Z)\n  (<= Z i)\n)\n;; clause 2\n(or\n  (= (Read-Int-Int a Z) 1)\n  (<= Z 0)\n  (<= N Z)\n  (<= 1 i)\n)\nsearch stats:\nnum_solve_calls = 80\nnum_solve_sat_calls = 46\nnum_solve_unsat_calls = 34\nnum_solver_reset = 0\nnum_added_cubes = 8\nnum_subsumed_cubes = 6\nnum_block = 26\nnum_refinements = 2\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.625\nsolve_time = 0.010\nsolve_sat_time = 0.007\nsolve_unsat_time = 0.002\nblock_time = 0.003\ngeneralize_and_push_time = 0.003\nrec_block_time = 0.011\npropagate_time = 0.001\nrefinement_time = 0.004\nprove_time = 0.014\ntotal_time = nan\nsafe"}},"run_time":58,"depth":10}]},{"example":"../examples/array_standard_partition.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b k (Read-Int-Int a i)) k) (Read-Int-Int a i))","(=> (not (= Z k)) (= (Read-Int-Int (Write-Int-Int b k (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= 0 Z))\n  (<= (Read-Int-Int b Z) 0)\n  (<= k Z)\n)\nsearch stats:\nnum_solve_calls = 14\nnum_solve_sat_calls = 5\nnum_solve_unsat_calls = 9\nnum_solver_reset = 0\nnum_added_cubes = 2\nnum_subsumed_cubes = 1\nnum_block = 3\nnum_refinements = 0\nnum_predicates = 9\nmax_cube_size = 3\navg_cube_size = 3.000\nsolve_time = 0.002\nsolve_sat_time = 0.001\nsolve_unsat_time = 0.001\nblock_time = 0.000\ngeneralize_and_push_time = 0.000\nrec_block_time = 0.001\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.002\ntotal_time = nan\nsafe"}},"run_time":89,"depth":10}]},{"example":"../examples/array_init_depend_incr.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (+ 1 (Read-Int-Int a (- i 1)))) i) (+ 1 (Read-Int-Int a (- i 1))))","(= (Read-Int-Int (Write-Int-Int a i c) i) c)","(=> (not (= i i_next)) (= (Read-Int-Int (Write-Int-Int a_next i_next c_next) i) (Read-Int-Int a_next i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i c) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ 1 (Read-Int-Int a (- i 1)))) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"search stats:\nnum_solve_calls = 18\nnum_solve_sat_calls = 11\nnum_solve_unsat_calls = 7\nnum_solver_reset = 0\nnum_added_cubes = 1\nnum_subsumed_cubes = 0\nnum_block = 4\nnum_refinements = 1\nnum_predicates = 12\nmax_cube_size = 3\navg_cube_size = 3.000\nsolve_time = 0.009\nsolve_sat_time = 0.005\nsolve_unsat_time = 0.002\nblock_time = 0.002\ngeneralize_and_push_time = 0.001\nrec_block_time = 0.006\npropagate_time = 0.001\nrefinement_time = 0.003\nprove_time = 0.011\ntotal_time = nan\nunknown"}},"run_time":108,"depth":10}]},{"example":"../examples/array2dim_copy.vmt","result":[{"strategy":"abstract","result":{"Panic":"not yet implemented: Add Z3 function: Read-Int-Int"},"run_time":5,"depth":10}]},{"example":"../examples/array_copy.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= n i))\n  (<= Z 0)\n  (<= n Z)\n  (= (Read-Int-Int b Z) (Read-Int-Int a Z))\n)\n;; clause 1\n(or\n  (<= Z 0)\n  (= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 70\nnum_solve_sat_calls = 45\nnum_solve_unsat_calls = 25\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 22\nnum_refinements = 2\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.010\nsolve_sat_time = 0.007\nsolve_unsat_time = 0.002\nblock_time = 0.003\ngeneralize_and_push_time = 0.003\nrec_block_time = 0.011\npropagate_time = 0.001\nrefinement_time = 0.005\nprove_time = 0.014\ntotal_time = nan\nsafe"}},"run_time":57,"depth":10}]},{"example":"../examples/array_init_both_ends2.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 5, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] } }, Forall { vars: [(Symbol(\"PH1\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"-\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH1\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }] }] } }] }"},"run_time":82,"depth":10}]},{"example":"../examples/array_min_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"search stats:\nnum_solve_calls = 90\nnum_solve_sat_calls = 56\nnum_solve_unsat_calls = 34\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 35\nnum_refinements = 4\nnum_predicates = 11\nmax_cube_size = 5\navg_cube_size = 2.833\nsolve_time = 0.010\nsolve_sat_time = 0.008\nsolve_unsat_time = 0.002\nblock_time = 0.005\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.026\npropagate_time = 0.001\nrefinement_time = 0.019\nprove_time = 0.029\ntotal_time = nan\nunknown"}},"run_time":71,"depth":10}]},{"example":"../examples/array_partial_init.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int c j i) j) i)","(=> (not (= Z j)) (= (Read-Int-Int (Write-Int-Int c j i) Z) (Read-Int-Int c Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= Z (Read-Int-Int c Z))\n  (<= Z 0)\n  (<= j Z)\n)\n;; clause 1\n(or\n  (<= j i)\n)\n;; clause 2\n(or\n  (not (= i 0))\n  (= j 0)\n)\n;; clause 3\n(or\n  (not (= i (Read-Int-Int (Write-Int-Int c j i) j)))\n  (not (= j Z))\n  (not (= (Read-Int-Int (Write-Int-Int c j i) Z) (Read-Int-Int c Z)))\n  (<= Z (Read-Int-Int c Z))\n)\n;; clause 4\n(or\n  (= j 0)\n  (<= 1 i)\n)\nsearch stats:\nnum_solve_calls = 131\nnum_solve_sat_calls = 68\nnum_solve_unsat_calls = 63\nnum_solver_reset = 0\nnum_added_cubes = 15\nnum_subsumed_cubes = 8\nnum_block = 47\nnum_refinements = 3\nnum_predicates = 12\nmax_cube_size = 4\navg_cube_size = 2.333\nsolve_time = 0.017\nsolve_sat_time = 0.014\nsolve_unsat_time = 0.002\nblock_time = 0.009\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.024\npropagate_time = 0.003\nrefinement_time = 0.012\nprove_time = 0.030\ntotal_time = nan\nsafe"}},"run_time":95,"depth":10}]},{"example":"../examples/array_append2_array_horn.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i W) i) W)","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i W) N) (Read-Int-Int a N)))","(=> (not (= K i)) (= (Read-Int-Int (Write-Int-Int a i W) K) (Read-Int-Int a K)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= 0 (+ i (+ (* (- 1) M) (* (- 1) N)))))\n  (not (<= N K))\n  (<= 0 (+ K (+ (* (- 1) M) (* (- 1) N))))\n  (= (Read-Int-Int a K) (Read-Int-Int B (+ K (* (- 1) N))))\n)\n;; clause 1\n(or\n  (not (<= N K))\n  (= (Read-Int-Int a K) (Read-Int-Int B (+ K (* (- 1) N))))\n  (<= i K)\n)\nsearch stats:\nnum_solve_calls = 47\nnum_solve_sat_calls = 28\nnum_solve_unsat_calls = 19\nnum_solver_reset = 0\nnum_added_cubes = 4\nnum_subsumed_cubes = 2\nnum_block = 12\nnum_refinements = 1\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.500\nsolve_time = 0.013\nsolve_sat_time = 0.010\nsolve_unsat_time = 0.002\nblock_time = 0.004\ngeneralize_and_push_time = 0.007\nrec_block_time = 0.013\npropagate_time = 0.000\nrefinement_time = 0.003\nprove_time = 0.016\ntotal_time = nan\nsafe"}},"run_time":76,"depth":10}]},{"example":"../examples/array_tiling_rewnif.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a1 i i) Z) (Read-Int-Int a1 Z)))","(= (Read-Int-Int (Write-Int-Int a1 i i) i) i)","(=> (not (= Z (+ i 1))) (= (Read-Int-Int (Write-Int-Int a (+ i 1) i) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= S i))\n  (not (<= 0 Z))\n  (<= Z (Read-Int-Int a Z))\n  (<= S Z)\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (<= Z (Read-Int-Int a Z))\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 52\nnum_solve_sat_calls = 25\nnum_solve_unsat_calls = 27\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 3\nnum_block = 17\nnum_refinements = 1\nnum_predicates = 12\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.008\nsolve_sat_time = 0.006\nsolve_unsat_time = 0.001\nblock_time = 0.003\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.007\npropagate_time = 0.001\nrefinement_time = 0.002\nprove_time = 0.010\ntotal_time = nan\nsafe"}},"run_time":67,"depth":10}]},{"example":"../examples/array_init_var_ind.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (= Z (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 24\nnum_solve_sat_calls = 11\nnum_solve_unsat_calls = 13\nnum_solver_reset = 0\nnum_added_cubes = 3\nnum_subsumed_cubes = 1\nnum_block = 6\nnum_refinements = 0\nnum_predicates = 7\nmax_cube_size = 3\navg_cube_size = 2.667\nsolve_time = 0.005\nsolve_sat_time = 0.002\nsolve_unsat_time = 0.001\nblock_time = 0.001\ngeneralize_and_push_time = 0.001\nrec_block_time = 0.002\npropagate_time = 0.001\nrefinement_time = 0.000\nprove_time = 0.004\ntotal_time = nan\nsafe"}},"run_time":46,"depth":10}]},{"example":"../examples/array_min_and_copy_shift_sum.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":333,"depth":10}]},{"example":"../examples/array_init_and_copy_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i 1) i) 1)","(= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i 1) N) (Read-Int-Int a N)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= i N)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 2\n(or\n  (<= Z 0)\n  (<= i Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 3\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int a Z) 1)\n)\n;; clause 4\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (<= 1 (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 5\n(or\n  (not (= pc 2))\n  (<= 1 (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 385\nnum_solve_sat_calls = 194\nnum_solve_unsat_calls = 191\nnum_solver_reset = 0\nnum_added_cubes = 35\nnum_subsumed_cubes = 25\nnum_block = 172\nnum_refinements = 2\nnum_predicates = 16\nmax_cube_size = 5\navg_cube_size = 3.743\nsolve_time = 0.058\nsolve_sat_time = 0.049\nsolve_unsat_time = 0.007\nblock_time = 0.039\ngeneralize_and_push_time = 0.026\nrec_block_time = 0.063\npropagate_time = 0.010\nrefinement_time = 0.018\nprove_time = 0.079\ntotal_time = nan\nsafe"}},"run_time":181,"depth":10}]},{"example":"../examples/array_nonlin_square.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int a i) (Read-Int-Int a i))) i) (* (Read-Int-Int a i) (Read-Int-Int a i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* (Read-Int-Int a i) (Read-Int-Int a i))) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= n i))\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= n Z)\n)\n;; clause 1\n(or\n  (<= 0 (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 70\nnum_solve_sat_calls = 45\nnum_solve_unsat_calls = 25\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 22\nnum_refinements = 2\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 3.000\nsolve_time = 0.094\nsolve_sat_time = 0.083\nsolve_unsat_time = 0.010\nblock_time = 0.042\ngeneralize_and_push_time = 0.032\nrec_block_time = 0.080\npropagate_time = 0.011\nrefinement_time = 0.005\nprove_time = 0.099\ntotal_time = nan\nsafe"}},"run_time":161,"depth":10}]},{"example":"../examples/array_hybr_nest_4.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (<= Z 0)\n  (<= N Z)\n  (= pc 1)\n  (not (<= 1 i))\n  (<= 1 (+ i (* (- 1) j)))\n)\nsearch stats:\nnum_solve_calls = 112\nnum_solve_sat_calls = 58\nnum_solve_unsat_calls = 54\nnum_solver_reset = 0\nnum_added_cubes = 8\nnum_subsumed_cubes = 4\nnum_block = 42\nnum_refinements = 1\nnum_predicates = 8\nmax_cube_size = 5\navg_cube_size = 3.625\nsolve_time = 0.011\nsolve_sat_time = 0.008\nsolve_unsat_time = 0.002\nblock_time = 0.005\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.011\npropagate_time = 0.001\nrefinement_time = 0.004\nprove_time = 0.015\ntotal_time = nan\nsafe"}},"run_time":110,"depth":10}]},{"example":"../examples/array_init_drop.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i i) i) i)","(= (Read-Int-Int (Write-Int-Int a i (- (Read-Int-Int a (- i 1)) 1)) i) (- (Read-Int-Int a (- i 1)) 1))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (- (Read-Int-Int a (- i 1)) 1)) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a 0 0) 0) 0)","(=> (not (= Z 0)) (= (Read-Int-Int (Write-Int-Int a 0 0) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= Z 0))\n  (<= (Read-Int-Int a Z) Z)\n)\n;; clause 1\n(or\n  (<= i 1)\n  (<= 1 (+ i (* (- 1) (Read-Int-Int a (+ i (- 1))))))\n)\n;; clause 2\n(or\n  (not (= i 0))\n  (= a (Write-Int-Int a 0 0))\n  (<= (Read-Int-Int a (+ i (- 1))) 1)\n)\n;; clause 3\n(or\n  (let ((.def_24 (Read-Int-Int a (+ i (- 1))))) (not (= (+ .def_24 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_24 (- 1))) i))) 1)))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a (+ i (- 1))) (- 1))) Z) (Read-Int-Int a Z)))\n  (not (<= 0 Z))\n  (<= (Read-Int-Int a Z) Z)\n)\n;; clause 4\n(or\n  (= i 0)\n  (not (<= i 1))\n  (<= (Read-Int-Int a (+ i (- 1))) 1)\n)\n;; clause 5\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= (Read-Int-Int a Z) Z)\n  (<= N Z)\n)\n;; clause 6\n(or\n  (not (<= 0 Z))\n  (<= (Read-Int-Int a Z) Z)\n  (<= i Z)\n)\n;; clause 7\n(or\n  (not (= (Read-Int-Int (Write-Int-Int a 0 0) 0) 0))\n  (not (= Z 0))\n  (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a 0 0) Z))\n)\n;; clause 8\n(or\n  (= a (Write-Int-Int a 0 0))\n  (not (<= i 1))\n  (<= (Read-Int-Int a (+ i (- 1))) 1)\n)\n;; clause 9\n(or\n  (not (= i 0))\n  (not (= i (Read-Int-Int (Write-Int-Int a i i) i)))\n  (not (= i Z))\n  (= (Read-Int-Int a Z) (Read-Int-Int (Write-Int-Int a 0 0) Z))\n)\nsearch stats:\nnum_solve_calls = 352\nnum_solve_sat_calls = 195\nnum_solve_unsat_calls = 157\nnum_solver_reset = 0\nnum_added_cubes = 33\nnum_subsumed_cubes = 23\nnum_block = 135\nnum_refinements = 4\nnum_predicates = 18\nmax_cube_size = 5\navg_cube_size = 3.061\nsolve_time = 0.095\nsolve_sat_time = 0.080\nsolve_unsat_time = 0.014\nblock_time = 0.055\ngeneralize_and_push_time = 0.038\nrec_block_time = 0.111\npropagate_time = 0.011\nrefinement_time = 0.031\nprove_time = 0.128\ntotal_time = nan\nsafe"}},"run_time":236,"depth":10}]},{"example":"../examples/array_init_batches_ind.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i 0) Z i) Z) i)","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int a_next i_next 0) Z i) Z) i)","(=> (not (= Z (+ i_next 1))) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a_next i_next 0) (+ i_next 1) i) Z) (Read-Int-Int (Write-Int-Int a_next i_next 0) Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 0) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i 0) i) 0)","(=> (not (= Z 1)) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i 0) 1 i) Z) (Read-Int-Int (Write-Int-Int a i 0) Z)))","(=> (not (= Z (+ i 1))) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i 0) (+ i 1) (Read-Int-Int a Z)) Z) (Read-Int-Int (Write-Int-Int a i 0) Z)))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i 0) Z (Read-Int-Int a Z)) Z) (Read-Int-Int a Z))","(= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i 0) Z 0) Z) 0)","(=> (not (= Z (+ i 1))) (= (Read-Int-Int (Write-Int-Int (Write-Int-Int a i 0) (+ i 1) 0) Z) (Read-Int-Int (Write-Int-Int a i 0) Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= Z 1))\n  (= (Read-Int-Int a Z) 0)\n  (<= i Z)\n)\n;; clause 1\n(or\n  (= (Read-Int-Int a Z) 0)\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 26\nnum_solve_sat_calls = 11\nnum_solve_unsat_calls = 15\nnum_solver_reset = 0\nnum_added_cubes = 4\nnum_subsumed_cubes = 2\nnum_block = 6\nnum_refinements = 0\nnum_predicates = 18\nmax_cube_size = 3\navg_cube_size = 3.000\nsolve_time = 0.010\nsolve_sat_time = 0.004\nsolve_unsat_time = 0.004\nblock_time = 0.002\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.003\npropagate_time = 0.001\nrefinement_time = 0.000\nprove_time = 0.008\ntotal_time = nan\nsafe"}},"run_time":137,"depth":10}]},{"example":"../examples/array_hybr_nest_5.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (<= Z 0)\n  (<= N Z)\n  (= pc 1)\n  (not (<= 1 i))\n  (<= 1 (+ i (* (- 1) j)))\n)\nsearch stats:\nnum_solve_calls = 112\nnum_solve_sat_calls = 58\nnum_solve_unsat_calls = 54\nnum_solver_reset = 0\nnum_added_cubes = 8\nnum_subsumed_cubes = 4\nnum_block = 42\nnum_refinements = 1\nnum_predicates = 8\nmax_cube_size = 5\navg_cube_size = 3.625\nsolve_time = 0.011\nsolve_sat_time = 0.008\nsolve_unsat_time = 0.002\nblock_time = 0.005\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.011\npropagate_time = 0.001\nrefinement_time = 0.004\nprove_time = 0.014\ntotal_time = nan\nsafe"}},"run_time":100,"depth":10}]},{"example":"../examples/array_hybr_nest_1.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (<= Z 0)\n  (<= N Z)\n  (= pc 1)\n  (not (<= 1 i))\n  (<= 1 (+ i (* (- 1) j)))\n)\nsearch stats:\nnum_solve_calls = 112\nnum_solve_sat_calls = 58\nnum_solve_unsat_calls = 54\nnum_solver_reset = 0\nnum_added_cubes = 8\nnum_subsumed_cubes = 4\nnum_block = 42\nnum_refinements = 1\nnum_predicates = 8\nmax_cube_size = 5\navg_cube_size = 3.625\nsolve_time = 0.010\nsolve_sat_time = 0.008\nsolve_unsat_time = 0.002\nblock_time = 0.005\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.011\npropagate_time = 0.001\nrefinement_time = 0.004\nprove_time = 0.014\ntotal_time = nan\nsafe"}},"run_time":84,"depth":10}]},{"example":"../examples/array_init_pair_symmetr.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (* x (- 1))) i) (* x (- 1)))","(= (Read-Int-Int (Write-Int-Int a i x) i) x)","(= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) i) (+ (Read-Int-Int a i) (Read-Int-Int b i)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i x) Z) (Read-Int-Int a Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (* x (- 1))) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (+ (Read-Int-Int a i) (Read-Int-Int b i))) Z) (Read-Int-Int c Z)))","(=> (not (= N i)) (= (Read-Int-Int (Write-Int-Int a i x) N) (Read-Int-Int a N)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (= i N)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= 0 (+ (Read-Int-Int a Z) (Read-Int-Int b Z)))\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int a Z) (Read-Int-Int b Z)) 0)\n)\n;; clause 3\n(or\n  (<= Z 0)\n  (<= i Z)\n  (= x (Read-Int-Int a Z))\n)\n;; clause 4\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= x (Read-Int-Int a Z))\n)\n;; clause 5\n(or\n  (<= Z 0)\n  (<= i Z)\n  (<= 0 (+ (Read-Int-Int a Z) (Read-Int-Int b Z)))\n)\n;; clause 6\n(or\n  (<= Z 0)\n  (<= i Z)\n  (<= (+ (Read-Int-Int a Z) (Read-Int-Int b Z)) 0)\n)\n;; clause 7\n(or\n  (not (= (+ x (Read-Int-Int (Write-Int-Int b i (* (- 1) x)) i)) 0))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (= (Read-Int-Int (Write-Int-Int b i (* (- 1) x)) Z) (Read-Int-Int b Z))\n)\n;; clause 8\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (= x (Read-Int-Int a Z))\n)\n;; clause 9\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (<= 0 (+ (Read-Int-Int a Z) (Read-Int-Int b Z)))\n)\n;; clause 10\n(or\n  (not (= i N))\n  (<= Z 0)\n  (<= N Z)\n  (<= (+ (Read-Int-Int a Z) (Read-Int-Int b Z)) 0)\n)\n;; clause 11\n(or\n  (not (= i N))\n  (not (= pc 2))\n  (= (Read-Int-Int c Z) 0)\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 12\n(or\n  (not (= pc 2))\n  (= (Read-Int-Int c Z) 0)\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 524\nnum_solve_sat_calls = 240\nnum_solve_unsat_calls = 284\nnum_solver_reset = 0\nnum_added_cubes = 58\nnum_subsumed_cubes = 48\nnum_block = 225\nnum_refinements = 3\nnum_predicates = 20\nmax_cube_size = 6\navg_cube_size = 3.879\nsolve_time = 0.123\nsolve_sat_time = 0.110\nsolve_unsat_time = 0.012\nblock_time = 0.078\ngeneralize_and_push_time = 0.061\nrec_block_time = 0.136\npropagate_time = 0.013\nrefinement_time = 0.028\nprove_time = 0.155\ntotal_time = nan\nsafe"}},"run_time":319,"depth":10}]},{"example":"../examples/array_tripl_access_init.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 2, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Constant(Numeral(2))] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(0))] }, Constant(Numeral(2)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(2))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(2))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(1))] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a_next\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i_next\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] } }, Forall { vars: [(Symbol(\"PH0\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } }), (Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Constant(Numeral(1))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Constant(Numeral(1))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH0\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }] } }, Forall { vars: [(Symbol(\"PH2\"), Simple { identifier: Simple { symbol: Symbol(\"Int\") } })], term: Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"PH2\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"*\") } }, arguments: [Constant(Numeral(3)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"N\") } })] }] }] } }] }"},"run_time":130,"depth":10}]},{"example":"../examples/array_init_increm_two_arrs_antisym_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i x) i) x)","(= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i) (+ (Read-Int-Int a i) 1))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i x) i) x)","(=> (not (= i i_next)) (= (Read-Int-Int (Write-Int-Int a_next i_next x_next) i) (Read-Int-Int a_next i)))","(=> (not (= i_next i)) (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i_next) (Read-Int-Int a i_next)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i x) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i x) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (let ((.def_26 (Read-Int-Int a i))) (not (= (+ .def_26 (* (- 1) (Read-Int-Int (Write-Int-Int a i (+ .def_26 1)) i))) (- 1))))\n  (not (= (Read-Int-Int (Write-Int-Int a i (+ (Read-Int-Int a i) 1)) i_next) (Read-Int-Int a i_next)))\n  (not (= pc 2))\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (= i i_next)\n)\n;; clause 2\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 3\n(or\n  (not (= pc 2))\n  (= i 0)\n)\nsearch stats:\nnum_solve_calls = 93\nnum_solve_sat_calls = 48\nnum_solve_unsat_calls = 45\nnum_solver_reset = 0\nnum_added_cubes = 10\nnum_subsumed_cubes = 5\nnum_block = 36\nnum_refinements = 0\nnum_predicates = 18\nmax_cube_size = 4\navg_cube_size = 2.300\nsolve_time = 0.017\nsolve_sat_time = 0.014\nsolve_unsat_time = 0.002\nblock_time = 0.010\ngeneralize_and_push_time = 0.005\nrec_block_time = 0.011\npropagate_time = 0.003\nrefinement_time = 0.000\nprove_time = 0.017\ntotal_time = nan\nsafe"}},"run_time":201,"depth":10}]},{"example":"../examples/array_init_reverse_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i 1) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i 1) i) 1)"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= 0 i)\n  (= (Read-Int-Int a Z) 1)\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (= (Read-Int-Int a Z) 1)\n  (<= N Z)\n  (<= Z i)\n)\n;; clause 2\n(or\n  (= (Read-Int-Int a Z) 1)\n  (<= Z 0)\n  (<= N Z)\n  (<= 1 i)\n)\nsearch stats:\nnum_solve_calls = 83\nnum_solve_sat_calls = 43\nnum_solve_unsat_calls = 40\nnum_solver_reset = 0\nnum_added_cubes = 8\nnum_subsumed_cubes = 6\nnum_block = 32\nnum_refinements = 2\nnum_predicates = 11\nmax_cube_size = 4\navg_cube_size = 3.375\nsolve_time = 0.008\nsolve_sat_time = 0.006\nsolve_unsat_time = 0.002\nblock_time = 0.004\ngeneralize_and_push_time = 0.002\nrec_block_time = 0.009\npropagate_time = 0.001\nrefinement_time = 0.004\nprove_time = 0.012\ntotal_time = nan\nsafe"}},"run_time":69,"depth":10}]},{"example":"../examples/array_even_odd_1.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 1, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"b\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"c\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }] }"},"run_time":14,"depth":10}]},{"example":"../examples/array_single_elem.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 3, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }] }"},"run_time":16,"depth":10}]},{"example":"../examples/array_min_and_copy_shift.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (- (Read-Int-Int a i) j)) i) (- (Read-Int-Int a i) j))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (- (Read-Int-Int a i) j)) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 1))\n  (= i 0)\n  (<= j (Read-Int-Int a 0))\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int a Z))\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= i Z)\n  (<= 0 (Read-Int-Int b Z))\n  (<= (+ i (* (- 1) Z)) (- 1))\n)\n;; clause 3\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= 0 (Read-Int-Int b Z))\n  (<= N Z)\n)\n;; clause 4\n(or\n  (not (= i 0))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= N Z)\n  (<= j (Read-Int-Int a 0))\n)\n;; clause 5\n(or\n  (not (= pc 2))\n  (= i 0)\n  (<= 0 (Read-Int-Int b Z))\n  (not (= Z 0))\n)\n;; clause 6\n(or\n  (not (<= 0 Z))\n  (= i Z)\n  (<= (+ i (* (- 1) Z)) (- 1))\n  (<= j (Read-Int-Int a Z))\n)\n;; clause 7\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int a Z))\n)\nsearch stats:\nnum_solve_calls = 536\nnum_solve_sat_calls = 271\nnum_solve_unsat_calls = 265\nnum_solver_reset = 0\nnum_added_cubes = 46\nnum_subsumed_cubes = 28\nnum_block = 236\nnum_refinements = 6\nnum_predicates = 16\nmax_cube_size = 5\navg_cube_size = 4.152\nsolve_time = 0.082\nsolve_sat_time = 0.071\nsolve_unsat_time = 0.009\nblock_time = 0.055\ngeneralize_and_push_time = 0.035\nrec_block_time = 0.104\npropagate_time = 0.012\nrefinement_time = 0.036\nprove_time = 0.122\ntotal_time = nan\nsafe"}},"run_time":268,"depth":10}]},{"example":"../examples/array_init_both_ends_multiple_sum.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: \"\""},"run_time":256,"depth":10}]},{"example":"../examples/array_hybr_nest_2.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (<= Z 0)\n  (<= N Z)\n  (= pc 1)\n  (not (<= 1 i))\n  (<= 1 (+ i (* (- 1) j)))\n)\nsearch stats:\nnum_solve_calls = 112\nnum_solve_sat_calls = 58\nnum_solve_unsat_calls = 54\nnum_solver_reset = 0\nnum_added_cubes = 8\nnum_subsumed_cubes = 4\nnum_block = 42\nnum_refinements = 1\nnum_predicates = 8\nmax_cube_size = 5\navg_cube_size = 3.625\nsolve_time = 0.013\nsolve_sat_time = 0.009\nsolve_unsat_time = 0.002\nblock_time = 0.007\ngeneralize_and_push_time = 0.005\nrec_block_time = 0.013\npropagate_time = 0.002\nrefinement_time = 0.003\nprove_time = 0.016\ntotal_time = nan\nsafe"}},"run_time":90,"depth":10}]},{"example":"../examples/array_init_nondet_var_mult.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int a i (* i j)) i) (* i j))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i (* i j)) Z) (Read-Int-Int a Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= Z (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= i Z)\n)\n;; clause 1\n(or\n  (not (<= j 0))\n)\n;; clause 2\n(or\n  (not (<= n i))\n  (<= Z (Read-Int-Int a Z))\n  (<= Z 0)\n  (<= n Z)\n)\nsearch stats:\nnum_solve_calls = 50\nnum_solve_sat_calls = 27\nnum_solve_unsat_calls = 23\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 3\nnum_block = 14\nnum_refinements = 1\nnum_predicates = 10\nmax_cube_size = 4\navg_cube_size = 2.667\nsolve_time = 0.070\nsolve_sat_time = 0.064\nsolve_unsat_time = 0.005\nblock_time = 0.024\ngeneralize_and_push_time = 0.025\nrec_block_time = 0.060\npropagate_time = 0.004\nrefinement_time = 0.004\nprove_time = 0.074\ntotal_time = nan\nsafe"}},"run_time":130,"depth":10}]},{"example":"../examples/array_tiling_rewnifrev2.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(=> (not (= Z (+ i 1))) (= (Read-Int-Int (Write-Int-Int a1 (+ i 1) (+ i 1)) Z) (Read-Int-Int a1 Z)))","(= (Read-Int-Int (Write-Int-Int a1 (+ i 1) (+ i 1)) (+ i 1)) (+ i 1))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int a i i) Z) (Read-Int-Int a Z)))","(= (Read-Int-Int (Write-Int-Int a i i) i) i)"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= (+ i (* (- 1) Z)) (- 1)))\n  (<= 0 i)\n  (<= Z (Read-Int-Int a Z))\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (<= 0 i)\n  (<= Z (Read-Int-Int a Z))\n  (<= S Z)\n)\n;; clause 2\n(or\n  (<= Z (Read-Int-Int a Z))\n  (<= S Z)\n  (<= (- 1) (+ i (* (- 1) Z)))\n)\nsearch stats:\nnum_solve_calls = 65\nnum_solve_sat_calls = 35\nnum_solve_unsat_calls = 30\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 3\nnum_block = 20\nnum_refinements = 1\nnum_predicates = 13\nmax_cube_size = 4\navg_cube_size = 3.333\nsolve_time = 0.013\nsolve_sat_time = 0.009\nsolve_unsat_time = 0.002\nblock_time = 0.005\ngeneralize_and_push_time = 0.004\nrec_block_time = 0.011\npropagate_time = 0.001\nrefinement_time = 0.003\nprove_time = 0.015\ntotal_time = nan\nsafe"}},"run_time":78,"depth":10}]},{"example":"../examples/array_split_12_test.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 2, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"y\") } })] }] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"+\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"y\") } })] }] }] }"},"run_time":17,"depth":10}]},{"example":"../examples/array_min_and_copy_inverse.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a (- N (+ i 1)))) i) (Read-Int-Int a (- N (+ i 1))))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a (- N (+ i 1)))) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 2))\n  (= i Z)\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (<= Z 1)\n)\n;; clause 1\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (not (= (Read-Int-Int b Z) (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1)))))\n)\n;; clause 2\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= j (Read-Int-Int b Z))\n  (<= i Z)\n)\n;; clause 3\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= i Z)\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n)\n;; clause 4\n(or\n  (let ((.def_28 (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1))))) (not (= .def_28 (Read-Int-Int (Write-Int-Int b i .def_28) i))))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1)))) Z) (Read-Int-Int b Z)))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n)\n;; clause 5\n(or\n  (not (= i Z))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1))))\n)\n;; clause 6\n(or\n  (<= N Z)\n  (<= j (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n  (not (<= 0 (+ i (+ (* (- 1) N) Z))))\n)\n;; clause 7\n(or\n  (let ((.def_28 (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1))))) (not (= .def_28 (Read-Int-Int (Write-Int-Int b i .def_28) i))))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1)))) Z) (Read-Int-Int b Z)))\n  (not (= pc 2))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (<= Z 1)\n)\n;; clause 8\n(or\n  (not (= i Z))\n  (not (= pc 2))\n  (<= N Z)\n  (<= j (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1))))\n  (<= Z 1)\n)\n;; clause 9\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= i 0)\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (not (= (Read-Int-Int b Z) (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1)))))\n)\n;; clause 10\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n)\n;; clause 11\n(or\n  (not (<= 0 Z))\n  (= i Z)\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (= Z 0)\n  (not (= (Read-Int-Int b Z) (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1)))))\n)\n;; clause 12\n(or\n  (not (<= 0 Z))\n  (= i Z)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (= Z 0)\n  (<= j (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n)\n;; clause 13\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (<= j (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1))))\n)\n;; clause 14\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (= i Z)\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (= (Read-Int-Int b Z) (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n)\n;; clause 15\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n)\n;; clause 16\n(or\n  (not (= pc 1))\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int (Write-Int-Int b 0 (Read-Int-Int a (+ N (- 1)))) Z))\n  (<= 2 N)\n)\n;; clause 17\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n  (<= 3 N)\n)\n;; clause 18\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (not (= (Read-Int-Int b Z) (Read-Int-Int (Write-Int-Int b 0 (Read-Int-Int a (+ N (- 1)))) Z)))\n  (<= 2 N)\n)\n;; clause 19\n(or\n  (not (= i 0))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (not (= (Read-Int-Int b Z) (Read-Int-Int (Write-Int-Int b 0 (Read-Int-Int a (+ N (- 1)))) Z)))\n  (<= 2 N)\n)\n;; clause 20\n(or\n  (= i 0)\n  (<= N i)\n  (<= 2 N)\n)\n;; clause 21\n(or\n  (not (= i Z))\n  (not (= pc 2))\n  (<= N Z)\n  (<= j (Read-Int-Int (Write-Int-Int b 0 (Read-Int-Int a (+ N (- 1)))) Z))\n  (<= 2 N)\n)\n;; clause 22\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n  (<= 3 N)\n)\n;; clause 23\n(or\n  (not (<= N i))\n  (= i 0)\n  (<= j (Read-Int-Int b Z))\n  (not (= Z 0))\n  (not (= (Read-Int-Int b Z) (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1)))))\n)\n;; clause 24\n(or\n  (not (= i 0))\n  (let ((.def_28 (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1))))) (not (= .def_28 (Read-Int-Int (Write-Int-Int b i .def_28) i))))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1)))) Z) (Read-Int-Int b Z)))\n  (not (= pc 2))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n)\n;; clause 25\n(or\n  (not (= pc 2))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (not (= Z 0))\n  (not (= (Read-Int-Int b Z) (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1)))))\n)\n;; clause 26\n(or\n  (not (= pc 2))\n  (= i 0)\n  (<= j (Read-Int-Int b Z))\n  (not (= Z 0))\n)\n;; clause 27\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (not (= (Read-Int-Int b Z) (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1)))))\n  (not (<= Z 1))\n)\n;; clause 28\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n  (not (<= Z 1))\n)\n;; clause 29\n(or\n  (not (= pc 1))\n  (= i 0)\n  (<= j (Read-Int-Int a 0))\n)\n;; clause 30\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int a 0))\n)\n;; clause 31\n(or\n  (not (<= N i))\n  (<= N Z)\n  (not (= Z 0))\n  (<= j (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n)\n;; clause 32\n(or\n  (not (= i 0))\n  (let ((.def_28 (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1))))) (not (= .def_28 (Read-Int-Int (Write-Int-Int b i .def_28) i))))\n  (not (= i Z))\n  (not (= pc 2))\n  (<= N Z)\n  (<= j (Read-Int-Int (Write-Int-Int b 0 (Read-Int-Int a (+ N (- 1)))) Z))\n)\n;; clause 33\n(or\n  (not (= i Z))\n  (not (= pc 2))\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (<= j (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1))))\n)\n;; clause 34\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (<= j (Read-Int-Int b Z))\n  (<= N i)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (= Z 0)\n  (not (= (Read-Int-Int b Z) (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1)))))\n  (not (<= Z 1))\n)\n;; clause 35\n(or\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n  (not (= (Read-Int-Int b Z) (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1)))))\n  (not (<= Z 1))\n)\n;; clause 36\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (<= N i)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (= Z 0)\n  (<= j (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n  (not (<= Z 1))\n)\n;; clause 37\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (<= N Z)\n  (<= j (Read-Int-Int a (+ (+ N (* (- 1) Z)) (- 1))))\n  (not (<= Z 1))\n)\n;; clause 38\n(or\n  (not (<= 0 Z))\n  (= i 0)\n  (<= N Z)\n  (<= j (Read-Int-Int a 0))\n)\n;; clause 39\n(or\n  (not (= i Z))\n  (= i 0)\n  (<= N Z)\n  (<= (+ i (* (- 1) N)) (- 2))\n  (<= j (Read-Int-Int a (+ (+ (* (- 1) i) N) (- 1))))\n)\n;; clause 40\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (not (<= 0 Z))\n  (<= j (Read-Int-Int b Z))\n  (<= N Z)\n)\nsearch stats:\nnum_solve_calls = 2138\nnum_solve_sat_calls = 992\nnum_solve_unsat_calls = 1146\nnum_solver_reset = 0\nnum_added_cubes = 195\nnum_subsumed_cubes = 167\nnum_block = 992\nnum_refinements = 11\nnum_predicates = 25\nmax_cube_size = 8\navg_cube_size = 5.215\nsolve_time = 0.589\nsolve_sat_time = 0.521\nsolve_unsat_time = 0.067\nblock_time = 0.447\ngeneralize_and_push_time = 0.290\nrec_block_time = 0.691\npropagate_time = 0.115\nrefinement_time = 0.198\nprove_time = 0.819\ntotal_time = nan\nsafe"}},"run_time":981,"depth":10}]},{"example":"../examples/array_even_odd_2.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(= (Read-Int-Int (Write-Int-Int c i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int c i (Read-Int-Int a i)) Z) (Read-Int-Int c Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (not (<= 0 Z))\n  (= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (= (Read-Int-Int c Z) (Read-Int-Int a Z))\n  (<= N Z)\n)\n;; clause 1\n(or\n  (not (<= 0 Z))\n  (= (Read-Int-Int b Z) (Read-Int-Int a Z))\n  (= (Read-Int-Int c Z) (Read-Int-Int a Z))\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 60\nnum_solve_sat_calls = 32\nnum_solve_unsat_calls = 28\nnum_solver_reset = 0\nnum_added_cubes = 6\nnum_subsumed_cubes = 2\nnum_block = 19\nnum_refinements = 1\nnum_predicates = 12\nmax_cube_size = 5\navg_cube_size = 4.167\nsolve_time = 0.015\nsolve_sat_time = 0.012\nsolve_unsat_time = 0.002\nblock_time = 0.005\ngeneralize_and_push_time = 0.005\nrec_block_time = 0.015\npropagate_time = 0.001\nrefinement_time = 0.006\nprove_time = 0.020\ntotal_time = nan\nsafe"}},"run_time":84,"depth":10}]},{"example":"../examples/array_min_max_const.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (<= x m)\n)\nsearch stats:\nnum_solve_calls = 18\nnum_solve_sat_calls = 6\nnum_solve_unsat_calls = 12\nnum_solver_reset = 0\nnum_added_cubes = 3\nnum_subsumed_cubes = 1\nnum_block = 5\nnum_refinements = 0\nnum_predicates = 8\nmax_cube_size = 1\navg_cube_size = 1.000\nsolve_time = 0.003\nsolve_sat_time = 0.001\nsolve_unsat_time = 0.001\nblock_time = 0.001\ngeneralize_and_push_time = 0.000\nrec_block_time = 0.000\npropagate_time = 0.000\nrefinement_time = 0.000\nprove_time = 0.003\ntotal_time = nan\nsafe"}},"run_time":51,"depth":10}]},{"example":"../examples/array_min_and_copy.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":["(= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) i) (Read-Int-Int a i))","(=> (not (= Z i)) (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))"],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (= pc 2))\n  (<= Z 0)\n  (<= N Z)\n  (<= j (Read-Int-Int a Z))\n)\n;; clause 1\n(or\n  (<= j (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= i Z)\n  (not (= (Read-Int-Int b Z) (Read-Int-Int a Z)))\n)\n;; clause 2\n(or\n  (not (= i 0))\n  (not (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))\n  (not (= pc 2))\n  (<= j (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= N Z)\n  (not (= (Read-Int-Int (Write-Int-Int b 0 (Read-Int-Int a 0)) Z) (Read-Int-Int a Z)))\n)\n;; clause 3\n(or\n  (let ((.def_21 (Read-Int-Int a i))) (not (= .def_21 (Read-Int-Int (Write-Int-Int b i .def_21) i))))\n  (not (= i Z))\n  (not (= (Read-Int-Int (Write-Int-Int b i (Read-Int-Int a i)) Z) (Read-Int-Int b Z)))\n  (not (= pc 2))\n  (<= j (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 4\n(or\n  (<= Z 0)\n  (<= i Z)\n  (<= j (Read-Int-Int a Z))\n)\n;; clause 5\n(or\n  (not (<= N i))\n  (<= j (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= N Z)\n  (not (= (Read-Int-Int b Z) (Read-Int-Int a Z)))\n)\n;; clause 6\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n  (<= j (Read-Int-Int a Z))\n)\n;; clause 7\n(or\n  (not (<= N i))\n  (not (= pc 2))\n  (<= j (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 8\n(or\n  (not (= pc 2))\n  (<= j (Read-Int-Int b Z))\n  (<= Z 0)\n  (<= i Z)\n)\nsearch stats:\nnum_solve_calls = 496\nnum_solve_sat_calls = 252\nnum_solve_unsat_calls = 244\nnum_solver_reset = 0\nnum_added_cubes = 43\nnum_subsumed_cubes = 29\nnum_block = 220\nnum_refinements = 4\nnum_predicates = 14\nmax_cube_size = 7\navg_cube_size = 4.442\nsolve_time = 0.070\nsolve_sat_time = 0.060\nsolve_unsat_time = 0.009\nblock_time = 0.049\ngeneralize_and_push_time = 0.032\nrec_block_time = 0.084\npropagate_time = 0.013\nrefinement_time = 0.029\nprove_time = 0.103\ntotal_time = nan\nsafe"}},"run_time":234,"depth":10}]},{"example":"../examples/array_hybr_nest_3.vmt","result":[{"strategy":"abstract","result":{"Success":{"used_instances":[],"const_instances":[],"ic3ia_out":"invariant\n;; clause 0\n(or\n  (not (<= N i))\n  (<= Z 0)\n  (<= N Z)\n)\n;; clause 1\n(or\n  (<= Z 0)\n  (<= N Z)\n  (= pc 1)\n  (not (<= 1 i))\n  (<= 1 (+ i (* (- 1) j)))\n)\nsearch stats:\nnum_solve_calls = 112\nnum_solve_sat_calls = 58\nnum_solve_unsat_calls = 54\nnum_solver_reset = 0\nnum_added_cubes = 8\nnum_subsumed_cubes = 4\nnum_block = 42\nnum_refinements = 1\nnum_predicates = 8\nmax_cube_size = 5\navg_cube_size = 3.625\nsolve_time = 0.014\nsolve_sat_time = 0.011\nsolve_unsat_time = 0.002\nblock_time = 0.007\ngeneralize_and_push_time = 0.005\nrec_block_time = 0.015\npropagate_time = 0.002\nrefinement_time = 0.005\nprove_time = 0.019\ntotal_time = nan\nsafe"}},"run_time":116,"depth":10}]},{"example":"../examples/array_init_ite_jump_const.vmt","result":[{"strategy":"abstract","result":{"Panic":"called `Result::unwrap()` on an `Err` value: NoProgress { depth: 8, instantiations: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"Z\") } })] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(0)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), Constant(Numeral(0))] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0))] }] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=>\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"not\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Constant(Numeral(0)), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"=\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Write-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } }), QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"i\") } })] }, Constant(Numeral(0))] }, Application { qual_identifier: Simple { identifier: Simple { symbol: Symbol(\"Read-Int-Int\") } }, arguments: [QualIdentifier(Simple { identifier: Simple { symbol: Symbol(\"a\") } }), Constant(Numeral(0))] }] }] }] }"},"run_time":83,"depth":10}]}]