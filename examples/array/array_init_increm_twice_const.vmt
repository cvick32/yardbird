(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun pc () Int)
(declare-fun pc_next () Int)
(define-fun .pc () Int (! pc :next pc_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(> N 1)
(= pc 1)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(=> (and (< i N) (= pc 1)) (= (store a i 0) a_next))
(=> (and (>= i N) (= pc 1)) (= a a_next))
(let ((a!1 (select (store a i (+ (select a i) 1)) i)))
  (=> (and (< i N) (= pc 2)) (= (store a i (+ a!1 1)) a_next)))
(=> (and (= pc 2) (not (< i N))) (= a a_next))
(=> (and (< i N) (= pc 1)) (= (+ i 1) i_next))
(=> (and (>= i N) (= pc 1)) (= 0 i_next))
(=> (and (< i N) (= pc 2)) (= (+ i 1) i_next))
(=> (and (= pc 2) (not (< i N))) (= i i_next))
(= N N_next)
(=> (and (< i N) (= pc 1)) (= 1 pc_next))
(=> (and (>= i N) (= pc 1)) (= 2 pc_next))
(=> (and (< i N) (= pc 2)) (= 2 pc_next))
(=> (and (= pc 2) (not (< i N))) (= pc pc_next))
(= Z Z_next)
(or (= pc 1) (= pc 2))
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (>= (select a Z) 2)))))
  (=> (and (= pc 2) (>= i N) (> Z 0) (< Z N)) (and a!1)))
) :invar-property 0))

