(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun a1 () (Array Int Int))
(declare-fun a1_next () (Array Int Int))
(define-fun .a1 () (Array Int Int) (! a1 :next a1_next))
(declare-fun S () Int)
(declare-fun S_next () Int)
(define-fun .S () Int (! S :next S_next))
(declare-fun val1 () Int)
(declare-fun val1_next () Int)
(define-fun .val1 () Int (! val1 :next val1_next))
(declare-fun val2 () Int)
(declare-fun val2_next () Int)
(define-fun .val2 () Int (! val2 :next val2_next))
(declare-fun low () Int)
(declare-fun low_next () Int)
(define-fun .low () Int (! low :next low_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i (- S 2))
(> S 1)
(= val1 7)
(= val2 3)
(= low 2)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(>= i (- 1))
(= (- i 1) i_next)
(= (store a1 (+ i 1) val2) a_next)
(and (=> (>= i 0) (= (store a i val1) a1)) (=> (not (>= i 0)) (= a a1)))
(= S S_next)
(= val1 val1_next)
(= val2 val2_next)
(= low low_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (<= low (select a Z))))))
  (=> (and (not (>= i (- 1))) (>= Z 0) (< Z S)) (and a!1)))
) :invar-property 0))

