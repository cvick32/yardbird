(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun W () Int)
(declare-fun W_next () Int)
(define-fun .W () Int (! W :next W_next))
(declare-fun B () (Array Int Int))
(declare-fun B_next () (Array Int Int))
(define-fun .B () (Array Int Int) (! B :next B_next))
(declare-fun K () Int)
(declare-fun K_next () Int)
(define-fun .K () Int (! K :next K_next))
(declare-fun M () Int)
(declare-fun M_next () Int)
(define-fun .M () Int (! M :next M_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun P () Int)
(declare-fun P_next () Int)
(define-fun .P () Int (! P :next P_next))
(declare-fun Q () Int)
(declare-fun Q_next () Int)
(define-fun .Q () Int (! Q :next Q_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool
            (!
             (and
              (= i N))
             :init true))

(define-fun trans-conditions () Bool
            (!
             (and
              (= (store a i W) a_next)
              (= (+ i 1) i_next)
              (< i (+ N M))
              (= W (select B (- i N)))
              (= B B_next)
              (= K K_next)
              (= M M_next)
              (= N N_next)
              (= P P_next)
              (= Q Q_next)
              (= Z Z_next))
             :trans true))

(define-fun property () Bool
            (!
             (and
              (=> (and (< K (+ N M)) (>= K N) (not (< i (+ N M))))
                  (and (= (select a K) (select B (- K N))))))
             :invar-property 0))

