(declare-fun b () (Array Int Int))
(declare-fun b_next () (Array Int Int))
(define-fun .b () (Array Int Int) (! b :next b_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun k () Int)
(declare-fun k_next () Int)
(define-fun .k () Int (! k :next k_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(= k 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(let ((a!1 (=> (<= (select a i) 0) (= (store b k (select a i)) b_next)))
      (a!2 (=> (not (<= (select a i) 0)) (= b b_next))))
  (and a!1 a!2))
(< i N)
(= (+ i 1) i_next)
(let ((a!1 (=> (not (<= (select a i) 0)) (= k k_next))))
  (and (=> (<= (select a i) 0) (= (+ k 1) k_next)) a!1))
(= a a_next)
(= N N_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (<= (select b Z) 0)))))
  (=> (and (>= i N) (>= Z 0) (< Z k)) (and a!1)))
) :invar-property 0))

