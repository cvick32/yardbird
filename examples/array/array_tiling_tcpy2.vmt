(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun acopy () (Array Int Int))
(declare-fun acopy_next () (Array Int Int))
(define-fun .acopy () (Array Int Int) (! acopy :next acopy_next))
(declare-fun acopy0 () (Array Int Int))
(declare-fun acopy0_next () (Array Int Int))
(define-fun .acopy0 () (Array Int Int) (! acopy0 :next acopy0_next))
(declare-fun acopy1 () (Array Int Int))
(declare-fun acopy1_next () (Array Int Int))
(define-fun .acopy1 () (Array Int Int) (! acopy1 :next acopy1_next))
(declare-fun acopy2 () (Array Int Int))
(declare-fun acopy2_next () (Array Int Int))
(define-fun .acopy2 () (Array Int Int) (! acopy2 :next acopy2_next))
(declare-fun acopy3 () (Array Int Int))
(declare-fun acopy3_next () (Array Int Int))
(define-fun .acopy3 () (Array Int Int) (! acopy3 :next acopy3_next))
(declare-fun S () Int)
(declare-fun S_next () Int)
(define-fun .S () Int (! S :next S_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(>= S 1)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(< i (* 1 S))
(= (+ 1 i) i_next)
(= (store acopy3 i (select a i)) acopy_next)
(let ((a!1 (store acopy (- (* 5 S) (+ i 1)) (select a (- (* 5 S) (+ i 1))))))
  (= acopy0 a!1))
(let ((a!1 (store acopy0 (- (* 4 S) (+ i 1)) (select a (- (* 4 S) (+ i 1))))))
  (= acopy1 a!1))
(let ((a!1 (store acopy1 (- (* 3 S) (+ i 1)) (select a (- (* 3 S) (+ i 1))))))
  (= acopy2 a!1))
(let ((a!1 (store acopy2 (- (* 2 S) (+ i 1)) (select a (- (* 2 S) (+ i 1))))))
  (= acopy3 a!1))
(= S S_next)
(= a a_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (and (not (< i (* 1 S))) (>= Z 0) (< Z (* 5 S))))
      (a!2 (not (not (= (select a Z) (select acopy Z))))))
  (=> a!1 (and a!2)))
) :invar-property 0))

