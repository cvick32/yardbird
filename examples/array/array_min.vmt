(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun m () Int)
(declare-fun m_next () Int)
(define-fun .m () Int (! m :next m_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(= m 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(< i N)
(= (+ i 1) i_next)
(let ((a!1 (=> (not (<= m (select a i))) (= (select a i) m_next))))
  (and (=> (<= m (select a i)) (= m m_next)) a!1))
(= a a_next)
(= N N_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (<= m (select a Z))))))
  (=> (and (>= i N) (> Z 0) (< Z N)) (and a!1)))
) :invar-property 0))

