(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun b () (Array Int Int))
(declare-fun b_next () (Array Int Int))
(define-fun .b () (Array Int Int) (! b :next b_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun n () Int)
(declare-fun n_next () Int)
(define-fun .n () Int (! n :next n_next))
(declare-fun c () Int)
(declare-fun c_next () Int)
(define-fun .c () Int (! c :next c_next))
(declare-fun pc () Int)
(declare-fun pc_next () Int)
(define-fun .pc () Int (! pc :next pc_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(> c 1)
(= pc 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(=> (and (< i 3) (< i n) (= pc 0)) (= (store a i c) a_next))
(let ((a!1 (= (store a i (select a (- i 3))) a_next)))
  (=> (and (not (< i 3)) (< i n) (= pc 0)) a!1))
(=> (and (not (< i n)) (= pc 0)) (= a a_next))
(=> (and (< i n) (= pc 1)) (= a a_next))
(=> (and (= pc 1) (not (< i n))) (= a a_next))
(=> (and (< i n) (= pc 0)) (= b b_next))
(=> (and (not (< i n)) (= pc 0)) (= b b_next))
(=> (and (< i n) (= pc 1)) (= (store a i c) b_next))
(=> (and (= pc 1) (not (< i n))) (= b b_next))
(=> (and (< i n) (= pc 0)) (= (+ i 1) i_next))
(=> (and (not (< i n)) (= pc 0)) (= 0 i_next))
(=> (and (< i n) (= pc 1)) (= (+ i 1) i_next))
(=> (and (= pc 1) (not (< i n))) (= i i_next))
(= n n_next)
(= c c_next)
(=> (and (< i n) (= pc 0)) (= 0 pc_next))
(=> (and (not (< i n)) (= pc 0)) (= 1 pc_next))
(=> (and (< i n) (= pc 1)) (= 1 pc_next))
(=> (and (= pc 1) (not (< i n))) (= pc pc_next))
(= Z Z_next)
(or (= pc 0) (= pc 1))
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (= (select a Z) (select b Z))))))
  (=> (and (= pc 1) (not (< i n)) (>= Z 0) (< Z n)) (and a!1)))
) :invar-property 0))

