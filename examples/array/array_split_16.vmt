(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool
            (!
             (and
              (= a ((as const (Array Int Int)) 1))
              (= i 0))
             :init true))

(define-fun trans-conditions () Bool
            (!
             (and
              (=> (<= (select a (- i 1)) 10)
                  (= (store a i (+ (select a i) (select a (- i 1)))) a_next))
              (=> (not (<= (select a (- i 1)) 10))
                  (= (store a i 100) a_next))
              (< i N)
              (= (+ i 1) i_next)
              (= N N_next)
              (= Z Z_next))
             :trans true))

(define-fun property () Bool
            (!
             (and
              (=> (and (>= i N) (>= Z 10) (< Z N))
                  (and (= (select a Z) 100))))
             :invar-property 0))

