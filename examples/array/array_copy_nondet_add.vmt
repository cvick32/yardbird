(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun b () (Array Int Int))
(declare-fun b_next () (Array Int Int))
(define-fun .b () (Array Int Int) (! b :next b_next))
(declare-fun c () (Array Int Int))
(declare-fun c_next () (Array Int Int))
(define-fun .c () (Array Int Int) (! c :next c_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun j () Int)
(declare-fun j_next () Int)
(define-fun .j () Int (! j :next j_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun pc () Int)
(declare-fun pc_next () Int)
(define-fun .pc () Int (! pc :next pc_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(= pc 1)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(=> (and (< i N) (< i j) (= pc 1)) (= (store a i j) a_next))
(=> (and (= pc 1) (not (< i j))) (= a a_next))
(=> (and (>= i N) (= pc 1)) (= a a_next))
(=> (and (< i N) (< i j) (= pc 2)) (= a a_next))
(=> (and (= pc 2) (not (< i j))) (= a a_next))
(=> (and (>= i N) (= pc 2)) (= a a_next))
(=> (and (< i N) (< i j) (= pc 3)) (= a a_next))
(let ((a!1 (and (= pc 3) (or (not (< i j)) (not (< i N))))))
  (=> a!1 (= a a_next)))
(=> (and (< i N) (< i j) (= pc 1)) (= b b_next))
(=> (and (= pc 1) (not (< i j))) (= b b_next))
(=> (and (>= i N) (= pc 1)) (= b b_next))
(let ((a!1 (= (store b i (+ (select a i) j)) b_next)))
  (=> (and (< i N) (< i j) (= pc 2)) a!1))
(=> (and (= pc 2) (not (< i j))) (= b b_next))
(=> (and (>= i N) (= pc 2)) (= b b_next))
(=> (and (< i N) (< i j) (= pc 3)) (= b b_next))
(let ((a!1 (and (= pc 3) (or (not (< i j)) (not (< i N))))))
  (=> a!1 (= b b_next)))
(=> (and (< i N) (< i j) (= pc 1)) (= c c_next))
(=> (and (= pc 1) (not (< i j))) (= c c_next))
(=> (and (>= i N) (= pc 1)) (= c c_next))
(=> (and (< i N) (< i j) (= pc 2)) (= c c_next))
(=> (and (= pc 2) (not (< i j))) (= c c_next))
(=> (and (>= i N) (= pc 2)) (= c c_next))
(let ((a!1 (= (store c i (+ (select b i) j)) c_next)))
  (=> (and (< i N) (< i j) (= pc 3)) a!1))
(let ((a!1 (and (= pc 3) (or (not (< i j)) (not (< i N))))))
  (=> a!1 (= c c_next)))
(=> (and (< i N) (< i j) (= pc 1)) (= (+ i 1) i_next))
(=> (and (= pc 1) (not (< i j))) (= i i_next))
(=> (and (>= i N) (= pc 1)) (= 0 i_next))
(=> (and (< i N) (< i j) (= pc 2)) (= (+ i 1) i_next))
(=> (and (= pc 2) (not (< i j))) (= i i_next))
(=> (and (>= i N) (= pc 2)) (= 0 i_next))
(=> (and (< i N) (< i j) (= pc 3)) (= (+ i 1) i_next))
(let ((a!1 (and (= pc 3) (or (not (< i j)) (not (< i N))))))
  (=> a!1 (= i i_next)))
(=> (and (< i N) (< i j) (= pc 1)) (= j j_next))
(=> (and (= pc 1) (not (< i j))) (= j j_next))
(=> (and (>= i N) (= pc 1)) (= j j_next))
(=> (and (< i N) (< i j) (= pc 2)) (= j j_next))
(=> (and (= pc 2) (not (< i j))) (= j j_next))
(=> (and (>= i N) (= pc 2)) (= j j_next))
(=> (and (< i N) (< i j) (= pc 3)) (= j j_next))
(let ((a!1 (and (= pc 3) (or (not (< i j)) (not (< i N))))))
  (=> a!1 (= j j_next)))
(= N N_next)
(=> (and (< i N) (< i j) (= pc 1)) (= 1 pc_next))
(=> (and (= pc 1) (not (< i j))) (= pc pc_next))
(=> (and (>= i N) (= pc 1)) (= 2 pc_next))
(=> (and (< i N) (< i j) (= pc 2)) (= 2 pc_next))
(=> (and (= pc 2) (not (< i j))) (= pc pc_next))
(=> (and (>= i N) (= pc 2)) (= 3 pc_next))
(=> (and (< i N) (< i j) (= pc 3)) (= 3 pc_next))
(let ((a!1 (and (= pc 3) (or (not (< i j)) (not (< i N))))))
  (=> a!1 (= pc pc_next)))
(= Z Z_next)
(or (= pc 1) (= pc 2) (= pc 3))
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (> (select c Z) (select a Z))))))
  (=> (and (= pc 3) (>= i N) (> Z 0) (< Z N)) (and a!1)))
) :invar-property 0))

