(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun j () Int)
(declare-fun j_next () Int)
(define-fun .j () Int (! j :next j_next))
(declare-fun k () Int)
(declare-fun k_next () Int)
(define-fun .k () Int (! k :next k_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(= j 0)
(= k 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(= (store a i j) a_next)
(= (+ i 1) i_next)
(= (+ j i) j_next)
(= (- k i) k_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (>= (select a Z) k)))))
  (=> (and (> Z 0) (< Z i)) (and a!1)))
) :invar-property 0))

