(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun j () Int)
(declare-fun j_next () Int)
(define-fun .j () Int (! j :next j_next))
(declare-fun a1 () (Array Int Int))
(declare-fun a1_next () (Array Int Int))
(define-fun .a1 () (Array Int Int) (! a1 :next a1_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(= j (- N 1))
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(let ((a!1 (=> (not (= (select a1 j) 1)) (= a1 a_next))))
  (and (=> (= (select a1 j) 1) (= (store a1 j 3) a_next)) a!1))
(< i N)
(= (+ i 1) i_next)
(>= j 0)
(= (- j 1) j_next)
(let ((a!1 (=> (not (= (select a i) 0)) (= a a1))))
  (and (=> (= (select a i) 0) (= (store a i 5) a1)) a!1))
(= N N_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (and (not (and (< i N) (>= j 0))) (>= Z 0) (< Z N)))
      (a!2 (not (or (= (select a Z) 0) (= (select a Z) 1)))))
  (=> a!1 (and a!2)))
) :invar-property 0))

