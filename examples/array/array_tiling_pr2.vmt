(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun a1 () (Array Int Int))
(declare-fun a1_next () (Array Int Int))
(define-fun .a1 () (Array Int Int) (! a1 :next a1_next))
(declare-fun CC () Int)
(declare-fun CC_next () Int)
(define-fun .CC () Int (! CC :next CC_next))
(declare-fun val1 () Int)
(declare-fun val1_next () Int)
(define-fun .val1 () Int (! val1 :next val1_next))
(declare-fun val2 () Int)
(declare-fun val2_next () Int)
(define-fun .val2 () Int (! val2 :next val2_next))
(declare-fun minval () Int)
(declare-fun minval_next () Int)
(define-fun .minval () Int (! minval :next minval_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 1)
(> CC 0)
(= val1 1)
(= val2 3)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(<= i (* 1 CC))
(= (+ i 1) i_next)
(let ((a!1 (= (store a1 (- (* 2 i) 1) val1) a_next))
      (a!2 (= (store a1 (- (* 2 i) 1) 0) a_next)))
  (and (=> (<= minval val1) a!1) (=> (not (<= minval val1)) a!2)))
(let ((a!1 (= (store a (- (* 2 i) 2) val2) a1))
      (a!2 (= (store a (- (* 2 i) 2) 0) a1)))
  (and (=> (<= minval val2) a!1) (=> (not (<= minval val2)) a!2)))
(= CC CC_next)
(= val1 val1_next)
(= val2 val2_next)
(= minval minval_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (and (not (<= i (* 1 CC))) (>= Z 0) (< Z (* 2 CC))))
      (a!2 (not (or (<= minval (select a Z)) (= (select a Z) 0)))))
  (=> a!1 (and (not a!2))))
) :invar-property 0))

