(declare-fun b () (Array Int Int))
(declare-fun b_next () (Array Int Int))
(define-fun .b () (Array Int Int) (! b :next b_next))
(declare-fun c () (Array Int Int))
(declare-fun c_next () (Array Int Int))
(define-fun .c () (Array Int Int) (! c :next c_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun j () Int)
(declare-fun j_next () Int)
(define-fun .j () Int (! j :next j_next))
(declare-fun m () Int)
(declare-fun m_next () Int)
(define-fun .m () Int (! m :next m_next))
(declare-fun n () Int)
(declare-fun n_next () Int)
(define-fun .n () Int (! n :next n_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(= j (- N 1))
(> N 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(= (store b i m_next) b_next)
(= (store c j n_next) c_next)
(< i N)
(= (+ i 1) i_next)
(>= j 0)
(= (- j 1) j_next)
(let ((a!1 (=> (not (> (select a i) m)) (= m m_next))))
(let ((a!2 (and (=> (> (select a i) m) (= (select a i) m_next)) a!1)))
  (and (=> (= i 0) (= (select a i) m_next)) (=> (not (= i 0)) a!2))))
(let ((a!1 (=> (not (< (select a j) n)) (= n n_next))))
(let ((a!2 (and (=> (< (select a j) n) (= (select a j) n_next)) a!1)))
(let ((a!3 (=> (not (= j (- N 1))) a!2)))
  (and (=> (= j (- N 1)) (= (select a j) n_next)) a!3))))
(= a a_next)
(= N N_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (and (not (and (< i N) (>= j 0))) (> Z 0) (< Z N)))
      (a!2 (not (not (>= (select b Z) (select c Z))))))
  (=> a!1 (and a!2)))
) :invar-property 0))

