(declare-fun A () (Array Int Int))
(declare-fun A_next () (Array Int Int))
(define-fun .A () (Array Int Int) (! A :next A_next))
(declare-fun a () Int)
(declare-fun a_next () Int)
(define-fun .a () Int (! a :next a_next))
(declare-fun b () Int)
(declare-fun b_next () Int)
(define-fun .b () Int (! b :next b_next))
(declare-fun c () Int)
(declare-fun c_next () Int)
(define-fun .c () Int (! c :next c_next))
(declare-fun d () Int)
(declare-fun d_next () Int)
(define-fun .d () Int (! d :next d_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun e () Int)
(declare-fun e_next () Int)
(define-fun .e () Int (! e :next e_next))
(declare-fun e1 () Int)
(declare-fun e1_next () Int)
(define-fun .e1 () Int (! e1 :next e1_next))
(declare-fun f () Int)
(declare-fun f_next () Int)
(define-fun .f () Int (! f :next f_next))
(declare-fun f1 () Int)
(declare-fun f1_next () Int)
(define-fun .f1 () Int (! f1 :next f1_next))
(declare-fun g () Int)
(declare-fun g_next () Int)
(define-fun .g () Int (! g :next g_next))
(declare-fun g1 () Int)
(declare-fun g1_next () Int)
(define-fun .g1 () Int (! g1 :next g1_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= a 0)
(= b 0)
(= c 0)
(= d 0)
(= i 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(let ((a!1 (store (store (store A i (+ i a)) (+ i 1) (+ i b)) (+ i 2) (+ i c))))
  (= (store a!1 (+ i 3) (+ i d)) A_next))
(= (+ i 1) a_next)
(= (+ a 1) b_next)
(= (+ b 1) c_next)
(= (+ c 1) d_next)
(< i N)
(= (+ i 4) i_next)
(= N N_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (>= (select A Z) 0)))))
  (=> (and (>= i N) (>= Z 0) (< Z N)) (and a!1)))
) :invar-property 0))

