(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun j () Int)
(declare-fun j_next () Int)
(define-fun .j () Int (! j :next j_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun pc () Int)
(declare-fun pc_next () Int)
(define-fun .pc () Int (! pc :next pc_next))
(declare-fun ZZ () Int)
(declare-fun ZZ_next () Int)
(define-fun .ZZ () Int (! ZZ :next ZZ_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool
            (!
             (and
              (= i 0)
              (= j 0)
              (= pc 1))
             :init true))

(define-fun trans-conditions () Bool
            (!
             (and
              ;; outer loop
              (=> (and (< i N) (= pc 1))
                  (and (= a a_next)
                       (= i i_next)
                       (= i j_next)
                       (= 2 pc_next)))
              (=> (and (not (< i N)) (= pc 1))
                  (and (= a a_next)
                       (= i i_next)
                       (= i j_next)
                       (= 3 pc_next)))

              ;; if a[i] > a[j], swap them
              (=> (and (< j N) (= pc 2)
                       (> (select a i) (select a j)))
                  (= (store (store a i (select a j)) j (select a i)) a_next))
              ;; otherwise, keep them the same
              (=> (and (< j N) (= pc 2)
                       (not (> (select a i) (select a j))))
                  (= a a_next))

              ;; stay inside inner loop
              (=> (and (< j N) (= pc 2))
                  (and (= a a_next)
                       (= i i_next)
                       (= (+ j 1) j_next)
                       (= pc pc_next)))

              ;; exiting inner loop
              (=> (and (not (< j N)) (= pc 2))
                  (and (= (+ i 1) i_next)
                       (= j j_next)
                       (= a a_next)
                       (= 1 pc_next)))
              
              ;; constants
              (= N N_next)
              (= ZZ ZZ_next)
              (= Z Z_next)
              (or (= pc 1) (= pc 2)))
             :trans true))

(define-fun property () Bool
            (!
             (and
              (=> (and (= pc 3) (not (< i N)) (not (< j N))
                       (> Z 0) (< Z N) (< Z ZZ) (< Z N) (< ZZ N) (> ZZ 0)) 
                  (<= (select a Z) (select a ZZ))))
             :invar-property 0))

