(declare-fun b () (Array Int Int))
(declare-fun b_next () (Array Int Int))
(define-fun .b () (Array Int Int) (! b :next b_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun min () Int)
(declare-fun min_next () Int)
(define-fun .min () Int (! min :next min_next))
(declare-fun max () Int)
(declare-fun max_next () Int)
(define-fun .max () Int (! max :next max_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(> N 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(and (=> (< i N) (= (store b i min_next) b_next))
     (=> (not (< i N)) (= (store b i max_next) b_next)))
(< i (* 2 N))
(= (+ i 1) i_next)
(let ((a!1 (=> (not (<= min (select a i))) (= (select a i) min_next))))
(let ((a!2 (and (=> (<= min (select a i)) (= min min_next)) a!1)))
  (and (=> (= i 0) (= (select a i) min_next)) (=> (not (= i 0)) a!2))))
(let ((a!1 (=> (not (>= max (select a i))) (= (select a i) max_next))))
(let ((a!2 (and (=> (>= max (select a i)) (= max max_next)) a!1)))
  (and (=> (= i 0) (= (select a i) max_next)) (=> (not (= i 0)) a!2))))
(= a a_next)
(= N N_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (<= (select b 0) (select b (- (* 2 N) 1)))))
  (=> (and (>= i (* 2 N))) (and (not (not a!1)))))
) :invar-property 0))

