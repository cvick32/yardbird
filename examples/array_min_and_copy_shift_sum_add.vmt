(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun b () (Array Int Int))
(declare-fun b_next () (Array Int Int))
(define-fun .b () (Array Int Int) (! b :next b_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun j () Int)
(declare-fun j_next () Int)
(define-fun .j () Int (! j :next j_next))
(declare-fun k () Int)
(declare-fun k_next () Int)
(define-fun .k () Int (! k :next k_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun pc () Int)
(declare-fun pc_next () Int)
(define-fun .pc () Int (! pc :next pc_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(= pc 1)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(= a a_next)
(=> (and (< i N) (= pc 1)) (= b b_next))
(=> (and (>= i N) (= pc 1)) (= b b_next))
(let ((a!1 (= (store b i (- (select a i) j)) b_next)))
  (=> (and (< i N) (= pc 2)) a!1))
(=> (and (>= i N) (= pc 2)) (= b b_next))
(=> (and (< i N) (= pc 3)) (= b b_next))
(=> (and (= pc 3) (not (< i N))) (= b b_next))
(=> (and (< i N) (= pc 1)) (= (+ i 1) i_next))
(=> (and (>= i N) (= pc 1)) (= 0 i_next))
(=> (and (< i N) (= pc 2)) (= (+ i 1) i_next))
(=> (and (>= i N) (= pc 2)) (= 0 i_next))
(=> (and (< i N) (= pc 3)) (= (+ i 1) i_next))
(=> (and (= pc 3) (not (< i N))) (= i i_next))
(=> (and (> j (select a i)) (< i N) (= pc 1)) (= (select a i) j_next))
(let ((a!1 (and (not (> j (select a i))) (< i N) (= pc 1))))
  (=> a!1 (= j j_next)))
(=> (and (>= i N) (= pc 1)) (= j j_next))
(=> (and (< i N) (= pc 2)) (= j j_next))
(=> (and (>= i N) (= pc 2)) (= j j_next))
(=> (and (< i N) (= pc 3)) (= j j_next))
(=> (and (= pc 3) (not (< i N))) (= j j_next))
(=> (and (< i N) (= pc 1)) (= k k_next))
(=> (and (>= i N) (= pc 1)) (= k k_next))
(=> (and (< i N) (= pc 2)) (= k k_next))
(=> (and (>= i N) (= pc 2)) (= 0 k_next))
(=> (and (< i N) (= pc 3)) (= (+ k i (select b i)) k_next))
(=> (and (= pc 3) (not (< i N))) (= k k_next))
(= N N_next)
(=> (and (< i N) (= pc 1)) (= 1 pc_next))
(=> (and (>= i N) (= pc 1)) (= 2 pc_next))
(=> (and (< i N) (= pc 2)) (= 2 pc_next))
(=> (and (>= i N) (= pc 2)) (= 3 pc_next))
(=> (and (< i N) (= pc 3)) (= 3 pc_next))
(=> (and (= pc 3) (not (< i N))) (= pc pc_next))
(= Z Z_next)
(or (= pc 1) (= pc 2) (= pc 3))
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (and (not (not (>= k 0))))))
  (=> (and (= pc 3) (>= i N)) a!1))
) :invar-property 0))

