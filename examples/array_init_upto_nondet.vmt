(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun n () Int)
(declare-fun n_next () Int)
(define-fun .n () Int (! n :next n_next))
(declare-fun k () Int)
(declare-fun k_next () Int)
(define-fun .k () Int (! k :next k_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(>= k 0)
(< k n)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(and (=> (< i k) (= (store a i i) a_next)) (=> (not (< i k)) (= a a_next)))
(< i n)
(= (+ i 1) i_next)
(= n n_next)
(= k k_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (= (select a Z) Z)))))
  (=> (and (>= i n) (>= Z 0) (< Z n) (< Z k)) (and a!1)))
) :invar-property 0))

