(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun sum () Int)
(declare-fun sum_next () Int)
(define-fun .sum () Int (! sum :next sum_next))
(declare-fun n () Int)
(declare-fun n_next () Int)
(define-fun .n () Int (! n :next n_next))
(declare-fun pc () Int)
(declare-fun pc_next () Int)
(define-fun .pc () Int (! pc :next pc_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(= sum 0)
(= pc 1)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(= a a_next)
(=> (and (< i n) (= pc 1)) (= (+ i 1) i_next))
(=> (and (>= i n) (= pc 1)) (= 0 i_next))
(=> (and (< i n) (= pc 2)) (= (+ i 1) i_next))
(=> (and (>= i n) (= pc 2)) (= 0 i_next))
(=> (and (< i n) (= pc 3)) (= (+ i 1) i_next))
(=> (and (>= i n) (= pc 3)) (= 0 i_next))
(=> (and (< i n) (= pc 4)) (= (+ i 1) i_next))
(=> (and (= pc 4) (not (< i n))) (= i i_next))
(=> (and (< i n) (= pc 1)) (= (+ sum (select a i)) sum_next))
(=> (and (>= i n) (= pc 1)) (= sum sum_next))
(=> (and (< i n) (= pc 2)) (= (+ sum (select a i)) sum_next))
(=> (and (>= i n) (= pc 2)) (= sum sum_next))
(=> (and (< i n) (= pc 3)) (= (- sum (select a i)) sum_next))
(=> (and (>= i n) (= pc 3)) (= sum sum_next))
(=> (and (< i n) (= pc 4)) (= (- sum (select a i)) sum_next))
(=> (and (= pc 4) (not (< i n))) (= sum sum_next))
(= n n_next)
(=> (and (< i n) (= pc 1)) (= 1 pc_next))
(=> (and (>= i n) (= pc 1)) (= 2 pc_next))
(=> (and (< i n) (= pc 2)) (= 2 pc_next))
(=> (and (>= i n) (= pc 2)) (= 3 pc_next))
(=> (and (< i n) (= pc 3)) (= 3 pc_next))
(=> (and (>= i n) (= pc 3)) (= 4 pc_next))
(=> (and (< i n) (= pc 4)) (= 4 pc_next))
(=> (and (= pc 4) (not (< i n))) (= pc pc_next))
(= Z Z_next)
(or (= pc 1) (= pc 2) (= pc 3) (= pc 4))
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (and (not (not (= sum 0))))))
  (=> (and (= pc 4) (>= i n)) a!1))
) :invar-property 0))

