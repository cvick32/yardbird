(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun a1 () (Array Int Int))
(declare-fun a1_next () (Array Int Int))
(define-fun .a1 () (Array Int Int) (! a1 :next a1_next))
(declare-fun a2 () (Array Int Int))
(declare-fun a2_next () (Array Int Int))
(define-fun .a2 () (Array Int Int) (! a2 :next a2_next))
(declare-fun a3 () (Array Int Int))
(declare-fun a3_next () (Array Int Int))
(define-fun .a3 () (Array Int Int) (! a3 :next a3_next))
(declare-fun a4 () (Array Int Int))
(declare-fun a4_next () (Array Int Int))
(define-fun .a4 () (Array Int Int) (! a4 :next a4_next))
(declare-fun val1 () Int)
(declare-fun val1_next () Int)
(define-fun .val1 () Int (! val1 :next val1_next))
(declare-fun val2 () Int)
(declare-fun val2_next () Int)
(define-fun .val2 () Int (! val2 :next val2_next))
(declare-fun val3 () Int)
(declare-fun val3_next () Int)
(define-fun .val3 () Int (! val3 :next val3_next))
(declare-fun val4 () Int)
(declare-fun val4_next () Int)
(define-fun .val4 () Int (! val4 :next val4_next))
(declare-fun val5 () Int)
(declare-fun val5_next () Int)
(define-fun .val5 () Int (! val5 :next val5_next))
(declare-fun S () Int)
(declare-fun S_next () Int)
(define-fun .S () Int (! S :next S_next))
(declare-fun defval () Int)
(declare-fun defval_next () Int)
(define-fun .defval () Int (! defval :next defval_next))
(declare-fun fixval () Int)
(declare-fun fixval_next () Int)
(define-fun .fixval () Int (! fixval :next fixval_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 1)
(> S 0)
(= defval 0)
(= fixval 10)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(<= i (* 1 S))
(= (+ i 1) i_next)
(let ((a!1 (= (store a4 (- (* 5 i) 1) fixval) a_next))
      (a!2 (= (store a4 (- (* 5 i) 1) val1) a_next)))
  (and (=> (= defval val1) a!1) (=> (not (= defval val1)) a!2)))
(let ((a!1 (= (store a (- (* 5 i) 5) fixval) a1))
      (a!2 (= (store a (- (* 5 i) 5) val5) a1)))
  (and (=> (= defval val5) a!1) (=> (not (= defval val5)) a!2)))
(let ((a!1 (= (store a1 (- (* 5 i) 4) fixval) a2))
      (a!2 (= (store a1 (- (* 5 i) 4) val4) a2)))
  (and (=> (= defval val4) a!1) (=> (not (= defval val4)) a!2)))
(let ((a!1 (= (store a2 (- (* 5 i) 3) fixval) a3))
      (a!2 (= (store a2 (- (* 5 i) 3) val3) a3)))
  (and (=> (= defval val3) a!1) (=> (not (= defval val3)) a!2)))
(let ((a!1 (= (store a3 (- (* 5 i) 2) fixval) a4))
      (a!2 (= (store a3 (- (* 5 i) 2) val2) a4)))
  (and (=> (= defval val2) a!1) (=> (not (= defval val2)) a!2)))
(= S S_next)
(= defval defval_next)
(= fixval fixval_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (and (not (<= i (* 1 S))) (>= Z 0) (< Z (* 5 S))))
      (a!2 (not (not (= (select a Z) defval)))))
  (=> a!1 (and (not a!2))))
) :invar-property 0))

