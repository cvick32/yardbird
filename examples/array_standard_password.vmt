(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun j () Int)
(declare-fun j_next () Int)
(define-fun .j () Int (! j :next j_next))
(declare-fun p () (Array Int Int))
(declare-fun p_next () (Array Int Int))
(define-fun .p () (Array Int Int) (! p :next p_next))
(declare-fun g () (Array Int Int))
(declare-fun g_next () (Array Int Int))
(define-fun .g () (Array Int Int) (! g :next g_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(= j 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(= (+ i 1) i_next)
(= j_next 0)
(let ((a!1 (=> (not (= (select p i) (select g i))) (= j_next 1))))
  (and (=> (= (select p i) (select g i)) (= j_next 0)) a!1))
(= p p_next)
(= g g_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (= (select p Z) (select g Z))))))
  (=> (and (not (= j 0)) (>= Z 0) (< Z (- i 1))) (and a!1)))
) :invar-property 0))

