(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= a (store a 0 0))
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(= (store a 0 (+ 1 (select a 0))) a_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (>= (select a 0) 0)))))
  (=> (and (= Z Z)) (and a!1)))
) :invar-property 0))

