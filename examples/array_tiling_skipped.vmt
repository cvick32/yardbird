(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun a1 () (Array Int Int))
(declare-fun a1_next () (Array Int Int))
(define-fun .a1 () (Array Int Int) (! a1 :next a1_next))
(declare-fun S () Int)
(declare-fun S_next () Int)
(define-fun .S () Int (! S :next S_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(>= S 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(< i S)
(= (+ i 1) i_next)
(let ((a!1 (> (select a1 (+ (* 2 i) 1)) (+ (* 2 i) 1)))
      (a!2 (= (store a1 (+ (* 2 i) 1) (+ (* 2 i) 1)) a_next)))
  (and (=> a!1 a!2) (=> (not a!1) (= a1 a_next))))
(let ((a!1 (=> (> (select a (* 2 i)) (* 2 i)) (= (store a (* 2 i) (* 2 i)) a1)))
      (a!2 (not (> (select a (* 2 i)) (* 2 i)))))
  (and a!1 (=> a!2 (= a a1))))
(= S S_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (<= (select a Z) Z)))))
  (=> (and (not (< i S)) (> Z 0) (< Z (* 2 S))) (and a!1)))
) :invar-property 0))

