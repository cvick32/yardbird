(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun a1 () (Array Int Int))
(declare-fun a1_next () (Array Int Int))
(define-fun .a1 () (Array Int Int) (! a1 :next a1_next))
(declare-fun val1 () Int)
(declare-fun val1_next () Int)
(define-fun .val1 () Int (! val1 :next val1_next))
(declare-fun val2 () Int)
(declare-fun val2_next () Int)
(define-fun .val2 () Int (! val2 :next val2_next))
(declare-fun S () Int)
(declare-fun S_next () Int)
(define-fun .S () Int (! S :next S_next))
(declare-fun defval () Int)
(declare-fun defval_next () Int)
(define-fun .defval () Int (! defval :next defval_next))
(declare-fun fixval () Int)
(declare-fun fixval_next () Int)
(define-fun .fixval () Int (! fixval :next fixval_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 1)
(> S 0)
(= defval 0)
(= fixval 10)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(<= i (* 1 S))
(= (+ i 1) i_next)
(let ((a!1 (= (store a1 (- (* 2 i) 1) 10) a_next))
      (a!2 (= (store a1 (- (* 2 i) 1) val1) a_next)))
  (and (=> (= val1 0) a!1) (=> (not (= val1 0)) a!2)))
(let ((a!1 (= (store a (- (* 2 i) 2) 10) a1))
      (a!2 (= (store a (- (* 2 i) 2) val2) a1)))
  (and (=> (= val2 0) a!1) (=> (not (= val2 0)) a!2)))
(= S S_next)
(= defval defval_next)
(= fixval fixval_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (and (not (<= i (* 1 S))) (>= Z 0) (< Z (* 2 S))))
      (a!2 (not (not (= (select a Z) 0)))))
  (=> a!1 (and (not a!2))))
) :invar-property 0))

