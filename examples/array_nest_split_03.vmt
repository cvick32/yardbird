(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun j () Int)
(declare-fun j_next () Int)
(define-fun .j () Int (! j :next j_next))
(declare-fun M () Int)
(declare-fun M_next () Int)
(define-fun .M () Int (! M :next M_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))
(declare-fun pc () Int)
(declare-fun pc_next () Int)
(define-fun .pc () Int (! pc :next pc_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(>= M 0)
(= pc 1)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(=> (and (< i N) (= pc 1)) (= a a_next))
(=> (and (= i j) (< j N) (= pc 2)) (= (store a j M) a_next))
(=> (and (not (= i j)) (< j N) (= pc 2)) (= (store a j (select a j)) a_next))
(=> (and (not (< j N)) (= pc 2)) (= a a_next))
(let ((a!1 (and (= pc 2) (not (not (< j N))))))
  (=> a!1 (= a a_next)))
(=> (and (< i N) (= pc 1)) (= i i_next))
(=> (and (< j N) (= pc 2)) (= i i_next))
(=> (and (not (< j N)) (= pc 2)) (= (+ i 1) i_next))
(let ((a!1 (and (= pc 2) (not (not (< j N))))))
  (=> a!1 (= i i_next)))
(=> (and (< i N) (= pc 1)) (= 0 j_next))
(=> (and (< j N) (= pc 2)) (= (+ j 1) j_next))
(=> (and (not (< j N)) (= pc 2)) (= j j_next))
(let ((a!1 (and (= pc 2) (not (not (< j N))))))
  (=> a!1 (= j j_next)))
(= M M_next)
(= N N_next)
(=> (and (< i N) (= pc 1)) (= 2 pc_next))
(=> (and (< j N) (= pc 2)) (= 2 pc_next))
(=> (and (not (< j N)) (= pc 2)) (= 1 pc_next))
(let ((a!1 (and (= pc 2) (not (not (< j N))))))
  (=> a!1 (= pc pc_next)))
(= Z Z_next)
(or (= pc 1) (= pc 2))
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (>= (select a Z) 0)))))
  (=> (and (= pc 1) (not (< i N)) (>= Z 0) (< Z N)) (and a!1)))
) :invar-property 0))

