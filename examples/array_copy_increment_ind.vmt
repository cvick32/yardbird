(declare-fun b () (Array Int Int))
(declare-fun b_next () (Array Int Int))
(define-fun .b () (Array Int Int) (! b :next b_next))
(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(= (store b i (+ 1 (select a i))) b_next)
(= (+ i 1) i_next)
(= a a_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (< (select a Z) (select b Z))))))
  (=> (and (> Z 0) (< Z i)) (and a!1)))
) :invar-property 0))

