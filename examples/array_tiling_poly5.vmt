(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))
(declare-fun S () Int)
(declare-fun S_next () Int)
(define-fun .S () Int (! S :next S_next))
(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))

(define-fun init-conditions () Bool (!
 (and
(= i 0)
(>= S 1)
) :init true))

(define-fun trans-conditions () Bool (!
 (and
(< i S)
(= (+ i 1) i_next)
(= (store a i (* (+ i 1) (- i 1))) a_next)
(= S S_next)
(= Z Z_next)
) :trans true))

(define-fun property () Bool (!
 (and
(let ((a!1 (not (not (< (select a Z) (* Z Z))))))
  (=> (and (>= i S) (>= Z 0) (< Z S)) (and a!1)))
) :invar-property 0))

